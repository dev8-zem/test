#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получить статусы обмена данными.
// 
// Возвращаемое значение:
//  Структура - Получить статусы обмена данными:
//   * ОбменДаннымиАктивен - Булево -
//   * ТипОбмена - Число -
//   * ПоРасписанию - Булево -
//   * ВыгружаемаяСейчасКоллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
//   * ЗапланированоВыгрузитьОбъектовКоллекции - Число -
//   * ВыгруженоОбъектовКоллекции - Число -
//   * ДатаЗавершения - Дата -
//   * ДатаОбновленияЗаписи - Дата -
//   * ЕстьОшибка - Булево -
//   * ТекстОшибки - Строка -
Функция ПолучитьСтатусыОбменаДанными() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ОбменДаннымиАктивен,
	|	СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ТипОбмена,
	|	СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПоРасписанию,
	|	СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ВыгружаемаяСейчасКоллекция,
	|	СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗапланированоВыгрузитьОбъектовКоллекции,
	|	СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗапланированоВыгрузитьКоллекций,
	|	СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ВыгруженоОбъектовКоллекции,
	|	СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ВыгруженоКоллекций,
	|	СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ДатаЗавершения,
	|	СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ДатаОбновленияЗаписи,
	|	СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЕстьОшибка,
	|	СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ТекстОшибки
	|ИЗ
	|	РегистрСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж КАК
	|		СтатусыОбменаДаннымиССервисомПрогнозированияПродаж
	|ГДЕ
	|	СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ИдентификаторЗаписи = &ИдентификаторЗаписи";
	Запрос.УстановитьПараметр("ИдентификаторЗаписи", "1");
	
	Ответ = ШаблонЗаполненияПолейКоллекций();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Ответ, Выборка);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Записать статусы обмена данными.
// 
// Параметры:
//  ЗначенияПолейКоллекции - см. ШаблонЗаполненияПолейКоллекций
// 
Процедура ЗаписатьСтатусыОбменаДанными(ЗначенияПолейКоллекции) Экспорт
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж");
		ЭлементБлокировкиДанных.УстановитьЗначение("ИдентификаторЗаписи", "1");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
	
		НаборЗаписей = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить("1");
		НаборЗаписей.Прочитать();
		
		НаборЗаписей.Очистить();
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ЗначенияПолейКоллекции);
		Запись.ИдентификаторЗаписи = "1";
		Запись.ДатаОбновленияЗаписи = ТекущаяДатаСеанса();
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж,
			,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Шаблон заполнения полей коллекций.
// 
// Возвращаемое значение:
//  Структура - Шаблон заполнения полей коллекций:
//   * ОбменДаннымиАктивен - Булево -
//   * ТипОбмена - Число - 0 - выгрузка, 1 - загрузка.
//   * ПоРасписанию - Булево -
//   * ВыгружаемаяСейчасКоллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
//   * ЗапланированоВыгрузитьОбъектовКоллекции - Число -
//   * ВыгруженоОбъектовКоллекции - Число - 
//   * ДатаЗавершения - Дата -
//   * ЕстьОшибка - Булево -
//   * ТекстОшибки - Строка -
Функция ШаблонЗаполненияПолейКоллекций() Экспорт
	
	Ответ = Новый Структура();
	Ответ.Вставить("ОбменДаннымиАктивен", Ложь);
	Ответ.Вставить("ТипОбмена", 0); // 0 - выгрузка, 1 - загрузка.
	Ответ.Вставить("ПоРасписанию", Ложь);
	Ответ.Вставить("ВыгружаемаяСейчасКоллекция", Перечисления.КоллекцииСервисаПрогнозированияПродаж.ПустаяСсылка());
	Ответ.Вставить("ЗапланированоВыгрузитьОбъектовКоллекции", 0);
	Ответ.Вставить("ВыгруженоОбъектовКоллекции", 0);
	Ответ.Вставить("ЗапланированоВыгрузитьКоллекций", 0);
	Ответ.Вставить("ВыгруженоКоллекций", 0);
	Ответ.Вставить("ДатаЗавершения", Дата(1,1,1));
	Ответ.Вставить("ДатаОбновленияЗаписи", Дата(1, 1, 1));
	Ответ.Вставить("ЕстьОшибка", Ложь);
	Ответ.Вставить("ТекстОшибки", "");
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.10.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1df80191-ff91-852a-f100-0b121137de33");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр ""Коллекции сервиса прогнозирования продаж"" по данным константы ""Настройки сервиса прогнозирования продаж""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.НастройкиСервисаПрогнозирования.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется.
	Возврат;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	ОбработкаЗавершена = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;

		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить("1");
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить(); // В строке остаются значения по умолчанию.
			НоваяЗапись.ИдентификаторЗаписи = "1";
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбработкаЗавершена = Ложь;
		
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать данные в регистр %ИмяРегистра% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПредставлениеОшибки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяОбъекта);
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта, 
			Неопределено, 
			ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
