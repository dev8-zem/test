#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	Параметры.НезависимыеРегистры.Добавить(Метаданные.РегистрыСведений.РеестрДокументов);
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам международного учета.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
КонецПроцедуры

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Документ - ДокументСсылка - ссылка на документ
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ЗаписатьДанные(ТаблицыДляДвижений, Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеестрДокументов = Неопределено;
	Если НЕ ТаблицыДляДвижений.Свойство("Таблица" + "РеестрДокументов", ТаблицаРеестрДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей();
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Набор.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Набор.Отбор.Ссылка.Установить(Документ);
	Набор.ЗагрузитьСОбработкой(ТаблицаРеестрДокументов);
	Набор.Записать();
	
	ОбновлениеИнформационнойБазыУТ.ОтметитьВыполнениеОбработкиИнтерактивно(Набор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Записывает в регистр данные по переданному разделителю записи.
//
// Параметры:
//  ТаблицыДляДвижений		 - Структура - содержит по ключу ТаблицыДляДвижений структуру
//  	имеющую ключ ТаблицаРеестрДокументов (ТаблицаЗначений).
//  РазделительЗаписи		 - Строка - измерение, по которому необходимо выполнить запись
//  ЗамещатьЗаписи			 - Булево - определяет режим замещения существующих записей разделителя. Истина - перед записью существующие
//		записи будут удалены. Ложь - записи будут дописаны к уже существующим в информационной базе записям.
//
Процедура ЗаписатьДанныеРазделителя(ТаблицыДляДвижений, РазделительЗаписи, ЗамещатьЗаписи = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.РазделительЗаписи.Установить(РазделительЗаписи);
	Набор.ЗагрузитьСОбработкой(ТаблицыДляДвижений["Таблица" + "РеестрДокументов"]);
	Набор.Записать(ЗамещатьЗаписи);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

// Возвращает признак, того отражаются ли данные полученного объекта в реестре сведений или нет.
//
// Параметры:
//	ПроверяемыйОбъект - ДокументОбъект, ДокументСсылка, ДанныеФормыСтруктура, ОбъектМетаданных - 
//
// Возвращаемое значение:
//	Булево - Истина, если данные полученного объекта, отражаются в реестре сведений.
//
Функция ОбъектВключенВСоставДанныхРеестра(ПроверяемыйОбъект) Экспорт
	
	ТипЗначения = ТипЗнч(ПроверяемыйОбъект);
	Если ТипЗначения = Тип("ДанныеФормыСтруктура") Тогда
		Если Не ПроверяемыйОбъект.Свойство("Ссылка") Тогда
			Возврат Ложь;
		КонецЕсли;
		ТипСсылки = ТипЗнч(ПроверяемыйОбъект.Ссылка);
	Иначе	
		Если ТипЗначения = Тип("ОбъектМетаданных") Тогда
			МетаданныеЗначения = ПроверяемыйОбъект; // ОбъектМетаданныхДокумент
		Иначе
			МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗначения); // ОбъектМетаданныхДокумент
			
			Если МетаданныеЗначения = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоДокумент(МетаданныеЗначения) Тогда
			Возврат Ложь;
		КонецЕсли;

		ТипСсылки = ТипЗнч(МетаданныеЗначения.СтандартныеРеквизиты.Ссылка.Тип.ПривестиЗначение());
	КонецЕсли;

	Возврат Метаданные.РегистрыСведений.РеестрДокументов.Измерения.Ссылка.Тип.СодержитТип(ТипСсылки);
	
КонецФункции

// Инициализирует и записывает данные документов, полученных объектов метаданных, в регистр сведений.
//
// Параметры:
//	ОбъектыМетаданных - Соответствие - объекты метаданных:
//		* Ключ		- ОбъектМетаданныхДокумент	- объект метаданных документа.
//		* Значение	- Неопределено				- пустое значение.
//
Процедура ОтразитьДанныеДокументовВРеестре(ОбъектыМетаданных) Экспорт
	
	ИменаОбъектов		= Новый Массив;
	СсылкиДокументов	= Новый Массив;
	
	Для Каждого ЭлементДанных Из ОбъектыМетаданных Цикл
		ОбъектДанных		= ЭлементДанных.Ключ;
		ПолноеИмяОбъекта	= ОбъектДанных.ПолноеИмя();
		
		ИменаОбъектов.Добавить(ПолноеИмяОбъекта);
	КонецЦикла;
	
	НеиспользуемыеПоля = Новый Массив;
	НеиспользуемыеПоля.Добавить("Дополнительно");
	НеиспользуемыеПоля.Добавить("НомерПервичногоДокумента");
	
	Для Каждого ПолноеИмяОбъекта Из ИменаОбъектов Цикл
		
		ИмяДокумента = СтрРазделить(ПолноеИмяОбъекта, ".")[1];
		РезультатАдаптацииЗапроса = Документы[ИмяДокумента].АдаптированныйТекстЗапросаДвиженийПоРегистру("РеестрДокументов");
		Регистраторы = ОбновлениеИнформационнойБазыУТ.ДанныеНезависимогоРегистраДляПерепроведения(
							РезультатАдаптацииЗапроса,
							"РегистрСведений.РеестрДокументов",
							ПолноеИмяОбъекта,
							НеиспользуемыеПоля);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СсылкиДокументов, Регистраторы.ВыгрузитьКолонку("Ссылка"));
		
	КонецЦикла;
	
	Для Каждого Ссылка Из СсылкиДокументов Цикл
		ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(Ссылка, "РеестрДокументов");
		РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, Ссылка, Неопределено, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает коллекцию типов, которые включены в измерение 'Ссылка'.
//
// Возвращаемое значение:
//	Массив Из Тип - коллекция типов, которые включены в измерение 'Ссылка'.
//
Функция ТипыДокументовРеестра() Экспорт
	
	ТипыСсылки = Метаданные.РегистрыСведений.РеестрДокументов.Измерения.Ссылка.Тип.Типы();
	
	ИсключаемыеТипы = Новый Массив;
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.ВводОстатков"));
	//++ Локализация
	ИсключаемыеТипы.Очистить();
	//-- Локализация
	
	Если ИсключаемыеТипы.Количество() Тогда
		ТипыДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТипыСсылки, ИсключаемыеТипы);
	Иначе
		ТипыДокументов = ТипыСсылки;
	КонецЕсли;
	
	Возврат ТипыДокументов;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(Ссылка)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ИзменениеОбъектаРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьНовыеДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.11.44";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1bdf9d3e-e3ec-4f48-be48-308af44b6f03");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РеестрДокументов.ЗарегистрироватьНовыеДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр ""Реестр документов"" по данным относящихся к нему документов, заполняются ранее не заполненные документы'");

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.АннулированиеПодарочныхСертификатов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратПодарочныхСертификатов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтгрузкаТоваровСХранения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПересортицаТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПорчаТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриемкаТоваровНаХранение.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РаспределениеДоходовПоНаправлениямДеятельности.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РаспределениеНДС.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РаспределениеРасходовБудущихПериодов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РасчетКурсовыхРазниц.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РасчетСебестоимостиТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РеализацияПодарочныхСертификатов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявлениеОВвозеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	//++ Локализация
	Читаемые.Добавить(Метаданные.Документы.ЗаписьКнигиПокупок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаписьКнигиПродаж.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаВидаДеятельностиНДС.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаНалогообложенияНДСПартийТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.МаркировкаТоваровГИСМ.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПеремаркировкаТоваровГИСМ.ПолноеИмя());
	//-- Локализация

	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.12.74";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5c13bb21-4407-473a-81c4-e16b8693e7bb");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКОбработкеДляИзменения";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = 
		НСтр("ru = 'Корректировка суммы в реестре документов по документу ""Авансовый отчет""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.АвансовыйОтчет.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ВсеКлючиОбработаны = Истина;
	
	ОбъектыМетаданных = Справочники.КлючиРеестраДокументов.ОбъектыМетаданныхЗакешированныеВКлючахРеестра();
	ОбъектыМетаданных.Вставить(Метаданные.Справочники.КлючиРеестраДокументов);
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		ЕстьЗаблокированные = ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь,
			ОбъектМетаданных.Ключ.ПолноеИмя());
		Если ЕстьЗаблокированные Тогда
			ВсеКлючиОбработаны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ВсеКлючиОбработаны Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ИмяИзмеренияДляОтбора = "Ссылка";
	ДополнительныеПараметры.ЗаписыватьВОднойТранзакции = Ложь;
	ДополнительныеПараметры.НужнаДополнительнаяОбработкаЗаписей = Истина;
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;
	
	ВсеСделано = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Неопределено,
																			"РегистрСведений.РеестрДокументов",
																			Параметры.Очередь,
																			ДополнительныеПараметры);
	
	Параметры.ОбработкаЗавершена = ВсеСделано;
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьНовыеДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт 
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.РеестрДокументов";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("ДатаДокументаИБ УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("ДатаДокументаИБ УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	ОбрабатываемыеТипыДокументов = Новый Массив;
	ОбрабатываемыеТипыДокументов.Добавить("Документ.АннулированиеПодарочныхСертификатов");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВозвратПодарочныхСертификатов");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтгрузкаТоваровСХранения");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПриемкаТоваровНаХранение");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПорчаТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПересортицаТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.РаспределениеДоходовПоНаправлениямДеятельности");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.РаспределениеНДС");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.РаспределениеРасходовБудущихПериодов");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.РасчетКурсовыхРазниц");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.РасчетСебестоимостиТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.РеализацияПодарочныхСертификатов");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаявлениеОВвозеТоваров");

	//++ Локализация
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаписьКнигиПокупок");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаписьКнигиПродаж");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.КорректировкаВидаДеятельностиНДС");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.КорректировкаНалогообложенияНДСПартийТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.МаркировкаТоваровГИСМ");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПеремаркировкаТоваровГИСМ");
	//-- Локализация

	
	// Регистрация через АдаптированныйТекстЗапроса
	Для каждого ПолноеИмяДокумента Из ОбрабатываемыеТипыДокументов Цикл
		
		НеиспользуемыеПоля = Новый Массив;
		НеиспользуемыеПоля.Добавить("Дополнительно");
		НеиспользуемыеПоля.Добавить("РазделительЗаписи");
		НеиспользуемыеПоля.Добавить("НомерПервичногоДокумента");
		
		ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
		РезультатАдаптацииЗапроса = Документы[ИмяДокумента].АдаптированныйТекстЗапросаДвиженийПоРегистру("РеестрДокументов");
		Регистраторы = ОбновлениеИнформационнойБазыУТ.ДанныеНезависимогоРегистраДляПерепроведения(
			РезультатАдаптацииЗапроса, 
			"РегистрСведений.РеестрДокументов", 
			ПолноеИмяДокумента, 
			НеиспользуемыеПоля);
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
		
	КонецЦикла;
	
	// Дополнительная ручная регистрация
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистраторы.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокументов.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПриемкаТоваровНаХранение КАК ТаблицаДокументов
	|	ГДЕ
	|		ТаблицаДокументов.Проведен
	|		И НЕ ТаблицаДокументов.СуммаДокумента В
	|				(ВЫБРАТЬ
	|					ЕСТЬNULL(СУММА(ТаблицаТовары.Сумма), 0) КАК СуммаДокумента
	|				ИЗ
	|					Документ.ПриемкаТоваровНаХранение.Товары КАК ТаблицаТовары
	|				ГДЕ
	|					ТаблицаТовары.Ссылка = ТаблицаДокументов.Ссылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтгрузкаТоваровСХранения.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ОтгрузкаТоваровСХранения КАК ОтгрузкаТоваровСХранения
	|	ГДЕ
	|		ОтгрузкаТоваровСХранения.Проведен
	|		И НЕ ОтгрузкаТоваровСХранения.СуммаДокумента В
	|				(ВЫБРАТЬ
	|					ЕСТЬNULL(СУММА(ТаблицаТовары.Сумма), 0) КАК СуммаДокумента
	|				ИЗ
	|					Документ.ОтгрузкаТоваровСХранения.Товары КАК ТаблицаТовары
	|				ГДЕ
	|					ТаблицаТовары.Ссылка = ОтгрузкаТоваровСХранения.Ссылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Документ.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПересортицаТоваров КАК Документ
	|	ГДЕ
	|		НЕ Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПересортицаТоваров)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Документ.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПорчаТоваров КАК Документ
	|	ГДЕ
	|		НЕ Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПорчаТоваров)
	|	) КАК Регистраторы
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьНовыеДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляИзменения(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.РеестрДокументов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументАвансовыйОтчет.Ссылка КАК Ссылка,
		|	ДокументАвансовыйОтчет.СуммаИзрасходовано КАК СуммаИзрасходовано,
		|	ДокументАвансовыйОтчет.Мультивалютный КАК Мультивалютный
		|ПОМЕСТИТЬ ДанныеАвансовогоОтчета
		|ИЗ
		|	Документ.АвансовыйОтчет КАК ДокументАвансовыйОтчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеАвансовогоОтчета.Ссылка КАК Ссылка,
		|	СУММА(ПриобретениеТоваровУслуг.СуммаДокумента) КАК Сумма
		|ПОМЕСТИТЬ ПриобретениеТоваровУслугРасходовано
		|ИЗ
		|	ДанныеАвансовогоОтчета КАК ДанныеАвансовогоОтчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
		|		ПО ДанныеАвансовогоОтчета.Ссылка = ПриобретениеТоваровУслуг.АвансовыйОтчет
		|			И (ПриобретениеТоваровУслуг.Проведен)
		|			И (НЕ ДанныеАвансовогоОтчета.Мультивалютный)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеАвансовогоОтчета.Ссылка
		|;
		|
		//++ Локализация


		//-- Локализация
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеАвансовогоОтчета.Ссылка КАК Ссылка,
		|	ДанныеАвансовогоОтчета.СуммаИзрасходовано 
		//++ Локализация


		//-- Локализация
		|	+ ЕСТЬNULL(ПриобретениеТоваровУслугРасходовано.Сумма, 0) КАК Сумма
		|ПОМЕСТИТЬ ИтогоИзрасходованоПоДокументу
		|ИЗ
		|	ДанныеАвансовогоОтчета КАК ДанныеАвансовогоОтчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПриобретениеТоваровУслугРасходовано КАК ПриобретениеТоваровУслугРасходовано
		|		ПО ДанныеАвансовогоОтчета.Ссылка = ПриобретениеТоваровУслугРасходовано.Ссылка
		//++ Локализация


		//-- Локализация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеестрДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИтогоИзрасходованоПоДокументу КАК ИтогоИзрасходованоПоДокументу
		|		ПО РеестрДокументов.Ссылка = ИтогоИзрасходованоПоДокументу.Ссылка
		|ГДЕ
		|	РеестрДокументов.Сумма <> ИтогоИзрасходованоПоДокументу.Сумма";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапроса, ДополнительныеПараметры);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
