#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура по переданной ссылке на заказ расчитывает и записывает в регистр сведений состояние заказа.
//
//	Параметры:
//		Заказы - ДокументСсылка - документ, в рамках проведения которого перерасчитывается состояние
//		Отказ - Булево - признак прерывания обработки проведения
//		УдалениеПроведения - Булево - признак обработки удаления проведения.
//
Процедура ОтразитьСостояниеЗаказа(Заказы, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Если ТипЗнч(Заказы) = Тип("Массив") Тогда
		ЗаказыПоТипам = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(Заказы);
		Для Каждого Элемент Из ЗаказыПоТипам Цикл	
			ТипЗаказа = Элемент.Ключ;
			ЗаказыПоТипу = Элемент.Значение;
			
			Если ТипЗаказа = "Документ.ЗаказКлиента"
				Или ТипЗаказа = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСсылок, ЗаказыПоТипу);
					
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Заказы) = Тип("ДокументСсылка.ЗаказКлиента")
		Или ТипЗнч(Заказы) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")Тогда
		
		МассивСсылок.Добавить(Заказы);
		
	КонецЕсли;
	
	Если МассивСсылок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если УдалениеПроведения Тогда
		
		Для Каждого СтрокаСсылка Из МассивСсылок Цикл
			Набор = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьНаборЗаписей();
			Набор.Отбор.Заказ.Установить(СтрокаСсылка);
			Набор.Записать(Истина);
		КонецЦикла;
		
		Возврат
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Заказ, Состояние, ДатаСобытия, 
		|СуммаОплаты, ПроцентОплаты, СуммаОтгрузки, ПроцентОтгрузки, СуммаДолга, ПроцентДолга, ЕстьРасхожденияОрдерНакладная");
	
	ТаблицаСостоянийЗаказов = ТаблицаСостоянийЗаказов(МассивСсылок);
	ТаблицаПредыдущихСостоянийЗаказов = ТаблицаПредыдущихСостоянийЗаказов(МассивСсылок);
	
	Для Каждого СтрокаТаблицы Из ТаблицаСостоянийЗаказов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		МассивДействующихСостояний = ТаблицаПредыдущихСостоянийЗаказов.НайтиСтроки(СтруктураПоиска);
		
		СостояниеИзменено = НЕ Булево(МассивДействующихСостояний.Количество());
		Если СостояниеИзменено Тогда
			
			Набор = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьНаборЗаписей();
			Набор.Отбор.Заказ.Установить(СтрокаТаблицы.Заказ);
			
			СтрокаНабора = Набор.Добавить();
			
			ОкруглитьПроценты(СтрокаТаблицы.ПроцентОтгрузки);
			ОкруглитьПроценты(СтрокаТаблицы.ПроцентОплаты);
			ОкруглитьПроценты(СтрокаТаблицы.ПроцентДолга);
			
			ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаТаблицы);
			
			Попытка
				Набор.Записать(Истина);
			Исключение
				Если ТипЗнч(СтрокаТаблицы.Заказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось отразить состояние заказа клиента: %Ссылка% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", СтрокаТаблицы.Заказ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Документы.ЗаказКлиента, СтрокаТаблицы.Заказ, ТекстСообщения);
				ИначеЕсли ТипЗнч(СтрокаТаблицы.Заказ) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось отразить состояние заявки на возврат: %Ссылка% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", СтрокаТаблицы.Заказ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента, СтрокаТаблицы.Заказ, ТекстСообщения);
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает таблицы состояний заказов клиентов и давальцев
//
//	Параметры:
//		МассивСсылок - Массив - массив заказов, таблицы состояний которых требуется получить
// Возвращаемое значение:
//	Структура - структура состояний содержащая значения:
//		ТаблицаСостоянийЗаказов
//		ТаблицаПредыдущихСостоянийЗаказов
//
Функция ТаблицыСостоянийЗаказов(МассивСсылок) Экспорт
	
	ТаблицаСостоянийЗаказов = ТаблицаСостоянийЗаказов(МассивСсылок);
	ТаблицаПредыдущихСостоянийЗаказов = ТаблицаПредыдущихСостоянийЗаказов(МассивСсылок);
	
	Возврат Новый Структура("ТаблицаСостоянийЗаказов, ТаблицаПредыдущихСостоянийЗаказов",
		ТаблицаСостоянийЗаказов, ТаблицаПредыдущихСостоянийЗаказов);
	
КонецФункции

// Отражает изменения состояний заказов в регистре.
//
// Параметры:
//  ДокументИсточник - ДокументОбъект - записываемый документ.
//  МассивЗаказов - Массив из ДокументСсылка - массив отражаемых заказов.
//
Процедура ОтразитьСостоянияЗаказов(ДокументИсточник, МассивЗаказов) Экспорт
	
	МассивЗаказов.Добавить(ДокументИсточник.Ссылка);
	ОтразитьСостояниеЗаказа(МассивЗаказов, Ложь, Ложь);
	
КонецПроцедуры

// Дополняет текст запроса механизма расчета состояний.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция СоответствиеЗапросовКонтрольнымРегистрам(Запрос) Экспорт

	СоответствиеЗаданий = Новый Соответствие();
	СоответствиеЗаданий.Вставить("ДвиженияЗаказыКлиентовИзменение", ТекстЗапросаЗаказыКлиентов(Запрос));
	СоответствиеЗаданий.Вставить("РасчетыСКлиентамиИзменения", ТекстЗапросаРасчетыСКлиентами(Запрос));
	СоответствиеЗаданий.Вставить("ДвиженияТоварыКОтгрузкеИзменение", ТекстЗапросаТоварыКОтгрузке(Запрос));
	СоответствиеЗаданий.Вставить("ТоварыКПоступлениюИзменение", ТекстЗапросаТоварыКПоступлению(Запрос));
	Если Не РаспределениеЗапасов.ДосчитыватьРегистрРегламентнымЗаданием() Тогда
		Если Не РаспределениеЗапасов.ЭтоПроизводительныйРежим() Тогда
			СоответствиеЗаданий.Вставить("ДвиженияРаспределениеЗапасовДвиженияИзменение",
				ТекстЗапросаДвиженияРаспределениеЗапасовДвиженияИзменение(Запрос));
		КонецЕсли;
		СоответствиеЗаданий.Вставить("СостоянияЗаказовКлиентовИзменение",
			ТекстЗапросаСостоянияЗаказовКлиентовИзменение(Запрос));
	КонецЕсли;
	Возврат СоответствиеЗаданий;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрыАктуализацииСостоянийЗаказов() Экспорт
	
	Результат = Новый Структура("ПравилоОтбораЗаписей,ФункцияСравненияЗаписей,ФункцияСравненияЗаписейВоВременнуюТаблицу");
	
	Результат.ПравилоОтбораЗаписей =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаспределениеЗапасов.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку
		|ПОМЕСТИТЬ ТаблицаПереопределяемый
		|ИЗ
		|	ФильтрПереопределяемый КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|		ПО РаспределениеЗапасов.Номенклатура  = Товары.Номенклатура
		|		И РаспределениеЗапасов.Характеристика = Товары.Характеристика
		|		И РаспределениеЗапасов.Склад          = Товары.Склад
		|		И РаспределениеЗапасов.Назначение     = Товары.Назначение
		|		И РаспределениеЗапасов.Состояние В(
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате))
		|			
		|ГДЕ
		|	НЕ РаспределениеЗапасов.Номенклатура ЕСТЬ NULL
		|		И ТИПЗНАЧЕНИЯ(РаспределениеЗапасов.ЗаказНаОтгрузку) В(
		|			ТИП(Документ.ЗаказКлиента),
		|			ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаОтгрузку";
		
	Результат.ФункцияСравненияЗаписейВоВременнуюТаблицу =
		"ВЫБРАТЬ
		|	ПередЗаписью.ЗаказНаОтгрузку КАК Заказ
		|ПОМЕСТИТЬ ИзменениеПереопределяемый
		|ИЗ
		|	ПередЗаписьюПереопределяемый КАК ПередЗаписью
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПриЗаписиПереопределяемый КАК ПриЗаписи
		|		ПО ПриЗаписи.ЗаказНаОтгрузку = ПередЗаписью.ЗаказНаОтгрузку
		|ГДЕ
		|		ПриЗаписи.ЗаказНаОтгрузку ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПриЗаписи.ЗаказНаОтгрузку КАК Заказ
		|ИЗ
		|	ПриЗаписиПереопределяемый КАК ПриЗаписи
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПередЗаписьюПереопределяемый КАК ПередЗаписью
		|		ПО ПередЗаписью.ЗаказНаОтгрузку = ПриЗаписи.ЗаказНаОтгрузку
		|ГДЕ
		|	ПередЗаписью.ЗаказНаОтгрузку ЕСТЬ NULL";
	
	Результат.ФункцияСравненияЗаписей = СтрЗаменить(Результат.ФункцияСравненияЗаписейВоВременнуюТаблицу,
		"ПОМЕСТИТЬ ИзменениеПереопределяемый", "");

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Округляет проценты отгрузки, оплаты, долга
//
// Параметры:
//	ОкругляемоеЧисло - Число - округляемое число.
//
Процедура ОкруглитьПроценты(ОкругляемоеЧисло)
	
	Если ОкругляемоеЧисло > 99
		И ОкругляемоеЧисло < 100 Тогда
		
		ОкругляемоеЧисло = 99;
		
	КонецЕсли;
	
	Если ОкругляемоеЧисло > 0
		И ОкругляемоеЧисло < 1 Тогда
		
		ОкругляемоеЧисло = 1;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает таблицу значений с состояниями документов.
//
//	Параметры:
//		МассивСсылок - Массив - (состоящий из ДокументСсылка) ссылки на документы, по которым
//					нужно рассчитать состояние. В модуле менеджера документов должна быть определена функция
//					ТекстЗапросаДляРасчетаДатыАктуальностиСостоянийЗаказов(), которая возвращает текст запроса по датам актуальности и
//					ТекстЗапросаДляРасчетаСостоянийЗаказов(), которая возвращает текст запроса по состояниям заказов.
//	Возвращаемое значение:
//		ТаблицаЗначений:
//			Заказ - ДокументСсылка
//			Состояние - ПеречислениеСсылка.СостоянияЗаказовКлиентов, ПеречислениеСсылка.СостоянияЗаявокНаВозвратТоваровОтКлиента
//			ДатаСобытия - Дата
//			СуммаОплаты - Число
//			ПроцентОплаты - Число
//			СуммаОтгрузки - Число
//			ПроцентОтгрузки - Число
//			СуммаДолга - Число
//			ПроцентДолга - Число
//			ЕстьРасхожденияОрдерНакладная - Булево
//
Функция ТаблицаСостоянийЗаказов(МассивСсылок)
	
	СоотвествиеТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивСсылок);
	
	ПервыйЗапрос = Истина;
	ТекстЗапросаВременныхТаблиц = ТекстЗапросаДляРасчетаДатСобытийСостоянийЗаказов()
		+ ТекстЗапросаДляРасчетаСостоянийОбеспеченияЗаказа()
		+ ТекстЗапросаРезервПревышаетОстатки()
		+ ТекстЗапросаЧастичноВНаличии()
		+ ТекстЗапросаДляРасчетаРасхожденийОрдерНакладная()
		+ ТекстЗапросаДопустимыхОтклонения(СоотвествиеТипов)
		+ ТекстЗапросаРасчетов()
		;
	
	ТекстЗапроса = "";
	
	Для Каждого ТипДокумента Из СоотвествиеТипов Цикл
		
		Если Не ПервыйЗапрос Тогда 
			ТекстЗапроса = ТекстЗапроса + 
			" ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;
		Если ТипДокумента.Ключ = "Документ.ЗаказКлиента"
			Или ТипДокумента.Ключ = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			
			МенеджерОбъекта             = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипДокумента.Ключ);
			ТекстЗапроса                = ТекстЗапроса + МенеджерОбъекта.ТекстЗапросаДляРасчетаСостоянийЗаказов();
			
			ПервыйЗапрос = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаВременныхТаблиц + ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивЗаказов", МассивСсылок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("МенеджерСоздаетОрдера", Константы.РежимФормированияРасходныхОрдеров.Получить() = Перечисления.РежимыФормированияРасходныхОрдеров.Менеджером);
	Запрос.УстановитьПараметр("КонтролироватьЗакрытиеЗаказа", 
			ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты")
				ИЛИ ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки"));
				
	
	Запрос.УстановитьПараметр("МерныеТипыВеличин", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить());
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыКлиентов",
																"ЗаказКлиента В (&МассивЗаказов)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодЗаказыКлиентов", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодЗаказыКлиентов", ГраницыОборотов.МаксимальнаяДата);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ТоварыКОтгрузке",
																"ДокументОтгрузки В (&МассивЗаказов)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодТоварыКОтгрузке", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодТоварыКОтгрузке", ГраницыОборотов.МаксимальнаяДата);

	ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСостояний;
	
КонецФункции

// Функция возвращает текст запроса для расчета даты актуальности состояний заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаДатСобытийСостоянийЗаказов()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ОбъектыРасчетов
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Объект В (&МассивЗаказов)
		|;
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(РасчетыСКлиентами.Период, ДЕНЬ) КАК Период,
		|	СУММА(РасчетыСКлиентами.КОплате) КАК КОплатеПриход,
		|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ЭтапыРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.ОбъектРасчетов В (
		|		ВЫБРАТЬ ОбъектРасчетов ИЗ ОбъектыРасчетов)
		|	И РасчетыСКлиентами.Активность
		|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
		|	И РасчетыСКлиентами.КОплате <> 0
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентами.ОбъектРасчетов,
		|	НАЧАЛОПЕРИОДА(РасчетыСКлиентами.Период, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
		|	СУММА(РасчетыСКлиентами.КОплате) КАК КОплатеРасход
		|ПОМЕСТИТЬ ОплаченоПоЗаказам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.ОбъектРасчетов В (
		|		ВЫБРАТЬ ОбъектРасчетов ИЗ ОбъектыРасчетов)
		|	И РасчетыСКлиентами.Активность
		|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентами.ОбъектРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыРасчетов.Период КАК Период,
		|	ЭтапыРасчетов.ОбъектРасчетов КАК ОбъектРасчетов
		|ПОМЕСТИТЬ РезультатРасчетов
		|ИЗ
		|	ЭтапыРасчетов КАК ЭтапыРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыРасчетов КАК РасчетыСКлиентами
		|		ПО (РасчетыСКлиентами.Период <= ЭтапыРасчетов.Период)
		|			И (РасчетыСКлиентами.ОбъектРасчетов = ЭтапыРасчетов.ОбъектРасчетов)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОплаченоПоЗаказам КАК Оплачено
		|		ПО ЭтапыРасчетов.ОбъектРасчетов = Оплачено.ОбъектРасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыРасчетов.Период,
		|	ЭтапыРасчетов.ОбъектРасчетов,
		|	Оплачено.КОплатеРасход
		|
		|ИМЕЮЩИЕ
		|	СУММА(РасчетыСКлиентами.КОплатеПриход) - ЕСТЬNULL(Оплачено.КОплатеРасход, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(РезультатРасчетов.Период) КАК ДатаАктуальности,
		|	РезультатРасчетов.ОбъектРасчетов КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДатыАктуальностиЗаказовКлиентов
		|ИЗ
		|	РезультатРасчетов КАК РезультатРасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатРасчетов.ОбъектРасчетов";
		
	Тексты = Новый Массив();
	Тексты.Добавить(ТекстЗапроса);
	
	Если РаспределениеЗапасов.ЭтоПроизводительныйРежим() Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	МИНИМУМ(ЗапасыИПотребности.ДатаСобытия) КАК МинимальнаяДатаОтгрузки,
			|	ЗапасыИПотребности.Заказ КАК ЗаказКлиента
			|ПОМЕСТИТЬ ДатыОтгрузкиЗаказовКлиентов
			|ИЗ
			|	РегистрНакопления.ЗапасыИПотребности.Остатки(, Заказ В(&МассивЗаказов)) КАК ЗапасыИПотребности
			|ГДЕ
			|	ЗапасыИПотребности.РезервироватьНаСкладеОстаток > 0
			|		ИЛИ ЗапасыИПотребности.РезервироватьПоМереПоступленияОстаток > 0
			|		ИЛИ ЗапасыИПотребности.ОтложитьРезервированиеОстаток > 0
			|		ИЛИ ЗапасыИПотребности.КОбеспечениюОстаток > 0
			|		ИЛИ ЗапасыИПотребности.НеОбеспечиватьОстаток > 0
			|СГРУППИРОВАТЬ ПО
			|	ЗапасыИПотребности.Заказ";
		
	Иначе
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	МИНИМУМ(РаспределениеЗапасов.ЖелаемаяДатаОтгрузки) КАК МинимальнаяДатаОтгрузки,
			|	РаспределениеЗапасов.ЗаказНаОтгрузку КАК ЗаказКлиента
			|ПОМЕСТИТЬ ДатыОтгрузкиЗаказовКлиентов
			|ИЗ
			|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
			|ГДЕ
			|	РаспределениеЗапасов.ЗаказНаОтгрузку В(&МассивЗаказов)
			|	И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
			|СГРУППИРОВАТЬ ПО
			|	РаспределениеЗапасов.ЗаказНаОтгрузку";
			
	КонецЕсли;
	
	Тексты.Добавить(ТекстЗапроса);
	
	Тексты.Добавить(
		"УНИЧТОЖИТЬ ЭтапыРасчетов;
		|УНИЧТОЖИТЬ РезультатРасчетов;
		|");
	
	ТекстЗапроса = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает текст запроса для расчета состояний обеспечения заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаСостоянийОбеспеченияЗаказа()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ВЫБОР КОГДА Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|						И Таблица.Номенклатура.ТипНоменклатуры В(
		|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьКОбеспечению,
		|	
		|	МИНИМУМ(ВЫБОР КОГДА Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ) КАК ВсеОтгрузить
		|ПОМЕСТИТЬ ВТОбеспечениеЗаказа
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|		И НЕ Таблица.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ВЫБОР КОГДА Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|						И Таблица.Номенклатура.ТипНоменклатуры В(
		|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьКОбеспечению,
		|	
		|	МИНИМУМ(ВЫБОР КОГДА Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ) КАК ВсеОтгрузить
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|		И НЕ Таблица.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка
		|;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции


// Функция возвращает текст запроса для расчета расхождений ордер-накладная.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаРасхожденийОрдерНакладная()
	
	ТекстЗапроса = ТекстЗапросаДляРасчетаЕстьОрдер() + "
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ЗаказКлиента,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ТоварыКОтгрузке.КОформлениюПриход > 0 
		|			И ТоварыКОтгрузке.КОформлениюРасход <> (ТоварыКОтгрузке.СобраноПриход + ТоварыКОтгрузке.КОтгрузкеРасход) ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ) КАК ЕстьРасхожденияОрдерНакладная,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА &МенеджерСоздаетОрдера
		|			И (ТоварыКОтгрузке.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И ТоварыКОтгрузке.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)))
		|			И ВТЕстьОрдер.ЕстьОрдер ЕСТЬ NULL ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ) КАК ТребуетсяОрдер
		|ПОМЕСТИТЬ ВТРасхожденияОрдерНакладная
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(,,,,ДокументОтгрузки В (&МассивЗаказов)) КАК ТоварыКОтгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЕстьОрдер КАК ВТЕстьОрдер
		|			ПО ТоварыКОтгрузке.ДокументОтгрузки = ВТЕстьОрдер.ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
		|			ПО ТоварыКОтгрузке.ДокументОтгрузки = РеквизитыРаспоряжения.Ссылка
		|				И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.ДокументОтгрузки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказКлиента
		|;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Функция возвращает текст запроса для поиска расходных ордеров.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаЕстьОрдер()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ЗаказКлиента,
		|	ИСТИНА КАК ЕстьОрдер
		|ПОМЕСТИТЬ ВТЕстьОрдер
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(, , Регистратор, , ДокументОтгрузки В (&МассивЗаказов)) КАК ТоварыКОтгрузке
		|ГДЕ
		|	ТоварыКОтгрузке.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.ДокументОтгрузки
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказКлиента
		|;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Функция возвращает таблицу значений с состояниями документов.
//
//	Параметры:
//		МассивСсылок - Массив - (состоящий из ДокументСсылка) ссылки на документы, по которым
//					нужно рассчитать состояние. В модуле менеджера документов должна быть определена функция
//					ТекстЗапросаДляРасчетаДатыАктуальностиСостоянийЗаказов(), которая возвращает текст запроса по датам актуальности и
//					ТекстЗапросаДляРасчетаСостоянийЗаказов(), которая возвращает текст запроса по состояниям заказов.
//	Возвращаемое значение:
//		ТаблицаЗначений:
//			Заказ - ДокументСсылка
//			Состояние - ПеречислениеСсылка.СостоянияЗаказовКлиентов, ПеречислениеСсылка.СостоянияЗаявокНаВозвратТоваровОтКлиента
//			ДатаСобытия - Дата
//			СуммаОплаты - Число
//			ПроцентОплаты - Число
//			СуммаОтгрузки - Число
//			ПроцентОтгрузки - Число
//			СуммаДолга - Число
//			ПроцентДолга - Число
//			ЕстьРасхожденияОрдерНакладная - Булево
//
Функция ТаблицаПредыдущихСостоянийЗаказов(МассивСсылок)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СостоянияЗаказовКлиентов.Заказ КАК Заказ,
	|	СостоянияЗаказовКлиентов.Состояние КАК Состояние,
	|	СостоянияЗаказовКлиентов.ДатаСобытия КАК ДатаСобытия,
	|	СостоянияЗаказовКлиентов.СуммаОплаты КАК СуммаОплаты,
	|	СостоянияЗаказовКлиентов.ПроцентОплаты КАК ПроцентОплаты,
	|	СостоянияЗаказовКлиентов.СуммаОтгрузки КАК СуммаОтгрузки,
	|	СостоянияЗаказовКлиентов.ПроцентОтгрузки КАК ПроцентОтгрузки,
	|	СостоянияЗаказовКлиентов.СуммаДолга КАК СуммаДолга,
	|	СостоянияЗаказовКлиентов.ПроцентДолга КАК ПроцентДолга,
	|	СостоянияЗаказовКлиентов.ЕстьРасхожденияОрдерНакладная КАК ЕстьРасхожденияОрдерНакладная
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|ГДЕ
	|	СостоянияЗаказовКлиентов.Заказ В(&МассивСсылок)");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТекстЗапросаЧастичноВНаличии()
	
	ТекстЗапроса =
		"
		|ВЫБРАТЬ
		|	Заказы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТЧастичноВНаличии
		|ИЗ
		|	ВТОбеспечениеЗаказа КАК Заказы
		|ГДЕ
		|	ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			РегистрСведений.РаспределениеЗапасов КАК Сведения
		|		ГДЕ Сведения.ЗаказНаОтгрузку = Заказы.Ссылка
		|				И Сведения.Состояние В(
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате),
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)))
		|;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаРезервПревышаетОстатки()
	
	ТекстЗапроса =
		"
		|ВЫБРАТЬ
		|	Заказы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВтРезервПревышаетОстатки
		|ИЗ
		|	ВТОбеспечениеЗаказа КАК Заказы
		|ГДЕ
		|	ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			РегистрСведений.РаспределениеЗапасов КАК Записи
		|		ГДЕ
		|			Записи.ЗаказНаОтгрузку = Заказы.Ссылка
		|				И Записи.Состояние В(
		|						ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве),
		|						ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе))
		|					И Записи.РезервПревышаетОстатки)
		|;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Функция возвращает текст запроса для расчета допустимых отклонения мерных товаров.
Функция ТекстЗапросаДопустимыхОтклонения(СоотвествиеТипов)
	
	Если НЕ СоотвествиеТипов["Документ.ЗаказКлиента"] = Неопределено
		ИЛИ НЕ СоотвествиеТипов["Документ.ЗаявкаНаВозвратТоваровОтКлиента"] = Неопределено
		Тогда
		
		Возврат "
		|ВЫБРАТЬ
		|	ЗаказыОстатки.ЗаказКлиента                           КАК ЗаказКлиента,
		|	СУММА(ЗаказыОстатки.КОформлениюКонечныйОстаток)      КАК КОформлениюКонечныйОстаток,
		|	СУММА(ЗаказыОстатки.ЗаказаноКонечныйОстаток)         КАК ЗаказаноКонечныйОстаток,
		|	СУММА(ЗаказыОстатки.СуммаКонечныйОстаток)            КАК СуммаКонечныйОстаток,
		|	СУММА(ЗаказыОстатки.СуммаРасходСУчетомМерныхТоваров) КАК СуммаРасходСУчетомМерныхТоваров,
		|	СУММА(ЗаказыОстатки.СуммаРасход)                     КАК СуммаРасход
		|	
		|ПОМЕСТИТЬ ВТЗаказыКлиентовОстатки
		|
		|ИЗ (ВЫБРАТЬ
		|		ЗаказыКлиентовОстатки.ЗаказКлиента   КАК ЗаказКлиента,
		|		ЗаказыКлиентовОстатки.Номенклатура   КАК Номенклатура,
		|		ЗаказыКлиентовОстатки.Характеристика КАК Характеристика,
		|		ЗаказыКлиентовОстатки.Склад          КАК Склад,
		|		ЗаказыКлиентовОстатки.Серия          КАК Серия,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток <= ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток >= -(ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0)
		|		КОНЕЦ                                                   КАК КОформлениюКонечныйОстаток,
		|	
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток <= ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток >= -(ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток, 0)
		|		КОНЕЦ                                                   КАК ЗаказаноКонечныйОстаток,
		|		
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаКонечныйОстаток, 0) КАК СуммаКонечныйОстаток,
		|		
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЗаказыКлиентовОстатки.СуммаКонечныйОстаток <= 
		|								ЗаказыКлиентовОстатки.СуммаПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ЗаказыКлиентовОстатки.СуммаКонечныйОстаток >= 
		|								-ЗаказыКлиентовОстатки.СуммаПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							ТОГДА ЗаказыКлиентовОстатки.СуммаПриход
		|						ИНАЧЕ ЗаказыКлиентовОстатки.СуммаРасход
		|					КОНЕЦ
		|			ИНАЧЕ ЗаказыКлиентовОстатки.СуммаРасход
		|		КОНЕЦ                                                    КАК СуммаРасходСУчетомМерныхТоваров,
		|		
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаРасход, 0) КАК СуммаРасход
		|		
		|	ИЗ РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(&НачПериодЗаказыКлиентов, &КонПериодЗаказыКлиентов,
		|		,,ЗаказКлиента В (&МассивЗаказов)) КАК ЗаказыКлиентовОстатки) КАК ЗаказыОстатки
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыОстатки.ЗаказКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОстатки.ЗаказКлиента КАК ЗаказКлиента,
		|	СУММА(ТоварыОстатки.КОтгрузкеОстаток) КАК КОтгрузкеОстаток
		|
		|ПОМЕСТИТЬ ВТТоварыКОтгрузкеОстатки
		|
		|ИЗ (ВЫБРАТЬ
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ЗаказКлиента,
		|		ТоварыКОтгрузкеОстатки.Номенклатура     КАК Номенклатура,
		|		ТоварыКОтгрузкеОстатки.Характеристика   КАК Характеристика,
		|		ТоварыКОтгрузкеОстатки.Склад            КАК Склад,
		|		ТоварыКОтгрузкеОстатки.Серия            КАК Серия,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток <= ТоварыКОтгрузкеОстатки.КОтгрузкеПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток >= -(ТоварыКОтгрузкеОстатки.КОтгрузкеПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток, 0)
		|		КОНЕЦ                                   КАК КОтгрузкеОстаток
		|
		|ИЗ РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(&НачПериодТоварыКОтгрузке, &КонПериодТоварыКОтгрузке,
		|	,, ДокументОтгрузки В (&МассивЗаказов)) КАК ТоварыКОтгрузкеОстатки) КАК ТоварыОстатки
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОстатки.ЗаказКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
	
КонецФункции

Функция ТекстЗапросаРасчетов()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|		СУММА(ВЫБОР
	|			КОГДА РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				И НЕ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|				И НЕ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.АктВыполненныхРабот
	|				ТОГДА ВЫБОР
	|					КОГДА РасчетыСКлиентами.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|						ТОГДА -РасчетыСКлиентами.Сумма
	|					ИНАЧЕ РасчетыСКлиентами.Сумма
	|				КОНЕЦ
	|			КОГДА РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
	|				И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|					ТОГДА 0
	|					ИНАЧЕ РасчетыСКлиентами.Сумма
	|				КОНЕЦ
	|		КОНЕЦ) КАК ОплатаФакт
	|ПОМЕСТИТЬ ВтДанныеПоРасчетамСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.ОбъектРасчетов.Объект В (&МассивЗаказов)
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.ОбъектРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
КонецФункции

#Область СлужебныеМетодыФормированияСостояний

#Область ТекстыЗапросовПоКонтрольнымРегистрам

Функция ТекстЗапросаЗаказыКлиентов(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ЗаказКлиента КАК ОтражаемыйДокумент
	|ИЗ
	|	ДвиженияЗаказыКлиентовИзменение КАК Таблица
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаРасчетыСКлиентами(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбъектыРасчетов.Объект КАК ОтражаемыйДокумент
	|ИЗ
	|	РасчетыСКлиентамиИзменения КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.Ссылка = Таблица.ОбъектРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Заказ)
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаТоварыКОтгрузке(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ДокументОтгрузки КАК ОтражаемыйДокумент
	|ИЗ
	|	ДвиженияТоварыКОтгрузкеИзменение КАК Таблица
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Таблица.ДокументОтгрузки) В (ТИП(Документ.ЗаказКлиента),
	|	ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаТоварыКПоступлению(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ДокументПоступления КАК ОтражаемыйДокумент
	|ИЗ
	|	ТоварыКПоступлениюИзменение КАК Таблица
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Таблица.ДокументПоступления) В (ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаДвиженияРаспределениеЗапасовДвиженияИзменение(Запрос)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеДвижения.ЗаказНаОтгрузку КАК ОтражаемыйДокумент
	|ИЗ
	|	ДвиженияРаспределениеЗапасовДвиженияИзменение КАК ВсеДвижения
	|ГДЕ
	|	ВсеДвижения.ЗаказНаОтгрузку <> НЕОПРЕДЕЛЕНО
	|		И ТИПЗНАЧЕНИЯ(ВсеДвижения.ЗаказНаОтгрузку) В(
	|			ТИП(Документ.ЗаказКлиента),
	|			ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаСостоянияЗаказовКлиентовИзменение(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Заказ КАК ОтражаемыйДокумент
	|ИЗ
	|	СостоянияЗаказовКлиентовИзменение КАК Таблица
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СостоянияЗаказовКлиентов.ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаказКакСчет";
	Обработчик.Версия = "11.5.12.25";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8e956561-71f4-4715-b7ea-d10b85ff7462");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияЗаказовКлиентов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюЗаказКакСчет";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Очищает состояния заказов, созданных в режиме ""Заказ как счет"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЗаказКлиента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.СостоянияЗаказовКлиентов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СостоянияЗаказовКлиентов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.СостоянияЗаказовКлиентов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюЗаказКакСчет(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.СостоянияЗаказовКлиентов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.СостоянияЗаказовКлиентов");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"
		|ВЫБРАТЬ
		|	СостоянияЗаказовКлиентов.Заказ КАК Заказ
		|ИЗ
		|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СостоянияЗаказовКлиентов.Заказ) В (
		|			ТИП(Документ.ЗаказКлиента),
		|			ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
		|	И СостоянияЗаказовКлиентов.Заказ.ЭтоЗаказКакСчет
		|";
		
	РегистрируемыеЗаказы = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РегистрируемыеЗаказы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаказКакСчет(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.СостоянияЗаказовКлиентов";
	Если Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта) Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;

	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	НаборЗаписей = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьНаборЗаписей();
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			// Блокировка документа.
			ТипЗаказа = Выборка.Заказ.Метаданные().ПолноеИмя();
			ЭлементБлокировки = Блокировка.Добавить(ТипЗаказа);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Заказ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			// Блокировка регистра состояний.
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Заказ", Выборка.Заказ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.Заказ.Установить(Выборка.Заказ, Истина);
			
			// очистим данные регистра для заказов как счет
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Заказ);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли
