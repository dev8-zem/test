#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.АктивацияПодарочныхСертификатов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.11.27";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9d3e1bdf-ece3-4f48-b8e4-4b6f03308af4");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.АктивацияПодарочныхСертификатов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр сведений ""Активация подарочных сертификатов"" на основании записей регистра сведений ""История подарочных сертификатов"", в которых ресурс ""Статус"" в значении ""Активирован""'");

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ПодарочныеСертификаты.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыПодарочныхСертификатов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ИсторияПодарочныхСертификатов.ПолноеИмя());	

	Читаемые.Добавить(Метаданные.Документы.ВводОстатков.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковОПродажахЗаПрошлыеПериоды.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаРегистров.ПолноеИмя());
	
	Читаемые.Добавить(Метаданные.Документы.РеализацияПодарочныхСертификатов.ПолноеИмя());

	Читаемые.Добавить(Метаданные.РегистрыСведений.ИсторияПодарочныхСертификатов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.АктивацияПодарочныхСертификатов.ПолноеИмя());	
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.АктивацияПодарочныхСертификатов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.РеализацияПодарочныхСертификатов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.АктивацияПодарочныхСертификатов.ПолноеИмя());	
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.АктивацияПодарочныхСертификатов;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.АктивацияПодарочныхСертификатов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");	
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИсторияПодарочныхСертификатов.Регистратор КАК Регистратор
	               |ИЗ
	               |	РегистрСведений.ИсторияПодарочныхСертификатов КАК ИсторияПодарочныхСертификатов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АктивацияПодарочныхСертификатов КАК АктивацияПодарочныхСертификатов
	               |		ПО (ИсторияПодарочныхСертификатов.ПодарочныйСертификат = АктивацияПодарочныхСертификатов.ПодарочныйСертификат)
	               |ГДЕ
	               |	ИсторияПодарочныхСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован)
				   |	И АктивацияПодарочныхСертификатов.Активность ЕСТЬ NULL";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"), ПолноеИмяОбъекта);

КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.АктивацияПодарочныхСертификатов;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	МассивПроверяемыхОбъектов = Новый Массив;
	МассивПроверяемыхОбъектов.Добавить("Документ.РеализацияПодарочныхСертификатов");
	МассивПроверяемыхОбъектов.Добавить("Документ.ВводОстатков");
	МассивПроверяемыхОбъектов.Добавить("Документ.ВводОстатковОПродажахЗаПрошлыеПериоды");
	МассивПроверяемыхОбъектов.Добавить("Документ.КорректировкаРегистров");

	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, МассивПроверяемыхОбъектов) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ДанныеДляОбновления = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ДанныеДляОбновления.Количество() Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДанных.Регистратор КАК Ссылка
	               |ПОМЕСТИТЬ ВТДляОбработки
	               |ИЗ
	               |	&ОбновляемыеДанные КАК ТаблицаДанных
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаДанных.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(ИсторияПодарочныхСертификатов.Регистратор, НЕОПРЕДЕЛЕНО) КАК Регистратор,
	               |	ЕСТЬNULL(ИсторияПодарочныхСертификатов.ПодарочныйСертификат, ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)) КАК ПодарочныйСертификат,
	               |	ЕСТЬNULL(ИсторияПодарочныхСертификатов.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаДействия,
	               |	ЕСТЬNULL(ВЫБОР
	               |			КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	               |				ТОГДА ДОБАВИТЬКДАТЕ(ИсторияПодарочныхСертификатов.Период, ДЕНЬ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	               |			КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	               |				ТОГДА ДОБАВИТЬКДАТЕ(ИсторияПодарочныхСертификатов.Период, НЕДЕЛЯ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	               |			КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	               |				ТОГДА ДОБАВИТЬКДАТЕ(ИсторияПодарочныхСертификатов.Период, МЕСЯЦ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	               |			КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	               |				ТОГДА ДОБАВИТЬКДАТЕ(ИсторияПодарочныхСертификатов.Период, КВАРТАЛ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	               |			КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	               |				ТОГДА ДОБАВИТЬКДАТЕ(ИсторияПодарочныхСертификатов.Период, ГОД, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	               |			КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	               |				ТОГДА ДОБАВИТЬКДАТЕ(ИсторияПодарочныхСертификатов.Период, ДЕКАДА, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	               |			КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	               |				ТОГДА ДОБАВИТЬКДАТЕ(ИсторияПодарочныхСертификатов.Период, ПОЛУГОДИЕ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	               |			ИНАЧЕ ИсторияПодарочныхСертификатов.Период
	               |		КОНЕЦ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияДействия,
	               |	ВЫБОР
	               |		КОГДА АктивацияПодарочныхСертификатов.Регистратор ЕСТЬ NULL
	               |			ТОГДА НЕОПРЕДЕЛЕНО
	               |		ИНАЧЕ АктивацияПодарочныхСертификатов.Регистратор
	               |	КОНЕЦ КАК ОбработанРанееДокументом
	               |ИЗ
	               |	ВТДляОбработки КАК ТаблицаДанных
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов КАК ИсторияПодарочныхСертификатов
	               |		ПО (ИсторияПодарочныхСертификатов.Регистратор = ТаблицаДанных.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов
	               |		ПО (ВидыПодарочныхСертификатов.Ссылка = ИсторияПодарочныхСертификатов.ПодарочныйСертификат.Владелец)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АктивацияПодарочныхСертификатов КАК АктивацияПодарочныхСертификатов
	               |		ПО (АктивацияПодарочныхСертификатов.ПодарочныйСертификат = ИсторияПодарочныхСертификатов.ПодарочныйСертификат)
	               |			И (АктивацияПодарочныхСертификатов.Регистратор <> ИсторияПодарочныхСертификатов.Регистратор)
	               |ГДЕ
	               |	ИсторияПодарочныхСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован)
	               |ИТОГИ ПО
	               |	Ссылка";
	
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ДанныеДляОбновления);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗначенияРеквизитовРегистраторов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДанныеДляОбновления.ВыгрузитьКолонку("Регистратор"),"Организация, Дата");
	КэшОбработанныхСертификатов	= Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(Выборка.Ссылка.Метаданные().ПолноеИмя());
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта+".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();

			НаборЗаписей = РегистрыСведений.АктивацияПодарочныхСертификатов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
			
			// Заполним набор записей нового регистра
			ВыборкаПодарочныхСертификатов = Выборка.Выбрать();
			Пока ВыборкаПодарочныхСертификатов.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаПодарочныхСертификатов.Регистратор) Тогда					
					ОбработанВЭтойПорцииДокументом = КэшОбработанныхСертификатов[ВыборкаПодарочныхСертификатов.ПодарочныйСертификат];
					Если ОбработанВЭтойПорцииДокументом = Неопределено Тогда
						КэшОбработанныхСертификатов.Вставить(ВыборкаПодарочныхСертификатов.ПодарочныйСертификат, Выборка.Ссылка);	
					КонецЕсли;
					Если ЗначениеЗаполнено(ОбработанВЭтойПорцииДокументом) 
						Или ЗначениеЗаполнено(ВыборкаПодарочныхСертификатов.ОбработанРанееДокументом) Тогда
						ОбработанДокументом = ?(ЗначениеЗаполнено(ВыборкаПодарочныхСертификатов.ОбработанРанееДокументом), ВыборкаПодарочныхСертификатов.ОбработанРанееДокументом, ОбработанВЭтойПорцииДокументом);
						ТекстСообщения = НСтр("ru = 'Некорректные данные в регистре сведений ""История подарочных сертификатов"":
						| Повторная активация документом ""%1"" подарочного сертификата ""%2"", активированного документом ""%3""'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Ссылка, ВыборкаПодарочныхСертификатов.ПодарочныйСертификат, ОбработанДокументом);
						ЗаписьЖурналаРегистрации(
							ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Предупреждение,
							Выборка.Ссылка.Метаданные(),
							Выборка.Ссылка,
							ТекстСообщения);	
					Иначе
						НоваяСтрока = НаборЗаписей.Добавить();
						НоваяСтрока.ПодарочныйСертификат = ВыборкаПодарочныхСертификатов.ПодарочныйСертификат;					
						ЗначенияРеквизитов = ЗначенияРеквизитовРегистраторов[ВыборкаПодарочныхСертификатов.Регистратор];
						Если Не ЗначенияРеквизитов = Неопределено Тогда
							НоваяСтрока.Организация = ЗначенияРеквизитов.Организация;
						КонецЕсли;
						НоваяСтрока.ДатаНачалаДействия = ВыборкаПодарочныхСертификатов.ДатаНачалаДействия;					
						НоваяСтрока.ДатаОкончанияДействия = ВыборкаПодарочныхСертификатов.ДатаОкончанияДействия;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать набор записей регистра сведений ""Активация подарочных сертификатов"" по документу ""%1"" по причине: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
			
		КонецПопытки;

	КонецЦикла;
				
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти
#КонецОбласти

#КонецЕсли
