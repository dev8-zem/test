#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получить информацию коллекции.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
// 
// Возвращаемое значение:
//  см. ШаблонЗаполненияПолейКоллекций - Получить информацию коллекции
Функция ПолучитьИнформациюКоллекции(Коллекция) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КоллекцииСервисаПрогнозированияПродаж.Коллекция,
	|	КоллекцииСервисаПрогнозированияПродаж.ИдКоллекции,
	|	КоллекцииСервисаПрогнозированияПродаж.ИзмененФормат,
	|	КоллекцииСервисаПрогнозированияПродаж.ИзмененыОтборы,
	|	КоллекцииСервисаПрогнозированияПродаж.ДатаАктуальности,
	|	КоллекцииСервисаПрогнозированияПродаж.ДатаНачалаПоследнейВыгрузки,
	|	КоллекцииСервисаПрогнозированияПродаж.ДатаПоследнейВыгрузки,
	|	КоллекцииСервисаПрогнозированияПродаж.КоличествоДанныхВыгруженное,
	|	КоллекцииСервисаПрогнозированияПродаж.КоличествоДанныхНаСервере
	|ИЗ
	|	РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК КоллекцииСервисаПрогнозированияПродаж
	|ГДЕ
	|	КоллекцииСервисаПрогнозированияПродаж.Коллекция = &Коллекция";
	Запрос.УстановитьПараметр("Коллекция", Коллекция);
	
	Ответ = ШаблонЗаполненияПолейКоллекций();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Ответ, Выборка);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получить все коллекции.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//    * Ключ - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
//    * Значение - см. ШаблонЗаполненияПолейКоллекций
Функция ПолучитьВсеКоллекции() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КоллекцииСервисаПрогнозированияПродаж.Коллекция,
	|	КоллекцииСервисаПрогнозированияПродаж.ИдКоллекции,
	|	КоллекцииСервисаПрогнозированияПродаж.ИзмененФормат,
	|	КоллекцииСервисаПрогнозированияПродаж.ИзмененыОтборы,
	|	КоллекцииСервисаПрогнозированияПродаж.ДатаАктуальности,
	|	КоллекцииСервисаПрогнозированияПродаж.ДатаНачалаПоследнейВыгрузки,
	|	КоллекцииСервисаПрогнозированияПродаж.ДатаПоследнейВыгрузки,
	|	КоллекцииСервисаПрогнозированияПродаж.КоличествоДанныхВыгруженное,
	|	КоллекцииСервисаПрогнозированияПродаж.КоличествоДанныхНаСервере
	|ИЗ
	|	РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК КоллекцииСервисаПрогнозированияПродаж";
	
	Ответ = Новый Соответствие();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаОтвета = ШаблонЗаполненияПолейКоллекций();
		ЗаполнитьЗначенияСвойств(СтрокаОтвета, Выборка);
		Ответ.Вставить(Выборка.Коллекция, СтрокаОтвета);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Очистить коллекцию.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
Процедура ОчиститьКоллекцию(Коллекция) Экспорт
	ПустыеЗначения = ШаблонЗаполненияПолейКоллекций();
	ЗаписатьИнформациюКоллекции(Коллекция, ПустыеЗначения);
КонецПроцедуры

// Количество выгруженных коллекций.
// 
// Возвращаемое значение:
//  Число - Количество выгруженных коллекций
Функция КоличествоВыгруженныхКоллекций() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(КоллекцииСервисаПрогнозированияПродаж.Коллекция) КАК КоличествоВыгруженныхКоллекций
	|ИЗ
	|	РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК КоллекцииСервисаПрогнозированияПродаж
	|ГДЕ
	|	КоллекцииСервисаПрогнозированияПродаж.ИдКоллекции <> """"";
	
	Ответ = ШаблонЗаполненияПолейКоллекций();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоВыгруженныхКоллекций;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Коллекция выгружалась.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
// 
// Возвращаемое значение:
//  Булево - Коллекция выгружалась
Функция КоллекцияВыгружалась(Коллекция) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КоллекцииСервисаПрогнозированияПродаж.Коллекция
	|ИЗ
	|	РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК КоллекцииСервисаПрогнозированияПродаж
	|ГДЕ
	|	КоллекцииСервисаПрогнозированияПродаж.Коллекция = &Коллекция
	|	И КоллекцииСервисаПрогнозированияПродаж.ИдКоллекции <> """"
	|	И КоллекцииСервисаПрогнозированияПродаж.ДатаНачалаПоследнейВыгрузки > ДАТАВРЕМЯ(1, 1, 1)";
	Запрос.УстановитьПараметр("Коллекция", Коллекция);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Записать информацию коллекции.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
//  ЗначенияПолейКоллекции - см. ШаблонЗаполненияПолейКоллекций
Процедура ЗаписатьИнформациюКоллекции(Коллекция, ЗначенияПолейКоллекции) Экспорт
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.КоллекцииСервисаПрогнозированияПродаж");
		ЭлементБлокировкиДанных.УстановитьЗначение("Коллекция", Коллекция);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
	
		НаборЗаписей = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Коллекция.Установить(Коллекция);
		НаборЗаписей.Прочитать();
		
		НаборЗаписей.Очистить();
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ЗначенияПолейКоллекции);
		Запись.Коллекция = Коллекция;
		
		НаборЗаписей.Записать();
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж,
			,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Шаблон заполнения полей коллекций.
// 
// Возвращаемое значение:
//  Структура - Шаблон заполнения полей коллекций:
// * ИдКоллекции - Строка -
// * ИзмененФормат - Булево -
// * ИзмененыОтборы - Булево -
// * ДатаАктуальности - Дата -
// * ДатаНачалаПоследнейВыгрузки - Дата -
// * ДатаПоследнейВыгрузки - Дата -
// * КоличествоДанныхВыгруженное - Число -
// * КоличествоДанныхНаСервере - Число -
Функция ШаблонЗаполненияПолейКоллекций()
	
	Ответ = Новый Структура();
	Ответ.Вставить("ИдКоллекции", "");
	Ответ.Вставить("ИзмененФормат", Ложь);
	Ответ.Вставить("ИзмененыОтборы", Ложь);
	Ответ.Вставить("ДатаАктуальности", Дата(1,1,1));
	Ответ.Вставить("ДатаНачалаПоследнейВыгрузки", Дата(1,1,1));
	Ответ.Вставить("ДатаПоследнейВыгрузки", Дата(1,1,1));
	Ответ.Вставить("КоличествоДанныхВыгруженное", 0);
	Ответ.Вставить("КоличествоДанныхНаСервере", 0);
	
	Возврат Ответ;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.10.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1df80291-ff91-852a-f100-2b121337de33");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр ""Коллекции сервиса прогнозирования продаж"" по данным константы ""Настройки сервиса прогнозирования продаж""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.НастройкиСервисаПрогнозирования.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.КоллекцииСервисаПрогнозированияПродаж";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Продажи) КАК Коллекция
	|ИЗ
	|	Перечисление.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеПеречисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеРегистра
	|		ПО ДанныеПеречисления.Ссылка = ДанныеРегистра.Коллекция
	|ГДЕ
	|	ДанныеПеречисления.Ссылка = ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Продажи)
	|	И ДанныеРегистра.Коллекция ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Товары)
	|ИЗ
	|	Перечисление.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеПеречисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеРегистра
	|		ПО ДанныеПеречисления.Ссылка = ДанныеРегистра.Коллекция
	|ГДЕ
	|	ДанныеПеречисления.Ссылка = ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Товары)
	|	И ДанныеРегистра.Коллекция ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Категории)
	|ИЗ
	|	Перечисление.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеПеречисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеРегистра
	|		ПО ДанныеПеречисления.Ссылка = ДанныеРегистра.Коллекция
	|ГДЕ
	|	ДанныеПеречисления.Ссылка = ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Категории)
	|	И ДанныеРегистра.Коллекция ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Покупатели)
	|ИЗ
	|	Перечисление.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеПеречисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеРегистра
	|		ПО ДанныеПеречисления.Ссылка = ДанныеРегистра.Коллекция
	|ГДЕ
	|	ДанныеПеречисления.Ссылка = ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Покупатели)
	|	И ДанныеРегистра.Коллекция ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Склады)
	|ИЗ
	|	Перечисление.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеПеречисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеРегистра
	|		ПО ДанныеПеречисления.Ссылка = ДанныеРегистра.Коллекция
	|ГДЕ
	|	ДанныеПеречисления.Ссылка = ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Склады)
	|	И ДанныеРегистра.Коллекция ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Остатки)
	|ИЗ
	|	Перечисление.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеПеречисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеРегистра
	|		ПО ДанныеПеречисления.Ссылка = ДанныеРегистра.Коллекция
	|ГДЕ
	|	ДанныеПеречисления.Ссылка = ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Остатки)
	|	И ДанныеРегистра.Коллекция ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Заказы)
	|ИЗ
	|	Перечисление.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеПеречисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеРегистра
	|		ПО ДанныеПеречисления.Ссылка = ДанныеРегистра.Коллекция
	|ГДЕ
	|	ДанныеПеречисления.Ссылка = ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Заказы)
	|	И ДанныеРегистра.Коллекция ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Промо)
	|ИЗ
	|	Перечисление.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеПеречисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеРегистра
	|		ПО ДанныеПеречисления.Ссылка = ДанныеРегистра.Коллекция
	|ГДЕ
	|	ДанныеПеречисления.Ссылка = ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Промо)
	|	И ДанныеРегистра.Коллекция ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.ПланыПродаж)
	|ИЗ
	|	Перечисление.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеПеречисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеРегистра
	|		ПО ДанныеПеречисления.Ссылка = ДанныеРегистра.Коллекция
	|ГДЕ
	|	ДанныеПеречисления.Ссылка = ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.ПланыПродаж)
	|	И ДанныеРегистра.Коллекция ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Сезонность)
	|ИЗ
	|	Перечисление.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеПеречисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеРегистра
	|		ПО ДанныеПеречисления.Ссылка = ДанныеРегистра.Коллекция
	|ГДЕ
	|	ДанныеПеречисления.Ссылка = ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Сезонность)
	|	И ДанныеРегистра.Коллекция ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Календарь)
	|ИЗ
	|	Перечисление.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеПеречисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеРегистра
	|		ПО ДанныеПеречисления.Ссылка = ДанныеРегистра.Коллекция
	|ГДЕ
	|	ДанныеПеречисления.Ссылка = ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.Календарь)
	|	И ДанныеРегистра.Коллекция ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры)
	|ИЗ
	|	Перечисление.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеПеречисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК ДанныеРегистра
	|		ПО ДанныеПеречисления.Ссылка = ДанныеРегистра.Коллекция
	|ГДЕ
	|	ДанныеПеречисления.Ссылка = ЗНАЧЕНИЕ(Перечисление.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры)
	|	И ДанныеРегистра.Коллекция ЕСТЬ NULL";
	
	Данные = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
	НастройкиПрогнозирования = Неопределено;
	СохраненныеНастройкиПрогнозирования = Константы.НастройкиСервисаПрогнозирования.Получить();
	Если ЗначениеЗаполнено(СохраненныеНастройкиПрогнозирования) Тогда
		НастройкиПрогнозирования = СохраненныеНастройкиПрогнозирования.Получить();
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
	
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;

			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Коллекция", Выборка.Коллекция);
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Коллекция.Установить(Выборка.Коллекция);
			НаборЗаписей.Прочитать();
			
			КоллекцияСервисаСтрокой = СоответствиеКоллекцийСервиса(Выборка.Коллекция);
			КоллекцияИсточникаСтрокой = СоответствиеКоллекцийИсточника(Выборка.Коллекция);
			
			ИдКоллекции = Неопределено;
			ИзмененияКоллекций = Неопределено;
			Если ЗначениеЗаполнено(НастройкиПрогнозирования) Тогда
				НастройкиПрогнозирования.ИдКоллекций.Свойство(КоллекцияСервисаСтрокой, ИдКоллекции);
				НастройкиПрогнозирования.ИзмененияКоллекций.Свойство(КоллекцияИсточникаСтрокой, ИзмененияКоллекций);
			КонецЕсли;
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Коллекция = Выборка.Коллекция;
			Если ИдКоллекции <> Неопределено
				Или ИзмененияКоллекций <> Неопределено Тогда
				Если ИзмененияКоллекций <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ИзмененияКоллекций);
				КонецЕсли;
				НоваяЗапись.ИдКоллекции = ИдКоллекции;
			КонецЕсли;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать данные в регистр %ИмяРегистра% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПредставлениеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяОбъекта);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта, 
				Неопределено, 
				ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Функция СоответствиеКоллекцийСервиса(Коллекция)
	
	Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи Тогда
		Возврат "sales";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
		Возврат "products";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Категории Тогда
		Возврат "product_categories";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели Тогда
		Возврат "customers";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады Тогда
		Возврат "shops";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки Тогда
		Возврат "stock";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Заказы Тогда
		Возврат "customer_orders";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
		Возврат "promo";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ПланыПродаж Тогда
		Возврат "sales_plans";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Сезонность Тогда
		Возврат "seasonality";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Календарь Тогда
		Возврат "calendar";
	Иначе
		Возврат "Нет";
	КонецЕсли;
	
КонецФункции

Функция СоответствиеКоллекцийИсточника(Коллекция)
	
	Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи Тогда
		Возврат "Продажи";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
		Возврат "Товары";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Категории Тогда
		Возврат "Категории";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели Тогда
		Возврат "Покупатели";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады Тогда
		Возврат "Склады";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки Тогда
		Возврат "Остатки";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Заказы Тогда
		Возврат "Заказы";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
		Возврат "Промо";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ПланыПродаж Тогда
		Возврат "ПланыПродаж";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Сезонность Тогда
		Возврат "Сезонность";
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Календарь Тогда
		Возврат "Календарь";
	Иначе
		Возврат "Нет";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
