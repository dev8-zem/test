#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Сверка взаиморасчетов".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
// 	Неопределено - Описание
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.СверкаВзаиморасчетов2_5_11) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.СверкаВзаиморасчетов2_5_11.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.СверкаВзаиморасчетов2_5_11);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВзаиморасчетыСервер.ВедомостьРасчетовСПартнерами_ДобавитьКомандуОтчета(КомандыОтчетов);
	ВзаиморасчетыСервер.ВедомостьРасчетовМеждуОрганизациями_ДобавитьКомандуОтчета(КомандыОтчетов);
	
КонецПроцедуры

// Заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	СтруктураПараметров - Структура - Структура параметров заполнения:
//		* РасшифровкаПоЗаказам - Булево - Признак расшифровки по заказам.
//		* РасшифровкаПоПартнерам - Булево - Признак расшифровки по партнерам.
//		* РасшифровкаПоДоговорам - Булево - Признак расшифровки по договорам.
//		* Партнер - СправочникСсылка.Партнеры - Партнер документа.
//		* Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор документа.
//	МассивВсехРеквизитов - Массив из Строка - Массив всех имен реквизитов, зависимых от хозяйственной операции.
//	МассивРеквизитовОперации - Массив из Строка - Массив имен реквизитов, используемых в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(СтруктураПараметров, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ИтоговыеЗаписи.ТипРасчетов");
	МассивВсехРеквизитов.Добавить("ИтоговыеЗаписи.Партнер");
	МассивВсехРеквизитов.Добавить("ИтоговыеЗаписи.Договор");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписи.СуммаДокументаКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиРасчетыВзаиморасчетыКонтрагент");
	
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЗаймыСуммаКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЗаймыСуммаПроцентыКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЗаймыСуммаКомиссияКонтрагент");
	
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЗаймыГруппаКомиссия");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЛизингГруппаВыкуп");
	
	МассивРеквизитовОперации = Новый Массив;
	Если СтруктураПараметров.ПоказатьТипРасчетов Тогда
		МассивРеквизитовОперации.Добавить("ИтоговыеЗаписи.ТипРасчетов");
		МассивРеквизитовОперации.Добавить("ГруппировкиФинансовыеИнструменты.ТипРасчетов");
	КонецЕсли;
	Если СтруктураПараметров.ПоказатьПартнера Тогда
		МассивРеквизитовОперации.Добавить("ИтоговыеЗаписи.Партнер");
		МассивРеквизитовОперации.Добавить("ГруппировкиФинансовыеИнструменты.Партнер");
	КонецЕсли;
	Если СтруктураПараметров.ПоказатьДоговор Тогда
		МассивРеквизитовОперации.Добавить("ИтоговыеЗаписи.Договор");
		МассивРеквизитовОперации.Добавить("ГруппировкиФинансовыеИнструменты.Договор");
	КонецЕсли;
	Если СтруктураПараметров.ЕстьРасхождения Тогда
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписи.СуммаДокументаКонтрагент");
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиРасчетыВзаиморасчетыКонтрагент");
	КонецЕсли;
	
КонецПроцедуры

// Определяет реквизиты выбранного документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СверкаВзаиморасчетов - Ссылка на документ.
//
// Возвращаемое значение:
//	Неопределено, ВыборкаИзРезультатаЗапроса - реквизиты выбранного документа.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.НачалоПериода,
	|	ДанныеДокумента.КонецПериода,
	|	СверкаВзаиморасчетовДетальныеЗаписиРасчеты.ТипРасчетов
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_5_11 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов2_5_11.ДетальныеЗаписи КАК СверкаВзаиморасчетовДетальныеЗаписиРасчеты
	|		ПО СверкаВзаиморасчетовДетальныеЗаписиРасчеты.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив из ДокументСсылка.СверкаВзаиморасчетов2_5_11- Массив ссылок на документы, которые надо проверять.
//	НовыйСтатус - Строка - Имя нового статуса.
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыСверокВзаиморасчетов2_5_11[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_5_11 КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки.
//	НовыйСтатус - ПеречислениеСсылка - Новый статус.
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Для документа "СверкаВзаиморасчетов" отсутствуют дополнительные проверки
	
КонецФункции

// Возвращает КлючОбъекта для сохранения в хранилище общих настроек пользователя
// 
// Возвращаемое значение:
// 	Строка - Описание
Функция КлючОбъектаПользовательскихНастроек() Экспорт
	
	Возврат "Документ.СверкаВзаиморасчетов2_5_11";
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
// Параметры:
//	Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Акт сверки взаимных расчетов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьАктаСверкиВзаиморасчетов";
	КомандаПечати.Идентификатор = "АктСверкиВзаимныхРасчетов";
	КомандаПечати.Представление = НСтр("ru = 'Акт сверки взаимных расчетов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// Параметры:
//   МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//   ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//   КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//   ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//   ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСверкиВзаимныхРасчетов") Тогда
		
		ДокументыНаПечать = ДокументыНаПечать(МассивОбъектов);
		
		МакетНаПечать = Новый ТабличныйДокумент;
		Если ДокументыНаПечать.Количество() > 0 Тогда
			МакетНаПечать = СформироватьПечатнуюФормуАктСверкиВзаиморасчетов(ДокументыНаПечать, ОбъектыПечати);
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"АктСверкиВзаимныхРасчетов",
			НСтр("ru='Акт сверки взаимных расчетов'"),
			МакетНаПечать);
			
		ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, ДокументыНаПечать, КоллекцияПечатныхФорм);
		
	КонецЕсли;
	
КонецПроцедуры

// Сформировать печатную форму акта сверки взаиморасчетов
//
// Параметры:
//   МассивОбъектов  - Массив из ДокументСсылка.СверкаВзаиморасчетов2_5_11 - Массив ссылок на объекты которые нужно распечатать.
//   ОбъектыПечати - СписокЗначений -
//   ДляОтладки - Булево, Структура -
//
// Возвращаемое значение:
//  ТабличныйДокумент - Сформировать печатную форму акт сверки взаиморасчетов
Функция СформироватьПечатнуюФормуАктСверкиВзаиморасчетов(МассивОбъектов, ОбъектыПечати, ДляОтладки = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	НастройкиПечати = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
							КлючОбъектаПользовательскихНастроек(),
							"НастройкиПечати");
	Если НастройкиПечати = Неопределено Тогда
		НастройкиПечати = НастройкиПечатиПоУмолчанию();
	КонецЕсли;
	Если ТипЗнч(ДляОтладки) = Тип("Структура") Тогда
		НастройкиПечати.Вставить("ДляОтладки", ДляОтладки);
	КонецЕсли;
	
	ЗапросДанныеНаПечать = ЗапросДанныеНаПечать(МассивОбъектов, НастройкиПечати);
	РезультатЗапроса = ЗапросДанныеНаПечать.Выполнить();
	ОбщиеИтогиПоВалюте = ЗапросДанныеНаПечать.МенеджерВременныхТаблиц.Таблицы["втОбщиеИтогиПоВалюте"].ПолучитьДанные().Выгрузить();
	ОбщиеИтогиПоВалюте.Свернуть("ДокументСсылка,ВалютаРегл,ВалютаСверки,ТипРасчетов,СверкаПоДоговорам",
		"НачальноеСальдоДт,НачальноеСальдоКт,ОборотДт,ОборотКт,КонечноеСальдоДт,КонечноеСальдоКт,"
		+"НачальноеСальдоДтКонтрагент,НачальноеСальдоКтКонтрагент,ОборотДтКонтрагент,ОборотКтКонтрагент,КонечноеСальдоДтКонтрагент,КонечноеСальдоКтКонтрагент,"
		+"НачальноеСальдоДолгКонтрагент,НачальноеСальдоАвансКонтрагент,КонечноеСальдоДолгКонтрагент,КонечноеСальдоАвансКонтрагент");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	ДанныеСверки = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого ДанныеДокумента Из ДанныеСверки.Строки Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СверкаВзаиморасчетов2_5_11.ПФ_MXL_АктСверкиВзаимныхРасчетов"); // ТабличныйДокумент - 
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		#Область ШапкаДокумента
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеДокумента.ДокументСсылка);
		
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеДокумента, НСтр("ru='Акт сверки взаимных расчетов'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ЕстьОстаткиОборотыЗаПериод = ДанныеДокумента.ЕстьОбороты ИЛИ ДанныеДокумента.НачальноеСальдоДт <> 0 ИЛИ ДанныеДокумента.НачальноеСальдоКт <> 0
			ИЛИ ДанныеДокумента.КонечноеСальдоДт <> 0 ИЛИ ДанныеДокумента.КонечноеСальдоКт <> 0;
		
		Если ДанныеДокумента.НачалоПериода = '00010101' Тогда
			
			ПредставлениеПериода = СтрШаблон(НСтр("ru = 'по состоянию на %1'", ОбщегоНазначения.КодОсновногоЯзыка()), Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
			ПредставлениеПериодаРасчетов = СтрШаблон(НСтр("ru = 'По состоянию на %1'", ОбщегоНазначения.КодОсновногоЯзыка()), Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
		Иначе
			
			ПредставлениеПериода = ПредставлениеПериода(ДанныеДокумента.НачалоПериода, КонецДня(ДанныеДокумента.КонецПериода));

			ПервыйСимволПредставлениеПериода = Лев(ПредставлениеПериода, 1);
			Если  КодСимвола(ПервыйСимволПредставлениеПериода) >= 48
				И КодСимвола(ПервыйСимволПредставлениеПериода) <= 57 Тогда
				ПредставлениеПериода = СтрШаблон(НСтр("ru='за период: %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеПериода);
				
			Иначе
				ПредставлениеПериода = СтрШаблон(НСтр("ru='за %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеПериода);
				
			КонецЕсли;
			
			ШаблонПериодаРасчетов = НСтр("ru = 'В период с %1 по %2 были осуществлены следующие расчеты'", ОбщегоНазначения.КодОсновногоЯзыка())+":";
			Если НЕ ЕстьОстаткиОборотыЗаПериод Тогда
				ШаблонПериодаРасчетов = НСтр("ru = 'В период с %1 по %2 операции по расчетам не производились.'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			
			ПредставлениеПериодаРасчетов = СтрШаблон(
				ШаблонПериодаРасчетов,
				Формат(ДанныеДокумента.НачалоПериода, "ДЛФ=ДД"),
				Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
		КонецЕсли;

		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
									"ПолноеНаименование");
		СведенияОКонтрагенте  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Контрагент,  ДанныеДокумента.Дата);
		КонтрагентНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
								  "ПолноеНаименование");
		
		СтруктураПредставленийУчастников = Новый Структура;
		СтруктураПредставленийУчастников.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		СтруктураПредставленийУчастников.Вставить("КонтрагентНаименование", КонтрагентНаименование);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
		ОбластьМакета.Параметры.ТекстЗаголовкаМакета         = ТекстЗаголовка;
		ОбластьМакета.Параметры.ФИОРуководителяКонтрагента   = СокрЛП(ДанныеДокумента.ФИОРуководителяКонтрагента);
		ОбластьМакета.Параметры.ПредставлениеПериода         = ПредставлениеПериода;
		ОбластьМакета.Параметры.ПредставлениеПериодаРасчетов = ПредставлениеПериодаРасчетов;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		#КонецОбласти
		
		#Область ДетальныеЗаписи
		ДанныеДокумента.Строки.Сортировать("ПредставлениеТипРасчетов");
		ТипЧисло = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
		ИтогоЗадолженность = Новый ТаблицаЗначений;
		ИтогоЗадолженность.Колонки.Добавить("Валюта");
		ИтогоЗадолженность.Колонки.Добавить("СуммаДт", ТипЧисло);
		ИтогоЗадолженность.Колонки.Добавить("СуммаКт", ТипЧисло);
		
		НастройкиПечати.Вставить("ПредставленияУчастников", СтруктураПредставленийУчастников);
		
		#Область ПараметрыВывода
		
		ДанныеВывода = Новый Структура();
		ДанныеВывода.Вставить("ДанныеДокумента", ДанныеДокумента);
		ДанныеВывода.Вставить("Макет", Макет);
		ДанныеВывода.Вставить("ИтогоЗадолженность", ИтогоЗадолженность);
		ДанныеВывода.Вставить("НастройкиПечати", НастройкиПечати);
		ДанныеВывода.Вставить("ОбщиеИтогиПоВалюте", ОбщиеИтогиПоВалюте);
		#КонецОбласти
		Для Каждого ДанныеПоТипуРасчетов Из ДанныеДокумента.Строки Цикл
			Для Каждого ДанныеПоВалюте Из ДанныеПоТипуРасчетов.Строки Цикл
				Отбор = Новый Структура("ДокументСсылка,ТипРасчетов,ВалютаСверки");
				ЗаполнитьЗначенияСвойств(Отбор, ДанныеПоВалюте);
				НайденныеИтоги = ОбщиеИтогиПоВалюте.НайтиСтроки(Отбор);
				Если НайденныеИтоги.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ДанныеПоВалюте, НайденныеИтоги[0]);
				КонецЕсли;
				ЕстьДанныеДоговора = ДанныеПоВалюте.НачальноеСальдоДт <> 0
										ИЛИ ДанныеПоВалюте.НачальноеСальдоКт <> 0
										ИЛИ ДанныеПоВалюте.ЕстьОбороты;
				Если ЕстьДанныеДоговора Тогда
					ТабличныйДокумент.Вывести(ВывестиДетальныеЗаписи(ДанныеПоВалюте, ДанныеВывода));
				КонецЕсли;
			КонецЦикла; // по детальным записям
		КонецЦикла; // по видам расчетов Взаиморасчеты/ФинансовыеИнструменты
		#КонецОбласти
		
		#Область Задолженность
		Если ИтогоЗадолженность.Количество() > 0 Тогда
			
			ОбластьМакетаЗаголовок	= Макет.ПолучитьОбласть("ЗаголовокЗадолженность");
			ОбластьДолг				= Макет.ПолучитьОбласть("СтрокаЗадолженность");
			ОбластьДолгРегл			= Макет.ПолучитьОбласть("СтрокаЗадолженностьВалютаРегл");
			ОбластьПустаяСтрока		= Макет.ПолучитьОбласть("ПустаяСтрока");
			
			ОбластьМакетаЗаголовок.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
			
			ЗадолженностьПоВалютам = ИтогоЗадолженность.Скопировать(); // ТаблицаЗначений
			ЗадолженностьПоВалютам.Свернуть("Валюта", "СуммаДт,СуммаКт");
			Для Каждого ДолгВВалюте Из ЗадолженностьПоВалютам Цикл
				
				ВывестиПустуюСтроку = Истина;
				ПредставлениеПартнера = ДанныеДокумента.ПредставлениеПартнера;
				Если НЕ ЗначениеЗаполнено(ДанныеДокумента.Партнер) Тогда
					ПредставлениеПартнера = СтруктураПредставленийУчастников.КонтрагентНаименование;
				КонецЕсли;
				
				Если ДолгВВалюте.СуммаДт <> 0 И ДолгВВалюте.СуммаКт <> 0 Тогда
					РассчитатьСальдо(ДолгВВалюте, "Сумма");
				КонецЕсли;
				
				ОбластьДолг.Параметры.Валюта = ДолгВВалюте.Валюта;
				
				// Долг партнера
				СуммаДолга = 0;
				Если ДолгВВалюте.СуммаДт > 0 Тогда
					СуммаДолга = ДолгВВалюте.СуммаДт;
					ОбластьДолг.Параметры.Сумма = Формат(ДолгВВалюте.СуммаДт, "ЧДЦ=2; ЧН=0; ЧГ=3,0");
					ОбластьДолг.Параметры.Дебитор = ПредставлениеПартнера;
				Иначе
					// Наш долг
					СуммаДолга = ДолгВВалюте.СуммаКт;
					ОбластьДолг.Параметры.Сумма = Формат(ДолгВВалюте.СуммаКт, "ЧДЦ=2; ЧН=0; ЧГ=3,0");
					ОбластьДолг.Параметры.Дебитор = СтрШаблон(
							НСтр("ru='%1 перед %2'"),
							СтруктураПредставленийУчастников.ПредставлениеОрганизации,
							ПредставлениеПартнера);
				КонецЕсли;
				ОбластьДолг.Параметры.СуммаПрописью = РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(СуммаДолга,ДолгВВалюте.Валюта);
				ТабличныйДокумент.Вывести(ОбластьДолг);
				
				Если ВывестиПустуюСтроку Тогда
					ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
				КонецЕсли;
			КонецЦикла; 
			
		Иначе
		
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокЗадолженностьОтсутствует");
			ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		
		КонецЕсли;
		#КонецОбласти 
		
		// РАСХОЖДЕНИЙ НЕ ВЫЯВЛЕНО
		ДанныеКонтрагентаЗаполнены = НЕ НастройкиПечати.НеЗаполнятьДанныеКонтрагента;
		Если НЕ ДанныеДокумента.ЕстьРасхождения И ДанныеКонтрагентаЗаполнены Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокРасхождения");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		#Область Подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		ОбластьМакета.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		#КонецОбласти
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.ДокументСсылка);
	
	КонецЦикла; // конец цикла по данным документа

	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ТипЗнч(ДляОтладки) = Тип("Структура") Тогда
		ДляОтладки.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ВывестиДетальныеЗаписи(ДанныеПоВалюте, ДанныеВывода)
	
	ДанныеДокумента = ДанныеВывода.ДанныеДокумента;
	Макет = ДанныеВывода.Макет;
	ИтогоЗадолженность = ДанныеВывода.ИтогоЗадолженность;
	НастройкиПечати = ДанныеВывода.НастройкиПечати;
	ОбщиеИтогиПоВалюте = ДанныеВывода.ОбщиеИтогиПоВалюте;
	
	СтруктураПредставленийУчастников = НастройкиПечати.ПредставленияУчастников;
	
	ЭтоФинансовыеИнструменты = ДанныеПоВалюте.ФинансовыеИнструменты;
	ВыводитьДолгАванс = НЕ ЭтоФинансовыеИнструменты И НастройкиПечати.ДебетКакДолг;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	#Область ОбластиПечати
	ОбластьМакетаГруппировка = Макет.ПолучитьОбласть("ГруппировкаОбъектДоговорВалюта");
	ОбластьМакетаШапка	 = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакетаНачОстаток  = Макет.ПолучитьОбласть("СтрокаТаблицыНачОстаток");
	ОбластьМакетаСтрока 	 = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьМакетаОбороты 	 = Макет.ПолучитьОбласть("ОборотыЗаПериод");
	ОбластьМакетаКонОстаток  = Макет.ПолучитьОбласть("СтрокаТаблицыКонОстаток");
	Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
		ОбластьМакетаНачОстаток.Область("СуммаКонтрагентНачОстаток").Формат = "ЧДЦ=2";
		ОбластьМакетаСтрока.Область("СуммаКонтрагент").Формат = "ЧДЦ=2";
		ОбластьМакетаОбороты.Область("СуммаКонтрагентОбороты").Формат = "ЧДЦ=2";
		ОбластьМакетаКонОстаток.Область("СуммаКонтрагентКонОстаток").Формат = "ЧДЦ=2";
	КонецЕсли;
	#КонецОбласти
	
	#Область ВыводНазванияГруппировки
	Валюта = СтрШаблон(НСтр("ru='в валюте'", ОбщегоНазначения.КодОсновногоЯзыка()) + " %1", ДанныеПоВалюте.Валюта);
	ЗаголовокГруппировки = "";
	Если ЗначениеЗаполнено(ДанныеПоВалюте.ПредставлениеТипРасчетов) Тогда
		ЗаголовокГруппировки = ДанныеПоВалюте.ПредставлениеТипРасчетов + " ";
	КонецЕсли;
	ЗаголовокГруппировки = ЗаголовокГруппировки + Валюта;
	ОбластьМакетаГруппировка.Параметры.ЗаголовокГруппировки = ЗаголовокГруппировки;
	ТабличныйДокумент.Вывести(ОбластьМакетаГруппировка);
	#КонецОбласти
	
	#Область ВыводШапкиТаблицы
	ОбластьМакетаШапка.Параметры.Заполнить(СтруктураПредставленийУчастников);
	ОбластьМакетаШапка.Параметры.Дебет = НСтр("ru = 'Дебет'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОбластьМакетаШапка.Параметры.Кредит = НСтр("ru = 'Кредит'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОбластьМакетаНачОстаток.Параметры.ИмяОстатка = НСтр("ru = 'Сальдо начальное'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОбластьМакетаКонОстаток.Параметры.ИмяОстатка = НСтр("ru = 'Сальдо конечное'", ОбщегоНазначения.КодОсновногоЯзыка());
	Если НастройкиПечати.ДебетКакДолг ИЛИ ЭтоФинансовыеИнструменты Тогда
		ОбластьМакетаШапка.Параметры.Дебет = НСтр("ru = 'Долг'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбластьМакетаШапка.Параметры.Кредит = НСтр("ru = 'Аванс'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбластьМакетаНачОстаток.Параметры.ИмяОстатка = НСтр("ru = 'Начальный остаток'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбластьМакетаКонОстаток.Параметры.ИмяОстатка = НСтр("ru = 'Конечный остаток'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	#КонецОбласти
	
	#Область ВыводНачальногоОстатка
	СвернутьСальдо(ДанныеПоВалюте.НачальноеСальдоДт, ДанныеПоВалюте.НачальноеСальдоКт);
	ОбластьМакетаНачОстаток.Параметры.СуммаДебет = ДанныеПоВалюте.НачальноеСальдоДт;
	ОбластьМакетаНачОстаток.Параметры.СуммаКредит = ДанныеПоВалюте.НачальноеСальдоКт;
	
	ОбластьМакетаНачОстаток.Параметры.СуммаДебетКонтрагент = ДанныеПоВалюте.НачальноеСальдоКт;
	ОбластьМакетаНачОстаток.Параметры.СуммаКредитКонтрагент = ДанныеПоВалюте.НачальноеСальдоДт;
	Если ВыводитьДолгАванс Тогда
		СвернутьСальдо(ДанныеПоВалюте.НачальноеСальдоДолгКонтрагент, ДанныеПоВалюте.НачальноеСальдоАвансКонтрагент);
		ОбластьМакетаНачОстаток.Параметры.СуммаДебетКонтрагент = ДанныеПоВалюте.НачальноеСальдоДолгКонтрагент;
		ОбластьМакетаНачОстаток.Параметры.СуммаКредитКонтрагент = ДанныеПоВалюте.НачальноеСальдоАвансКонтрагент;
	КонецЕсли;
	Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
		ОбластьМакетаНачОстаток.Параметры.СуммаДебетКонтрагент = 0;
		ОбластьМакетаНачОстаток.Параметры.СуммаКредитКонтрагент = 0;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакетаНачОстаток);
	#КонецОбласти
	
	РасчетныеДокументыПериода = Новый Массив;
	ШаблонДокумента = НСтр("ru = '%ИмяДокумента% №%Номер% от %Дата%'");
	Если ДанныеПоВалюте.ЕстьОбороты Тогда
		Для Каждого ДетальныеЗаписи Из ДанныеПоВалюте.Строки Цикл
	
			Если ТипЗнч(ДетальныеЗаписи.РасчетныйДокумент) = Тип("ДокументСсылка.ВзаимозачетЗадолженности")
				И ДетальныеЗаписи.СуммаДебет - ДетальныеЗаписи.СуммаКредит = 0 Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеДокумента = СтрЗаменить(ШаблонДокумента, "%ИмяДокумента%", ДетальныеЗаписи.НаименованиеДокумента);
			Если ЗначениеЗаполнено(ДетальныеЗаписи.НомерДокумента) Тогда
				ОписаниеДокумента = СтрЗаменить(ОписаниеДокумента, "%Номер%", ДетальныеЗаписи.НомерДокумента);
			Иначе
				ОписаниеДокумента = СтрЗаменить(ОписаниеДокумента, "%Номер%", "______");
			КонецЕсли;
			Если ЗначениеЗаполнено(ДетальныеЗаписи.ДатаДокумента) Тогда
				ОписаниеДокумента = СтрЗаменить(ОписаниеДокумента, "%Дата%", Формат(ДетальныеЗаписи.ДатаДокумента, "ДЛФ=D"));
			Иначе
				ОписаниеДокумента = СтрЗаменить(ОписаниеДокумента, "%Дата%", "  .  .  ");
			КонецЕсли;
			Если ЗначениеЗаполнено(ДетальныеЗаписи.СвязанныеДокументы) Тогда
				ОписаниеДокумента = ОписаниеДокумента + " (" + ДетальныеЗаписи.СвязанныеДокументы + ")";
			КонецЕсли;
			
			РасчетныеДокументыПериода.Добавить(ДетальныеЗаписи.РасчетныйДокумент);
			
			ОбластьМакетаСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы");
			Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
				ОбластьМакетаСтрока.Область("СуммаКонтрагент").Формат = "ЧДЦ=2";
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрока.Параметры, ДетальныеЗаписи);
			ОбластьМакетаСтрока.Параметры.Дата = Формат(ДетальныеЗаписи.ДатаДокумента, "ДЛФ=D");
			ОбластьМакетаСтрока.Параметры.ОписаниеДокумента = ОписаниеДокумента;
			Если ВыводитьДолгАванс Тогда
				ОчиститьДебетКредит(ОбластьМакетаСтрока);
				ОбластьМакетаСтрока.Параметры.СуммаДебет = ДетальныеЗаписи.СуммаДолг;
				ОбластьМакетаСтрока.Параметры.СуммаКредит = ДетальныеЗаписи.СуммаАванс;
				ОбластьМакетаСтрока.Параметры.СуммаДебетКонтрагент = ДетальныеЗаписи.СуммаДолгКонтрагент;
				ОбластьМакетаСтрока.Параметры.СуммаКредитКонтрагент = ДетальныеЗаписи.СуммаАвансКонтрагент;
			КонецЕсли;
			Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
				Если НЕ ЭтоФинансовыеИнструменты Тогда
					ОбластьМакетаСтрока.Параметры.СуммаДокументаКонтрагент = 0;
				КонецЕсли;
				ОбластьМакетаСтрока.Параметры.СуммаДебетКонтрагент = 0;
				ОбластьМакетаСтрока.Параметры.СуммаКредитКонтрагент = 0;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
		КонецЦикла; 
	КонецЕсли;
	
	#Область ВыводОборотовЗаПериод
	ЗаполнитьЗначенияСвойств(ОбластьМакетаОбороты.Параметры, ДанныеПоВалюте);
	ОбластьМакетаОбороты.Параметры.СуммаДебет = ДанныеПоВалюте.СуммаДебет;
	ОбластьМакетаОбороты.Параметры.СуммаКредит = ДанныеПоВалюте.СуммаКредит;
	ОбластьМакетаОбороты.Параметры.СуммаДебетКонтрагент = ДанныеПоВалюте.СуммаДебетКонтрагент;
	ОбластьМакетаОбороты.Параметры.СуммаКредитКонтрагент = ДанныеПоВалюте.СуммаКредитКонтрагент;
	Если ВыводитьДолгАванс Тогда
		ОчиститьДебетКредит(ОбластьМакетаОбороты);
		ОбластьМакетаОбороты.Параметры.СуммаДебет = ДанныеПоВалюте.СуммаДолг;
		ОбластьМакетаОбороты.Параметры.СуммаКредит = ДанныеПоВалюте.СуммаАванс;
		ОбластьМакетаОбороты.Параметры.СуммаДебетКонтрагент = ДанныеПоВалюте.СуммаДолгКонтрагент;
		ОбластьМакетаОбороты.Параметры.СуммаКредитКонтрагент = ДанныеПоВалюте.СуммаАвансКонтрагент;
	КонецЕсли;
	
	Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
		ОбластьМакетаОбороты.Параметры.СуммаДебетКонтрагент = 0;
		ОбластьМакетаОбороты.Параметры.СуммаКредитКонтрагент = 0;
	КонецЕсли;
	Если РасчетныеДокументыПериода.Количество() > 0 Тогда
		ТабличныйДокумент.Вывести(ОбластьМакетаОбороты);
	КонецЕсли;
	#КонецОбласти
	
	#Область ВыводКонечногоОстатка
	СвернутьСальдо(ДанныеПоВалюте.КонечноеСальдоДт, ДанныеПоВалюте.КонечноеСальдоКт);
	ЗаполнитьЗначенияСвойств(ОбластьМакетаКонОстаток.Параметры, ДанныеПоВалюте);
	
	ОбластьМакетаКонОстаток.Параметры.СуммаДебет = ДанныеПоВалюте.КонечноеСальдоДт;
	ОбластьМакетаКонОстаток.Параметры.СуммаКредит = ДанныеПоВалюте.КонечноеСальдоКт;
	
	ОбластьМакетаКонОстаток.Параметры.СуммаДебетКонтрагент = 0;
	ОбластьМакетаКонОстаток.Параметры.СуммаКредитКонтрагент = 0;
	
	СвернутьСальдо(ДанныеПоВалюте.КонечноеСальдоДтКонтрагент, ДанныеПоВалюте.КонечноеСальдоКтКонтрагент);
	ОбластьМакетаКонОстаток.Параметры.СуммаДебетКонтрагент = ДанныеПоВалюте.КонечноеСальдоДтКонтрагент;
	ОбластьМакетаКонОстаток.Параметры.СуммаКредитКонтрагент = ДанныеПоВалюте.КонечноеСальдоКтКонтрагент;
	Если ВыводитьДолгАванс Тогда
		ОчиститьДебетКредит(ОбластьМакетаКонОстаток);
		
		ОбластьМакетаКонОстаток.Параметры.СуммаДебет = ДанныеПоВалюте.КонечноеСальдоДт;
		ОбластьМакетаКонОстаток.Параметры.СуммаКредит = ДанныеПоВалюте.КонечноеСальдоКт;
		
		СвернутьСальдо(ДанныеПоВалюте.КонечноеСальдоДолгКонтрагент, ДанныеПоВалюте.КонечноеСальдоАвансКонтрагент);
		ОбластьМакетаКонОстаток.Параметры.СуммаДебетКонтрагент = ДанныеПоВалюте.КонечноеСальдоДолгКонтрагент;
		ОбластьМакетаКонОстаток.Параметры.СуммаКредитКонтрагент = ДанныеПоВалюте.КонечноеСальдоАвансКонтрагент;
	КонецЕсли;
	Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
		ОбластьМакетаКонОстаток.Параметры.СуммаДебетКонтрагент = 0;
		ОбластьМакетаКонОстаток.Параметры.СуммаКредитКонтрагент = 0;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакетаКонОстаток);
	#КонецОбласти

	Задолженность = ИтогоЗадолженность.Добавить();
	Задолженность.Валюта = ДанныеПоВалюте.Валюта;
	Задолженность.СуммаДт = ДанныеПоВалюте.КонечноеСальдоДт;
	Задолженность.СуммаКт = ДанныеПоВалюте.КонечноеСальдоКт;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура СвернутьСальдо(КонечноеСальдоДт, КонечноеСальдоКт)
	
	КонечноеСальдо = КонечноеСальдоДт - КонечноеСальдоКт;
	Если КонечноеСальдо > 0 Тогда
		КонечноеСальдоДт = КонечноеСальдо;
		КонечноеСальдоКт = 0;
	Иначе
		КонечноеСальдоДт = 0;
		КонечноеСальдоКт = -КонечноеСальдо;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру данными о получателях печатных форм.
// Параметры:
// 	СтруктураДанныхОбъектаПечати - см. ФормированиеПечатныхФорм.ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта.СтруктураДанныхОбъектаПечати
// 
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("ДанныеКонтрагента.Партнер");
	Иначе
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент.Партнер");
	КонецЕсли;
	
КонецПроцедуры

Функция НастройкиПечатиПоУмолчанию() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДебетКакДолг", Ложь);
	Результат.Вставить("НеЗаполнятьДанныеКонтрагента", Ложь);
	Результат.Вставить("ОбъединитьКлиентовПоставщиков", Истина);
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьСальдо(ДолгВВалюте, Сумма)
	
	СуммаДт = ДолгВВалюте[Сумма + "Дт"];
	СуммаКт = ДолгВВалюте[Сумма + "Кт"];
	Сальдо = СуммаДт - СуммаКт;
	Если Сальдо > 0 Тогда
		ДолгВВалюте[Сумма + "Дт"] = Сальдо;
		ДолгВВалюте[Сумма + "Кт"] = 0;
	Иначе
		ДолгВВалюте[Сумма + "Дт"] = 0;
		ДолгВВалюте[Сумма + "Кт"] = -Сальдо;
	КонецЕсли;
	
КонецПроцедуры

#Область ПолучениеДанныхНаПечать

Функция ЗапросДанныеНаПечать(МассивОбъектов, НастройкиПечати) Экспорт
	
	РасшифроватьНастройкуДетализации(НастройкиПечати);
	
	ЗапросДанныеДокумента = Новый Запрос;
	МенеджерВременныхТаблиц = ИнициализироватьМенеджерТаблиц(МассивОбъектов);
	ЗапросДанныеДокумента.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗапросДанныеДокумента.Текст = ТекстЗапросаДанныеДокумента(НастройкиПечати);
	
	ЗапросДанныеДокумента.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросДанныеДокумента.УстановитьПараметр("ДебетКакДолг", НастройкиПечати.ДебетКакДолг);
	ЗапросДанныеДокумента.УстановитьПараметр("ОбъединитьКлиентовПоставщиков", НастройкиПечати.ОбъединитьКлиентовПоставщиков);

	Если НастройкиПечати.Свойство("ДляОтладки") Тогда
		Если НастройкиПечати.ДляОтладки.Свойство("ЗапросДанныеНаПечать") Тогда
			ЗапросДанныеДокумента = НастройкиПечати.ДляОтладки.ЗапросДанныеНаПечать;
			ЗапросДанныеДокумента.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			НастройкиПечати.ДляОтладки.Вставить("МенеджерВременныхТаблиц", ИнициализироватьМенеджерТаблиц(МассивОбъектов));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗапросДанныеДокумента;

КонецФункции

Функция ИнициализироватьМенеджерТаблиц(МассивОбъектов)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ЗначениеЗаполнено(МассивОбъектов) Тогда
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	Иначе
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(ПустаяСсылка(), МенеджерВременныхТаблиц);	
	КонецЕсли;
	
	РеквизитыДокумента = Метаданные.Документы.СверкаВзаиморасчетов2_5_11.Реквизиты;
	РеквизитыОтветственныеЛицаОрганизацииКонтрагента = Новый Структура();
	РеквизитыОтветственныеЛицаОрганизацииКонтрагента.Вставить(
		РеквизитыДокумента.РуководительОрганизацииКонтрагента.Имя, 
		Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	РеквизитыОтветственныеЛицаОрганизацииКонтрагента.Вставить(
		РеквизитыДокумента.ГлавныйБухгалтерОрганизацииКонтрагента.Имя, 
		Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	
	Если ЗначениеЗаполнено(МассивОбъектов) Тогда
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(
			МассивОбъектов, 
			МенеджерВременныхТаблиц, 
			"Контрагент", 
			РеквизитыОтветственныеЛицаОрганизацииКонтрагента, 
			"ТаблицаОтветственныеЛицаОрганизацииКонтрагента");
	Иначе
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(
			ПустаяСсылка(), 
			МенеджерВременныхТаблиц, 
			"Контрагент", 
			РеквизитыОтветственныеЛицаОрганизацииКонтрагента, 
			"ТаблицаОтветственныеЛицаОрганизацииКонтрагента");
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ТекстЗапросаДанныеДокумента(НастройкиПечати)
	
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТЧИтогиРасчетов.Ссылка КАК Ссылка,
	|	ТЧИтогиРасчетов.Ссылка.Валюта КАК ВалютаСверки,
	|	ТЧИтогиРасчетов.Ссылка.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегл,
	|	ТЧИтогиРасчетов.Ссылка.Валюта = ТЧИтогиРасчетов.Ссылка.Организация.ВалютаРегламентированногоУчета КАК СверкаВВалютеРегл,
	|	ТЧИтогиРасчетов.Ссылка.ЕстьРасхождения КАК ЕстьРасхождения,
	|	ВЫБОР КОГДА &ОбъединитьКлиентовПоставщиков
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТЧИтогиРасчетов.ТипРасчетов
	|	КОНЕЦ КАК ТипРасчетов,
	|	ТЧИтогиРасчетов.Ссылка.РежимСверкиИтоговВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.РежимСверкиИтоговВзаиморасчетов.ПоДоговорам) КАК СверкаПоДоговорам,
	|	ТЧИтогиРасчетов.Ссылка.Валюта КАК ОбъектГруппировки,
	|	ТЧИтогиРасчетов.Партнер КАК Партнер,
	|
	|	СУММА(ТЧИтогиРасчетов.НачальноеСальдоДт) КАК НачальноеСальдоДт,
	|	СУММА(ТЧИтогиРасчетов.НачальноеСальдоКт) КАК НачальноеСальдоКт,
	|	СУММА(ТЧИтогиРасчетов.ОборотДт) КАК ОборотДт,
	|	СУММА(ТЧИтогиРасчетов.ОборотКт) КАК ОборотКт,
	|	СУММА(ТЧИтогиРасчетов.КонечноеСальдоДт) КАК КонечноеСальдоДт,
	|	СУММА(ТЧИтогиРасчетов.КонечноеСальдоКт) КАК КонечноеСальдоКт,
	|
	|	ВЫБОР КОГДА ТЧИтогиРасчетов.Ссылка.ЕстьРасхождения
	|		ТОГДА СУММА(ТЧИтогиРасчетов.НачальноеСальдоКтКонтрагент)
	|		ИНАЧЕ СУММА(ТЧИтогиРасчетов.НачальноеСальдоКт)
	|	КОНЕЦ КАК НачальноеСальдоДтКонтрагент,
	|	ВЫБОР КОГДА ТЧИтогиРасчетов.Ссылка.ЕстьРасхождения
	|		ТОГДА СУММА(ТЧИтогиРасчетов.НачальноеСальдоДтКонтрагент)
	|		ИНАЧЕ СУММА(ТЧИтогиРасчетов.НачальноеСальдоДт)
	|	КОНЕЦ КАК НачальноеСальдоКтКонтрагент,
	|
	|	ВЫБОР КОГДА ТЧИтогиРасчетов.Ссылка.ЕстьРасхождения
	|		ТОГДА СУММА(ТЧИтогиРасчетов.ОборотКтКонтрагент)
	|		ИНАЧЕ СУММА(ТЧИтогиРасчетов.ОборотКт)
	|	КОНЕЦ КАК ОборотДтКонтрагент,
	|	ВЫБОР КОГДА ТЧИтогиРасчетов.Ссылка.ЕстьРасхождения
	|		ТОГДА СУММА(ТЧИтогиРасчетов.ОборотДтКонтрагент)
	|		ИНАЧЕ СУММА(ТЧИтогиРасчетов.ОборотДт)
	|	КОНЕЦ КАК ОборотКтКонтрагент,
	|
	|	ВЫБОР КОГДА ТЧИтогиРасчетов.Ссылка.ЕстьРасхождения
	|		ТОГДА СУММА(ТЧИтогиРасчетов.КонечноеСальдоКтКонтрагент)
	|		ИНАЧЕ СУММА(ТЧИтогиРасчетов.КонечноеСальдоКт)
	|	КОНЕЦ КАК КонечноеСальдоДтКонтрагент,
	|	ВЫБОР КОГДА ТЧИтогиРасчетов.Ссылка.ЕстьРасхождения
	|		ТОГДА СУММА(ТЧИтогиРасчетов.КонечноеСальдоДтКонтрагент)
	|		ИНАЧЕ СУММА(ТЧИтогиРасчетов.КонечноеСальдоДт)
	|	КОНЕЦ КАК КонечноеСальдоКтКонтрагент,
	|
	|	ВЫБОР КОГДА ТЧИтогиРасчетов.Ссылка.ЕстьРасхождения
	|		ТОГДА СУММА(ТЧИтогиРасчетов.НачальноеСальдоДтКонтрагент)
	|		ИНАЧЕ СУММА(ТЧИтогиРасчетов.НачальноеСальдоДт)
	|	КОНЕЦ КАК НачальноеСальдоДолгКонтрагент,
	|	ВЫБОР КОГДА ТЧИтогиРасчетов.Ссылка.ЕстьРасхождения
	|		ТОГДА СУММА(ТЧИтогиРасчетов.НачальноеСальдоКтКонтрагент)
	|		ИНАЧЕ СУММА(ТЧИтогиРасчетов.НачальноеСальдоКт)
	|	КОНЕЦ КАК НачальноеСальдоАвансКонтрагент,
	|
	|	ВЫБОР КОГДА ТЧИтогиРасчетов.Ссылка.ЕстьРасхождения
	|		ТОГДА СУММА(ТЧИтогиРасчетов.КонечноеСальдоДтКонтрагент)
	|		ИНАЧЕ СУММА(ТЧИтогиРасчетов.КонечноеСальдоДт)
	|	КОНЕЦ КАК КонечноеСальдоДолгКонтрагент,
	|	ВЫБОР КОГДА ТЧИтогиРасчетов.Ссылка.ЕстьРасхождения
	|		ТОГДА СУММА(ТЧИтогиРасчетов.КонечноеСальдоКтКонтрагент)
	|		ИНАЧЕ СУММА(ТЧИтогиРасчетов.КонечноеСальдоКт)
	|	КОНЕЦ КАК КонечноеСальдоАвансКонтрагент
	|
	|ПОМЕСТИТЬ втИтогиРасчетов
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_5_11.ИтоговыеЗаписи КАК ТЧИтогиРасчетов
	|ГДЕ
	|	ТЧИтогиРасчетов.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧИтогиРасчетов.Ссылка,
	|	ВЫБОР КОГДА &ОбъединитьКлиентовПоставщиков
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТЧИтогиРасчетов.ТипРасчетов
	|	КОНЕЦ,
	|	ТЧИтогиРасчетов.Ссылка.Валюта,
	|	ТЧИтогиРасчетов.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтогиРасчетов.Ссылка КАК Ссылка,
	|	ИтогиРасчетов.СверкаВВалютеРегл КАК СверкаВВалютеРегл,
	|	ВЫБОР КОГДА ИтогиРасчетов.СверкаВВалютеРегл
	|		ТОГДА ИтогиРасчетов.ВалютаРегл
	|		ИНАЧЕ ИтогиРасчетов.ВалютаСверки
	|	КОНЕЦ КАК Валюта,
	|	ИтогиРасчетов.ВалютаСверки КАК ВалютаСверки,
	|	ИтогиРасчетов.ВалютаРегл КАК ВалютаРегл,
	|	ИтогиРасчетов.СверкаПоДоговорам КАК СверкаПоДоговорам,
	|	ИтогиРасчетов.ЕстьРасхождения КАК ЕстьРасхождения,
	|	ИтогиРасчетов.ТипРасчетов КАК ТипРасчетов,
	|
	|	ИтогиРасчетов.ВалютаСверки КАК ОбъектГруппировки,
	|	ДетальныеЗаписи.Партнер КАК Партнер,
	|
	|	ИтогиРасчетов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ИтогиРасчетов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ИтогиРасчетов.ОборотДт КАК ОборотДт,
	|	ИтогиРасчетов.ОборотКт КАК ОборотКт,
	|	ИтогиРасчетов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ИтогиРасчетов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|
	|	ИтогиРасчетов.НачальноеСальдоДтКонтрагент КАК НачальноеСальдоДтКонтрагент,
	|	ИтогиРасчетов.НачальноеСальдоКтКонтрагент КАК НачальноеСальдоКтКонтрагент,
	|	ИтогиРасчетов.ОборотДтКонтрагент КАК ОборотДтКонтрагент,
	|	ИтогиРасчетов.ОборотКтКонтрагент КАК ОборотКтКонтрагент,
	|	ИтогиРасчетов.КонечноеСальдоДтКонтрагент КАК КонечноеСальдоДтКонтрагент,
	|	ИтогиРасчетов.КонечноеСальдоКтКонтрагент КАК КонечноеСальдоКтКонтрагент,
	|
	|	ИтогиРасчетов.НачальноеСальдоДолгКонтрагент КАК НачальноеСальдоДолгКонтрагент,
	|	ИтогиРасчетов.НачальноеСальдоАвансКонтрагент КАК НачальноеСальдоАвансКонтрагент,
	|	ИтогиРасчетов.КонечноеСальдоДолгКонтрагент КАК КонечноеСальдоДолгКонтрагент,
	|	ИтогиРасчетов.КонечноеСальдоАвансКонтрагент КАК КонечноеСальдоАвансКонтрагент,
	|
	|	НЕ ДетальныеЗаписи.РасчетныйДокумент ЕСТЬ NULL КАК ЕстьОбороты,
	|	ЕСТЬNULL(ДетальныеЗаписи.РасчетныйДокумент, НЕОПРЕДЕЛЕНО) КАК РасчетныйДокумент,
	|	ЕСТЬNULL(ДетальныеЗаписи.НаименованиеДокумента, """") КАК НаименованиеДокумента,
	|	ЕСТЬNULL(ДетальныеЗаписи.НомерДокумента, """") КАК НомерДокумента,
	|	ЕСТЬNULL(ДетальныеЗаписи.ДатаДокумента, ДАТАВРЕМЯ(1,1,1)) КАК ДатаДокумента,
	|	ЕСТЬNULL(ДетальныеЗаписи.СвязанныеДокументы, """") КАК СвязанныеДокументы,
	|
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДетальныеЗаписи.РасчетныйДокумент) = ТИП(Документ.РасчетКурсовыхРазниц)
	|		ТОГДА ИтогиРасчетов.ВалютаРегл
	|		ИНАЧЕ ДетальныеЗаписи.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаДокумента,
	|	
	|	ЕСТЬNULL(ДетальныеЗаписи.СуммаДокумента,0) КАК СуммаДокумента,
	|	ЕСТЬNULL(ДетальныеЗаписи.СуммаДолг,0) КАК СуммаДолг,
	|	ЕСТЬNULL(ДетальныеЗаписи.СуммаАванс,0) КАК СуммаАванс,
	|	ЕСТЬNULL(ДетальныеЗаписи.СуммаДебет,0) КАК СуммаДебет,
	|	ЕСТЬNULL(ДетальныеЗаписи.СуммаКредит,0) КАК СуммаКредит,
	|
	|	ВЫБОР КОГДА ИтогиРасчетов.ЕстьРасхождения
	|		ТОГДА ЕСТЬNULL(ДетальныеЗаписи.СуммаКредитКонтрагент,0)
	|		ИНАЧЕ ЕСТЬNULL(ДетальныеЗаписи.СуммаКредит,0)
	|	КОНЕЦ КАК СуммаДебетКонтрагент,
	|	ВЫБОР КОГДА ИтогиРасчетов.ЕстьРасхождения
	|		ТОГДА ЕСТЬNULL(ДетальныеЗаписи.СуммаДебетКонтрагент,0)
	|		ИНАЧЕ ЕСТЬNULL(ДетальныеЗаписи.СуммаДебет,0)
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|
	|	ВЫБОР КОГДА ИтогиРасчетов.ЕстьРасхождения
	|		ТОГДА ЕСТЬNULL(ДетальныеЗаписи.СуммаДебетКонтрагент,0)
	|		ИНАЧЕ ЕСТЬNULL(ДетальныеЗаписи.СуммаДолг,0)
	|	КОНЕЦ КАК СуммаДолгКонтрагент,
	|	ВЫБОР КОГДА ИтогиРасчетов.ЕстьРасхождения
	|		ТОГДА ЕСТЬNULL(ДетальныеЗаписи.СуммаКредитКонтрагент,0)
	|		ИНАЧЕ ЕСТЬNULL(ДетальныеЗаписи.СуммаАванс,0)
	|	КОНЕЦ КАК СуммаАвансКонтрагент
	|
	|ПОМЕСТИТЬ втДетальныеЗаписи
	|ИЗ
	|	втИтогиРасчетов КАК ИтогиРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов2_5_11.ДетальныеЗаписи КАК ДетальныеЗаписи
	|		ПО ИтогиРасчетов.Ссылка = ДетальныеЗаписи.Ссылка
	|			И ИтогиРасчетов.ТипРасчетов = ВЫБОР КОГДА &ОбъединитьКлиентовПоставщиков
	|												ТОГДА НЕОПРЕДЕЛЕНО
	|												ИНАЧЕ ДетальныеЗаписи.ТипРасчетов
	|											КОНЕЦ
	|			И ИтогиРасчетов.Партнер = ДетальныеЗаписи.Партнер
	|			И ДетальныеЗаписи.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ФинансовыеИнструменты,
	|	ДеталиРасчетов.Ссылка КАК Ссылка,
	|	ДеталиРасчетов.Валюта КАК Валюта,
	|	ДеталиРасчетов.СверкаВВалютеРегл КАК СверкаВВалютеРегл,
	|	ДеталиРасчетов.ВалютаСверки КАК ВалютаСверки,
	|	ДеталиРасчетов.ВалютаРегл КАК ВалютаРегл,
	|	ДеталиРасчетов.СверкаПоДоговорам КАК СверкаПоДоговорам,
	|	ДеталиРасчетов.ЕстьРасхождения КАК ЕстьРасхождения,
	|	ДеталиРасчетов.ТипРасчетов КАК ТипРасчетов,
	|
	|	ДеталиРасчетов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиРасчетов.Партнер КАК Партнер,
	|
	|	ДеталиРасчетов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиРасчетов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиРасчетов.ОборотДт КАК ОборотДт,
	|	ДеталиРасчетов.ОборотКт КАК ОборотКт,
	|	ДеталиРасчетов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиРасчетов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|
	|	ДеталиРасчетов.НачальноеСальдоДтКонтрагент КАК НачальноеСальдоДтКонтрагент,
	|	ДеталиРасчетов.НачальноеСальдоКтКонтрагент КАК НачальноеСальдоКтКонтрагент,
	|	ДеталиРасчетов.ОборотДтКонтрагент КАК ОборотДтКонтрагент,
	|	ДеталиРасчетов.ОборотКтКонтрагент КАК ОборотКтКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоДтКонтрагент КАК КонечноеСальдоДтКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоКтКонтрагент КАК КонечноеСальдоКтКонтрагент,
	|
	|	ДеталиРасчетов.НачальноеСальдоДолгКонтрагент КАК НачальноеСальдоДолгКонтрагент,
	|	ДеталиРасчетов.НачальноеСальдоАвансКонтрагент КАК НачальноеСальдоАвансКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоДолгКонтрагент КАК КонечноеСальдоДолгКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоАвансКонтрагент КАК КонечноеСальдоАвансКонтрагент,
	|
	|	ДеталиРасчетов.ЕстьОбороты КАК ЕстьОбороты,
	|	ДеталиРасчетов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиРасчетов.НаименованиеДокумента КАК НаименованиеДокумента,
	|	ДеталиРасчетов.НомерДокумента КАК НомерДокумента,
	|	ДеталиРасчетов.ДатаДокумента КАК ДатаДокумента,
	|	ДеталиРасчетов.СвязанныеДокументы КАК СвязанныеДокументы,
	|
	|	ДеталиРасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	ДеталиРасчетов.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(ДеталиРасчетов.СуммаДолг) КАК СуммаДолг,
	|	СУММА(ДеталиРасчетов.СуммаАванс) КАК СуммаАванс,
	|	СУММА(ДеталиРасчетов.СуммаДебет) КАК СуммаДебет,
	|	СУММА(ДеталиРасчетов.СуммаКредит) КАК СуммаКредит,
	|	СУММА(ДеталиРасчетов.СуммаДебетКонтрагент) КАК СуммаДебетКонтрагент,
	|	СУММА(ДеталиРасчетов.СуммаКредитКонтрагент) КАК СуммаКредитКонтрагент,
	|
	|	СУММА(ДеталиРасчетов.СуммаДолгКонтрагент) КАК СуммаДолгКонтрагент,
	|	СУММА(ДеталиРасчетов.СуммаАвансКонтрагент) КАК СуммаАвансКонтрагент,
	|	
	|	ВЫБОР 
	|		КОГДА ДеталиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|			ТОГДА 10
	|		КОГДА ДеталиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|			ТОГДА 20
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ПорядокРасчетов,
	|	
	|	0 КАК ПорядокТипаСуммы
	|	
	|ПОМЕСТИТЬ ДетальныеЗаписиДокумента
	|ИЗ
	|	втДетальныеЗаписи КАК ДеталиРасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДеталиРасчетов.Ссылка,
	|	ДеталиРасчетов.Валюта,
	|	ДеталиРасчетов.СверкаВВалютеРегл,
	|	ДеталиРасчетов.ВалютаСверки,
	|	ДеталиРасчетов.ВалютаРегл,
	|	ДеталиРасчетов.СверкаПоДоговорам,
	|	ДеталиРасчетов.ЕстьРасхождения,
	|	ДеталиРасчетов.ТипРасчетов,
	|
	|	ДеталиРасчетов.ОбъектГруппировки,
	|	ДеталиРасчетов.Партнер,
	|
	|	ДеталиРасчетов.НачальноеСальдоДт,
	|	ДеталиРасчетов.НачальноеСальдоКт,
	|	ДеталиРасчетов.ОборотДт,
	|	ДеталиРасчетов.ОборотКт,
	|	ДеталиРасчетов.КонечноеСальдоДт,
	|	ДеталиРасчетов.КонечноеСальдоКт,
	|
	|	ДеталиРасчетов.НачальноеСальдоДтКонтрагент,
	|	ДеталиРасчетов.НачальноеСальдоКтКонтрагент,
	|	ДеталиРасчетов.ОборотДтКонтрагент,
	|	ДеталиРасчетов.ОборотКтКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоДтКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоКтКонтрагент,
	|
	|	ДеталиРасчетов.НачальноеСальдоДолгКонтрагент,
	|	ДеталиРасчетов.НачальноеСальдоАвансКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоДолгКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоАвансКонтрагент,
	|
	|	ДеталиРасчетов.ЕстьОбороты,
	|	ДеталиРасчетов.РасчетныйДокумент,
	|	ДеталиРасчетов.НаименованиеДокумента,
	|	ДеталиРасчетов.НомерДокумента,
	|	ДеталиРасчетов.ДатаДокумента,
	|	ДеталиРасчетов.СвязанныеДокументы,
	|
	|	ДеталиРасчетов.ВалютаДокумента,
	|	ДеталиРасчетов.СуммаДокумента,
	|	
	|	ВЫБОР 
	|		КОГДА ДеталиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|			ТОГДА 10
	|		КОГДА ДеталиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|			ТОГДА 20
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	НЕ (ТИПЗНАЧЕНИЯ(ДеталиРасчетов.РасчетныйДокумент) = ТИП(Документ.ВзаимозачетЗадолженности)
	|		И СУММА(ДеталиРасчетов.СуммаДебет - ДеталиРасчетов.СуммаКредит) = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДеталиРасчетов.Ссылка КАК ДокументСсылка,
	|	ДеталиРасчетов.ВалютаРегл КАК ВалютаРегл,
	|	ДеталиРасчетов.ВалютаСверки КАК ВалютаСверки,
	|	ДеталиРасчетов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиРасчетов.СверкаПоДоговорам КАК СверкаПоДоговорам,
	|
	|	ДеталиРасчетов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиРасчетов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	СУММА(ДеталиРасчетов.СуммаДебет) КАК ОборотДт,
	|	СУММА(ДеталиРасчетов.СуммаКредит) КАК ОборотКт,
	|	ДеталиРасчетов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиРасчетов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|
	|	ДеталиРасчетов.НачальноеСальдоДтКонтрагент КАК НачальноеСальдоДтКонтрагент,
	|	ДеталиРасчетов.НачальноеСальдоКтКонтрагент КАК НачальноеСальдоКтКонтрагент,
	|	СУММА(ДеталиРасчетов.СуммаДебетКонтрагент) КАК ОборотДтКонтрагент,
	|	СУММА(ДеталиРасчетов.СуммаКредитКонтрагент) КАК ОборотКтКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоДтКонтрагент КАК КонечноеСальдоДтКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоКтКонтрагент КАК КонечноеСальдоКтКонтрагент,
	|
	|	ДеталиРасчетов.НачальноеСальдоДолгКонтрагент КАК НачальноеСальдоДолгКонтрагент,
	|	ДеталиРасчетов.НачальноеСальдоАвансКонтрагент КАК НачальноеСальдоАвансКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоДолгКонтрагент КАК КонечноеСальдоДолгКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоАвансКонтрагент КАК КонечноеСальдоАвансКонтрагент
	|ПОМЕСТИТЬ втОбщиеИтогиПоВалюте
	|ИЗ
	|	ДетальныеЗаписиДокумента КАК ДеталиРасчетов
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДеталиРасчетов.Ссылка,
	|	ДеталиРасчетов.ВалютаСверки,
	|	ДеталиРасчетов.ВалютаРегл,
	|	ДеталиРасчетов.ТипРасчетов,
	|	ДеталиРасчетов.СверкаПоДоговорам,
	|	
	|	ДеталиРасчетов.НачальноеСальдоДт,
	|	ДеталиРасчетов.НачальноеСальдоКт,
	|	ДеталиРасчетов.КонечноеСальдоДт,
	|	ДеталиРасчетов.КонечноеСальдоКт,
	|
	|	ДеталиРасчетов.НачальноеСальдоДтКонтрагент,
	|	ДеталиРасчетов.НачальноеСальдоКтКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоДтКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоКтКонтрагент,
	|
	|	ДеталиРасчетов.НачальноеСальдоДолгКонтрагент,
	|	ДеталиРасчетов.НачальноеСальдоАвансКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоДолгКонтрагент,
	|	ДеталиРасчетов.КонечноеСальдоАвансКонтрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСверки.Ссылка КАК ДокументСсылка,
	|	ЕСТЬNULL(ДеталиДокумента.ТипРасчетов, ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.ПустаяСсылка)) КАК ТипРасчетов,
	|	ПредставлениеСсылки(ЕСТЬNULL(ДеталиДокумента.ТипРасчетов, ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.ПустаяСсылка))) КАК ПредставлениеТипРасчетов,
	|	ДокументСверки.Номер КАК Номер,
	|	ДокументСверки.Дата КАК Дата,
	|
	|	ДокументСверки.Организация КАК Организация,
	|	ДокументСверки.Контрагент КАК Контрагент,
	|	ДокументСверки.Партнер КАК Партнер,
	|	ЕСТЬNULL(ДокументСверки.Партнер.НаименованиеПолное, """") КАК ПредставлениеПартнера,
	|
	|	ДокументСверки.ЕстьРасхождения КАК ЕстьРасхождения,
	|	ДокументСверки.НачалоПериода КАК НачалоПериода,
	|	ДокументСверки.КонецПериода КАК КонецПериода,
	|
	|	ВЫБОР КОГДА ДокументСверки.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|		ТОГДА ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование
	|		ИНАЧЕ ТаблицаОтветственныеЛица.РуководительНаименование
	|	КОНЕЦ КАК ФИООтветственногоЛица,
	|	ВЫБОР КОГДА ДокументСверки.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|		ТОГДА ТаблицаОтветственныеЛица.ГлавныйБухгалтерДолжность
	|		ИНАЧЕ ТаблицаОтветственныеЛица.РуководительДолжность
	|	КОНЕЦ КАК ДолжностьОтветственногоЛица,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДокументСверки.Контрагент) = ТИП(Справочник.Организации)
	|		ТОГДА 
	|			ВЫБОР КОГДА ДокументСверки.ОтветственноеЛицоОрганизацииКонтрагента = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|				ТОГДА ТаблицаОтветственныеЛицаОрганизацииКонтрагента.ГлавныйБухгалтерОрганизацииКонтрагентаНаименование
	|				ИНАЧЕ ТаблицаОтветственныеЛицаОрганизацииКонтрагента.РуководительОрганизацииКонтрагентаНаименование
	|			КОНЕЦ
	|		ИНАЧЕ ДокументСверки.ФИОРуководителяКонтрагента
	|	КОНЕЦ КАК ФИОРуководителяКонтрагента,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДокументСверки.Контрагент) = ТИП(Справочник.Организации)
	|		ТОГДА 
	|			ВЫБОР КОГДА ДокументСверки.ОтветственноеЛицоОрганизацииКонтрагента = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|				ТОГДА ТаблицаОтветственныеЛицаОрганизацииКонтрагента.ГлавныйБухгалтерОрганизацииКонтрагентаДолжность
	|				ИНАЧЕ ТаблицаОтветственныеЛицаОрганизацииКонтрагента.РуководительОрганизацииКонтрагентаДолжность
	|			КОНЕЦ
	|		ИНАЧЕ ДокументСверки.ДолжностьРуководителяКонтрагента
	|	КОНЕЦ КАК ДолжностьРуководителяКонтрагента,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.ЕстьОбороты, ЛОЖЬ) КАК ЕстьОбороты,
	|	ЕСТЬNULL(ДеталиДокумента.ФинансовыеИнструменты, ЛОЖЬ) КАК ФинансовыеИнструменты,
	|
	|	ЕСТЬNULL(ДеталиДокумента.ОбъектГруппировки, Неопределено) КАК ОбъектГруппировки,
	|	ПредставлениеСсылки(ЕСТЬNULL(ДеталиДокумента.ОбъектГруппировки, """")) КАК ПредставлениеОбъектГруппировки,
	|
	|	ЕСТЬNULL(ДеталиДокумента.РасчетныйДокумент, Неопределено) КАК РасчетныйДокумент,
	|	ЕСТЬNULL(ДеталиДокумента.НаименованиеДокумента, """") КАК НаименованиеДокумента,
	|	ЕСТЬNULL(ДеталиДокумента.НомерДокумента, """") КАК НомерДокумента,
	|	ЕСТЬNULL(ДеталиДокумента.ДатаДокумента, ДАТАВРЕМЯ(1,1,1)) КАК ДатаДокумента,
	|	ЕСТЬNULL(ДеталиДокумента.СвязанныеДокументы, """") КАК СвязанныеДокументы,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
	|	ПредставлениеСсылки(ЕСТЬNULL(ДеталиДокумента.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))) КАК ПредставлениеВалюта,
	|	ЕСТЬNULL(ДеталиДокумента.СверкаВВалютеРегл, ЛОЖЬ) КАК СверкаВВалютеРегл,
	|	ДокументСверки.Валюта КАК ВалютаСверки,
	|
	|	ЕСТЬNULL(ДеталиДокумента.ВалютаДокумента, ДокументСверки.Организация.ВалютаРегламентированногоУчета) КАК ВалютаДокумента,
	|	ПредставлениеСсылки(ЕСТЬNULL(ДеталиДокумента.ВалютаДокумента, ДокументСверки.Организация.ВалютаРегламентированногоУчета)) КАК ПредставлениеВалютаДокумента,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.НачальноеСальдоДт, 0) КАК НачальноеСальдоДт,
	|	ЕСТЬNULL(ДеталиДокумента.НачальноеСальдоКт, 0) КАК НачальноеСальдоКт,
	|	ЕСТЬNULL(ДеталиДокумента.ОборотДт, 0) КАК ОборотДт,
	|	ЕСТЬNULL(ДеталиДокумента.ОборотДт, 0) КАК ОборотКт,
	|	ЕСТЬNULL(ДеталиДокумента.КонечноеСальдоДт, 0) КАК КонечноеСальдоДт,
	|	ЕСТЬNULL(ДеталиДокумента.КонечноеСальдоКт, 0) КАК КонечноеСальдоКт,
	|
	|	ЕСТЬNULL(ДеталиДокумента.НачальноеСальдоДтКонтрагент, 0) КАК НачальноеСальдоДтКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.НачальноеСальдоКтКонтрагент, 0) КАК НачальноеСальдоКтКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.ОборотДтКонтрагент, 0) КАК ОборотДтКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.ОборотКтКонтрагент, 0) КАК ОборотКтКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.КонечноеСальдоДтКонтрагент, 0) КАК КонечноеСальдоДтКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.КонечноеСальдоКтКонтрагент, 0) КАК КонечноеСальдоКтКонтрагент,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДебет, 0) КАК СуммаДебет,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаКредит, 0) КАК СуммаКредит,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДебетКонтрагент, 0) КАК СуммаДебетКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаКредитКонтрагент, 0) КАК СуммаКредитКонтрагент,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДокумента, 0) КАК СуммаДокумента,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДебетКонтрагент + ДеталиДокумента.СуммаКредитКонтрагент, 0) КАК СуммаДокументаКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДолг, 0) КАК СуммаДолг,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаАванс, 0) КАК СуммаАванс,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.НачальноеСальдоДолгКонтрагент, 0) КАК НачальноеСальдоДолгКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.НачальноеСальдоАвансКонтрагент, 0) КАК НачальноеСальдоАвансКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДолгКонтрагент, 0) КАК СуммаДолгКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаАвансКонтрагент, 0) КАК СуммаАвансКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.КонечноеСальдоДолгКонтрагент, 0) КАК КонечноеСальдоДолгКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.КонечноеСальдоАвансКонтрагент, 0) КАК КонечноеСальдоАвансКонтрагент,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.ПорядокРасчетов, 0) КАК ПорядокРасчетов
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_5_11 КАК ДокументСверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ДокументСверки.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛицаОрганизацииКонтрагента КАК ТаблицаОтветственныеЛицаОрганизацииКонтрагента
	|		ПО ДокументСверки.Ссылка = ТаблицаОтветственныеЛицаОрганизацииКонтрагента.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДетальныеЗаписиДокумента КАК ДеталиДокумента
	|		ПО ДокументСверки.Ссылка = ДеталиДокумента.Ссылка
	|ГДЕ
	|	ДокументСверки.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	НаименованиеДокумента,
	|	НомерДокумента,
	|	ПорядокТипаСуммы
	|
	|ИТОГИ
	|	МАКСИМУМ(НачальноеСальдоДт),
	|	МАКСИМУМ(НачальноеСальдоКт),
	|	МАКСИМУМ(ОборотДт),
	|	МАКСИМУМ(ОборотДт),
	|	МАКСИМУМ(КонечноеСальдоДт),
	|	МАКСИМУМ(КонечноеСальдоКт),
	|	
	|	МАКСИМУМ(ФИООтветственногоЛица),
	|	МАКСИМУМ(ДолжностьОтветственногоЛица),
	|	МАКСИМУМ(ФИОРуководителяКонтрагента),
	|	МАКСИМУМ(ДолжностьРуководителяКонтрагента),
	|	МАКСИМУМ(ПредставлениеВалюта),
	|	МАКСИМУМ(ВалютаДокумента),
	|	МАКСИМУМ(ПредставлениеВалютаДокумента),
	|	МАКСИМУМ(ПредставлениеОбъектГруппировки),
	|	МАКСИМУМ(ФинансовыеИнструменты),
	|	МАКСИМУМ(ЕстьОбороты),
	|	МАКСИМУМ(ЕстьРасхождения),
	|
	|	СУММА(СуммаДебет),
	|	СУММА(СуммаКредит),
	|	
	|	СУММА(СуммаДебетКонтрагент),
	|	СУММА(СуммаКредитКонтрагент),
	|	СУММА(СуммаДолгКонтрагент),
	|	СУММА(СуммаАвансКонтрагент),
	|	
	|	СУММА(СуммаДокумента),
	|	СУММА(СуммаДолг),
	|	СУММА(СуммаАванс)
	|ПО
	|	ДокументСсылка,
	|	ТипРасчетов,
	|	Валюта";
	#КонецОбласти
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура РасшифроватьНастройкуДетализации(НастройкиПечати)
	
	ГруппировкаРасчетов = Новый Массив;
	ГруппировкаРасчетов.Добавить("Валюта");
	ГруппировкаРасчетов.Добавить("Договор");
	ГруппировкаРасчетов.Добавить("ОбъектРасчетов");
	
	ГруппировкаФинИнструментов = Новый Массив;
	ГруппировкаФинИнструментов.Добавить("Валюта");
	ГруппировкаФинИнструментов.Добавить("Договор");
	
КонецПроцедуры

Процедура ОчиститьДебетКредит(Область)
	
	ПараметрыОбласти = Новый Структура("СуммаДебет,СуммаКредит,СуммаДебетКонтрагент,СуммаКредитКонтрагент");
	ЗаполнитьЗначенияСвойств(ПараметрыОбласти, Область.Параметры);
	
	Область.Параметры.СуммаДебет = 0;
	Область.Параметры.СуммаКредит = 0;
	Если ПараметрыОбласти.СуммаДебетКонтрагент <> Неопределено Тогда 
		Область.Параметры.СуммаДебетКонтрагент = 0;
	КонецЕсли;
	Если ПараметрыОбласти.СуммаКредитКонтрагент <> Неопределено Тогда 
		Область.Параметры.СуммаКредитКонтрагент = 0;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру данными о получателях печатных форм.
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ, описание которого готовится.
// 	Номер - Строка - Входящий номер документа.
// 	Дата - Дата - Входящая дата документа.
// 	ПредставлениеДокумента - Строка - представление входящего документа.
// 
// Возвращаемое значение:
// 	Строка - Описание документа
// 
Функция ОписаниеРасчетногоДокумента(ДокументСсылка, Номер, Дата, ПредставлениеДокумента) Экспорт
	
	ПредставленияДокументов = ПредставленияДокументов();
	ВходящиеДокументы = ВходящиеДокументы();
	
	ОписаниеДокумента = Новый Структура("НомерДокумента,ДатаДокумента,НаименованиеДокумента","","","");

	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ОписаниеДокумента.НаименованиеДокумента = Строка(ДокументСсылка);
		
	ИначеЕсли ДокументСсылка <> Неопределено И НЕ ДокументСсылка.Пустая() Тогда

		ИмяДокумента = ДокументСсылка.Метаданные().Имя;
		Если НЕ ЗначениеЗаполнено(ПредставлениеДокумента) Тогда
			ПредставлениеДокумента = "";
			ПредставленияДокументов.Свойство(ИмяДокумента, ПредставлениеДокумента);
		КонецЕсли;
		Если ИмяДокумента = "СписаниеБезналичныхДенежныхСредств" Тогда
			НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер,, Истина);
		ИначеЕсли ВходящиеДокументы.Свойство(ИмяДокумента) Тогда
			НомерНаПечать = УбратьЛидирующиеНули(Номер);
		Иначе
			НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Номер) Тогда
			ОписаниеДокумента.НомерДокумента = НомерНаПечать;
		КонецЕсли;
		Если ЗначениеЗаполнено(Дата) Тогда
			ОписаниеДокумента.ДатаДокумента = Дата;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПредставлениеДокумента) Тогда
			ОписаниеДокумента.НаименованиеДокумента = ПредставлениеДокумента;
		КонецЕсли;
		
	КонецЕсли;

	Возврат ОписаниеДокумента;

КонецФункции

Функция ПредставленияДокументов()
	
	ВидыДокументовКонтрагента = Новый Структура;
	
	ВидыДокументовКонтрагента.Вставить("АвансовыйОтчет",                        НСтр("ru='Приходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("АктВыполненныхРабот",                   НСтр("ru='Акт выполненных работ'"));
	ВидыДокументовКонтрагента.Вставить("ВводОстатков",                          НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("ВводОстатковВзаиморасчетов",            НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("ВводОстатковПоФинансовымИнструментам",  НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("ВзаимозачетЗадолженности",              НСтр("ru='Взаимозачет задолженности'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровМеждуОрганизациями",      НСтр("ru='Возврат товаров'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровОтКлиента",               НСтр("ru='Возврат товаров'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровПоставщику",              НСтр("ru='Возврат товаров'"));
	ВидыДокументовКонтрагента.Вставить("ВыкупВозвратнойТарыКлиентом",           НСтр("ru='Выкуп возвратной тары'"));
	ВидыДокументовКонтрагента.Вставить("ВыкупВозвратнойТарыУПоставщика",        НСтр("ru='Выкуп возвратной тары'"));
	ВидыДокументовКонтрагента.Вставить("ВыкупПринятыхНаХранениеТоваров",        НСтр("ru='Закупка'"));
	ВидыДокументовКонтрагента.Вставить("ВыкупТоваровХранителем",                НСтр("ru='Продажа'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаЗадолженностиПоФинансовымИнструментам", НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаПриобретения",             НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРеализации",               НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРегистров",                НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("НачисленияКредитовИДепозитов",          НСтр("ru='Начисление'"));
	ВидыДокументовКонтрагента.Вставить("ОперацияПоПлатежнойКарте",              НСтр("ru='Эквайринговая операция'"));
	ВидыДокументовКонтрагента.Вставить("ОперацияПоЯндексКассе",                 НСтр("ru='Эквайринговая операция'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",                     НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионераОСписании",            НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",                        НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОЗакупках",               НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",               НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",     НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациямиОСписании",НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",     НСтр("ru='Передача товаров'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеБезналичныхДенежныхСредств", НСтр("ru='Платежное поручение'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеТоваровУслуг",              НСтр("ru='Закупка'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеУслугПрочихАктивов",        НСтр("ru='Акт'"));
	ВидыДокументовКонтрагента.Вставить("ПриходныйКассовыйОрдер",                НСтр("ru='Приходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("РасходныйКассовыйОрдер",                НСтр("ru='Расходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("РасчетКурсовыхРазниц",                  НСтр("ru='Курсовые разницы'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг",                НСтр("ru='Продажа'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияУслугПрочихАктивов",          НСтр("ru='Акт'"));
	ВидыДокументовКонтрагента.Вставить("СписаниеБезналичныхДенежныхСредств",    НСтр("ru='Платежное поручение'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаЗадолженности",            НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураВыданный",                   НСтр("ru='Счет-фактура'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученный",                 НСтр("ru='Счет-фактура'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученныйНалоговыйАгент",   НСтр("ru='Счет-фактура'"));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт",            НСтр("ru='Таможенная декларация'"));

	
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции

Функция ВходящиеДокументы()
	
	ВидыДокументовКонтрагента = Новый Структура;
	
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровМеждуОрганизациями");
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровОтКлиента");
	ВидыДокументовКонтрагента.Вставить("ВыкупВозвратнойТарыУПоставщика");
	ВидыДокументовКонтрагента.Вставить("КорректировкаПриобретения");
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера");
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионераОСписании");
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту");
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании");
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями");
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациямиОСписании");
	ВидыДокументовКонтрагента.Вставить("ПоступлениеБезналичныхДенежныхСредств");
	ВидыДокументовКонтрагента.Вставить("ПриобретениеТоваровУслуг");
	ВидыДокументовКонтрагента.Вставить("ПриобретениеУслугПрочихАктивов");
	ВидыДокументовКонтрагента.Вставить("ПриходныйКассовыйОрдер");
	ВидыДокументовКонтрагента.Вставить("СписаниеБезналичныхДенежныхСредств");
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученный");
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученныйНалоговыйАгент");
	
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции

Функция УбратьЛидирующиеНули(Строка)
	
	Рез = СокрЛП(Строка);
	Пока Лев(Рез, 1) = "0" ИЛИ Лев(Рез, 1) = "-" Цикл 
		Рез = Сред(Рез, 2);
	КонецЦикла;
	Возврат Рез;
	
КонецФункции

Функция ДокументыНаПечать(МассивОбъектов)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	| 	ВложенныйЗапрос.МоментВремени КАК МоментВремени
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыПоДокументу.Ссылка КАК Ссылка,
	|		РасчетыПоДокументу.Ссылка.МоментВремени КАК МоментВремени
	|	ИЗ
	|		Документ.СверкаВзаиморасчетов2_5_11.ИтоговыеЗаписи КАК РасчетыПоДокументу
	|	ГДЕ
	|		РасчетыПоДокументу.Ссылка В (&ДокументыСверки)) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	| 	ВложенныйЗапрос.МоментВремени";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДокументыСверки", МассивОбъектов);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Возвращает данные для формирования печатной формы УПД
//
// Параметры:
//	ПараметрыПечати - Структура - параметры.
//	МассивОбъектов - Массив из ДокументСсылка.СверкаВзаиморасчетов2_5_11 - ссылки на документы, по которым необходимо
//																		получить данные.
//
// Возвращаемое значение:
//	Структура - коллекция данных, используемая при печати УПД, содержащая следующие свойства:
//		* РезультатПоШапке - РезультатЗапроса - общие данные накладной.
//		* РезультатПоТабличнойЧасти - РезультатЗапроса - данные табличной части накладной.
//
Функция ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	///////////////////////////////////////////////////////////
	// Общие реквизиты.
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.Дата КАК ДатаДокумента,
	|	ДанныеДокументов.РежимСверкиИтоговВзаиморасчетов КАК РежимСверкиИтоговВзаиморасчетов,
	|	ДанныеДокументов.Статус КАК Статус,
	|
	///////////////////////////////////////////////////////////
	// Акт сверки взаимных расчетов, информация отправителя (Документ).
	//
	// Дата начала периода сверки взаимных расчетов. ДатаНачалаПериодаСверки = ДатаНачПер.
	|	ДанныеДокументов.НачалоПериода КАК ДатаНачалаПериодаСверки,
	// Дата окончания периода сверки взаимных расчетов. ДатаОкончанияПериодаСверки = ДатаОкПер.
	|	ДанныеДокументов.КонецПериода КАК ДатаОкончанияПериодаСверки,
	// Номер акта сверки. НомерДокумента = НомерАкт.
	|	ДанныеДокументов.Номер КАК НомерДокумента,
	///////////////////////////////////////////////////////////
	// Сведения документа, кроме сведений таблицы акта сверки взаимных расчетов (СвДокКрАкт).
	// Код валюты. КодВалюты = КодОКВ
	|	ДанныеДокументов.Валюта.Код КАК КодВалюты,
	// Сведения об отправителе. Отправитель = СвОтпр.
	|	ДанныеДокументов.Организация КАК Отправитель,
	// Сведения о получателе. Получатель = СвПол.
	|	ДанныеДокументов.Контрагент КАК Получатель,
	|
	///////////////////////////////////////////////////////////
	// Сведения таблицы акта сверки взаимных расчетов (ТаблАкт).
	// Сумма сальдо на начало периода сверки дебет. СальдоНаНачалоПериодаДебет = СальдоНачДеб.
	|	СУММА(ЕСТЬNULL(ИтоговыеЗаписиДокумента.НачальноеСальдоДт, 0)) КАК СальдоНаНачалоПериодаДебет,
	// Сумма сальдо на начало периода сверки кредит. СальдоНаНачалоПериодаКредит = СальдоНачКр.
	|	СУММА(ЕСТЬNULL(ИтоговыеЗаписиДокумента.НачальноеСальдоКт, 0)) КАК СальдоНаНачалоПериодаКредит,
	// Обороты по дебету. ОборотПоДебету = ОборотДеб.
	|	СУММА(ЕСТЬNULL(ИтоговыеЗаписиДокумента.ОборотДт, 0)) КАК ОборотПоДебету,
	// Обороты по кредиту. ОборотПоКредиту = ОборотКр.
	|	СУММА(ЕСТЬNULL(ИтоговыеЗаписиДокумента.ОборотКт, 0)) КАК ОборотПоКредиту,
	// Обороты по кредиту. СальдоНаКонецПериодаДебет = СальдоКонДеб.
	|	СУММА(ЕСТЬNULL(ИтоговыеЗаписиДокумента.КонечноеСальдоДт, 0)) КАК СальдоНаКонецПериодаДебет,
	// Сумма сальдо на конец периода сверки кредит. СальдоНаКонецПериодаКредит = СальдоКонКр.
	|	СУММА(ЕСТЬNULL(ИтоговыеЗаписиДокумента.КонечноеСальдоКт, 0)) КАК СальдоНаКонецПериодаКредит
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_5_11 КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов2_5_11.ИтоговыеЗаписи КАК ИтоговыеЗаписиДокумента
	|		ПО ДанныеДокументов.Ссылка = ИтоговыеЗаписиДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокументов.Ссылка В (&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Валюта,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.Контрагент,
	|	ДанныеДокументов.НачалоПериода,
	|	ДанныеДокументов.КонецПериода,
	|	ДанныеДокументов.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////
	// Сведения таблицы акта сверки взаимных расчетов (ТаблАкт).
	|ВЫБРАТЬ
	// Сумма сальдо на начало периода сверки дебет. СальдоНаНачалоПериодаДебет = СальдоНачДеб.
	|	СУММА(ИтоговыеЗаписи.НачальноеСальдоДт) КАК СальдоНаНачалоПериодаДебет,
	// Сумма сальдо на начало периода сверки кредит. СальдоНаНачалоПериодаКредит = СальдоНачКр.
	|	СУММА(ИтоговыеЗаписи.НачальноеСальдоКт) КАК СальдоНаНачалоПериодаКредит,
	// Обороты по дебету. ОборотПоДебету = ОборотДеб.
	|	СУММА(ИтоговыеЗаписи.ОборотДт) КАК ОборотПоДебету,
	// Обороты по кредиту. ОборотПоКредиту = ОборотКр.
	|	СУММА(ИтоговыеЗаписи.ОборотКт) КАК ОборотПоКредиту,
	// Обороты по кредиту. СальдоНаКонецПериодаДебет = СальдоКонДеб.
	|	СУММА(ИтоговыеЗаписи.КонечноеСальдоДт) КАК СальдоНаКонецПериодаДебет,
	// Сумма сальдо на конец периода сверки кредит. СальдоНаКонецПериодаКредит = СальдоКонКр.
	|	СУММА(ИтоговыеЗаписи.КонечноеСальдоКт) КАК СальдоНаКонецПериодаКредит,
	|
	///////////////////////////////////////////////////////////
	// Сведения о договоре (ДогСв).
	// Идентификатор договора в учетной системе отправителя. ИдентификаторДоговора = ИдДог.
	|	ИтоговыеЗаписи.Договор КАК ИдентификаторДоговора,
	// Описание договора в учетной системе отправителя. ОписаниеДоговора = ОписТипДог.
	|	ИтоговыеЗаписи.НаименованиеДоговора КАК ОписаниеДоговора,
	// Номер договора. НомерДоговора = НомДог.
	|	ИтоговыеЗаписи.НомерДоговора КАК НомерДоговора,
	// Дата договора (дата принятия договора оферты). ДатаДоговора = ДатаДог.
	|	ИтоговыеЗаписи.ДатаДоговора КАК ДатаДоговора,
	|
	///////////////////////////////////////////////////////////
	// Сведения о документе.
	// Наименование документа.
	|	ЕСТЬNULL(ДетальныеЗаписи.НаименованиеДокумента, """") КАК НаименованиеДокумента,
	// Номер документа. НомерДокумента = НомДок.
	|	ЕСТЬNULL(ДетальныеЗаписи.НомерДокумента, """") КАК НомерДокумента,
	// Дата документа. ДатаДокумента = ДатаДок.
	|	ЕСТЬNULL(ДетальныеЗаписи.ДатаДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаДокумента,
	// Идентификатор документа в учетной системе отправителя. ИдентификаторДокумента = ИдДок.
	|	ЕСТЬNULL(ДетальныеЗаписи.РасчетныйДокумент, НЕОПРЕДЕЛЕНО) КАК ИдентификаторДокумента,
	// Дополнительная информация. ДопИнформация = ДопИнф.
	|	"""" КАК ДопИнформация,
	|
	///////////////////////////////////////////////////////////
	// Сведения об операции (СвОпер)
	// Номер строки таблицы "Сведения об операции". ПорядковыйНомер = НомСтр.
	|	ЕСТЬNULL(ДетальныеЗаписи.НомерСтроки, 0) КАК ПорядковыйНомер,
	// Дата операции. ДатаОперации = ДатаОпер.
	|	ЕСТЬNULL(ДетальныеЗаписи.ДатаДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаОперации,
	// Наименование операции. НаименованиеОперации = НаимОпер.
	|	ЕСТЬNULL(ДетальныеЗаписи.НаименованиеДокумента, """") КАК НаименованиеОперации,
	// Сумма дебета операции. СуммаДебет = СумДебет.
	|	СУММА(ЕСТЬNULL(ДетальныеЗаписи.СуммаДебет, 0)) КАК СуммаДебет,
	// Сумма кредита операции. СуммаКредит = СумКредит.
	|	СУММА(ЕСТЬNULL(ДетальныеЗаписи.СуммаКредит, 0)) КАК СуммаКредит
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_5_11.ИтоговыеЗаписи КАК ИтоговыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов2_5_11.ДетальныеЗаписи КАК ДетальныеЗаписи
	|		ПО ИтоговыеЗаписи.Ссылка = ДетальныеЗаписи.Ссылка
	|		И ИтоговыеЗаписи.ТипРасчетов = ДетальныеЗаписи.ТипРасчетов
	|		И ИтоговыеЗаписи.Партнер = ДетальныеЗаписи.Партнер
	|		И ИтоговыеЗаписи.Договор = ДетальныеЗаписи.Договор
	|		И ИтоговыеЗаписи.ОбъектРасчетов = ДетальныеЗаписи.ОбъектРасчетов
	|ГДЕ
	|	ИтоговыеЗаписи.Ссылка В (&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговыеЗаписи.Ссылка,
	|	ИтоговыеЗаписи.Договор,
	|	НомерДокумента,
	|	ДетальныеЗаписи.НомерСтроки,
	|	ВЫРАЗИТЬ(ИтоговыеЗаписи.Договор КАК Справочник.ДоговорыКонтрагентов),
	|	ИтоговыеЗаписи.НомерДоговора,
	|	ИтоговыеЗаписи.ДатаДоговора,
	|	ИтоговыеЗаписи.НаименованиеДоговора,
	|	ДетальныеЗаписи.НомерДокумента,
	|	ДетальныеЗаписи.ДатаДокумента,
	|	ДетальныеЗаписи.НаименованиеДокумента,
	|	ДетальныеЗаписи.РасчетныйДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИтоговыеЗаписи.Договор,
	|	РасчетныйДокумент,
	|	ПорядковыйНомер
	|;";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Выполнить();
	
	МассивРезультатов			= Запрос.ВыполнитьПакет();
	РезультатПоШапке			= МассивРезультатов[0];
	РезультатПоТабличнойЧасти	= МассивРезультатов[1];
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("РезультатПоШапке",			РезультатПоШапке);
	ДанныеДляПечати.Вставить("РезультатПоТабличнойЧасти",	РезультатПоТабличнойЧасти);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона:
//         * Имя            - Строка - Уникальное имя общего реквизита.
//         * Представление  - Строка - Представление общего реквизита.
//         * Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         * Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения:
//         * Имя            - Строка - Уникальное имя вложения.
//         * Представление  - Строка - Представление варианта.
//         * ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      * Ключ     - Строка - имя реквизита в шаблоне;
//      * Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      * Ключ     - Строка - имя реквизита в шаблоне;
//      * Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      * Ключ     - Строка - имя вложения в шаблоне;
//      * Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS:
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма:
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти 

#Область ФормаПомощникаСоздания

#Область СозданиеДокументов

Процедура СоздатьДокументы(Параметры, АдресХранилища = "") Экспорт
	
	ТекущаяДата  = ТекущаяДатаСеанса();
	ТекущееВремя = Час(ТекущаяДата) * 3600 + Минута(ТекущаяДата) * 60 + Секунда(ТекущаяДата);
	
	ДатаДокументов = Параметры.ДатаДокументов;
	ТаблицаРасчетов = Параметры.ТаблицаРасчетов;
	ОтработанныеДокументы = Новый Массив;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ПериодСверки", Параметры.ПериодСверки);
	ДанныеЗаполнения.Вставить("ДоговорыБезОборотов", Параметры.ДоговорыБезОборотов);
	ДанныеЗаполнения.Вставить("РазбиватьПоТипамРасчетов", Параметры.РазбиватьПоТипамРасчетов);
	ДанныеЗаполнения.Вставить("РазбиватьПоПартнерам", Параметры.РазбиватьПоПартнерам);
	ДанныеЗаполнения.Вставить("РазбиватьПоДоговорам", Параметры.РазбиватьПоДоговорам);
	ДанныеЗаполнения.Вставить("РежимСверкиИтоговВзаиморасчетов", Параметры.РежимСверкиИтоговВзаиморасчетов);
	ДанныеЗаполнения.Вставить("СверкаВВалюте", Параметры.СверкаВВалюте);
	ДанныеЗаполнения.Вставить("УстанавливатьНовыйНомер", Ложь);
	
	КомпоновщикОтбор = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИнициализироватьКомпоновщикНастроек(КомпоновщикОтбор,,Параметры.НастройкиОтбора);
	МассивВсехДокументовСверки = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаРасчетов Цикл

		ДанныеЗаполнения.Вставить("ДанныеДокумента", СтрокаТаблицы);
		ДанныеЗаполнения.Вставить("НастройкиОтбора", КомпоновщикОтбор.ПолучитьНастройки());
		
		Если СтрокаТаблицы.СоздаватьДокумент ИЛИ СтрокаТаблицы.ИзменятьДокумент = "УдалитьСоздатьНовый" Тогда
			
			ДокументОбъект = СоздатьДокумент();
			
			ДокументОбъект.Дата = ДатаДокументов + ТекущееВремя;
			
			ДанныеЗаполнения.УстанавливатьНовыйНомер = Истина;
			ДанныеЗаполнения.Вставить("ДанныеДокумента", СтрокаТаблицы);
			ЗаполнитьПровестиДокументОбъект(ДокументОбъект, ДанныеЗаполнения);
			
			ДобавитьВПротоколВыполнения(ДокументОбъект.Ссылка, "Создание", ОтработанныеДокументы); 
			МассивВсехДокументовСверки.Добавить(ДокументОбъект.Ссылка);
			
		КонецЕсли;
		
		Если СтрокаТаблицы.СуществуютДокументы Тогда

			ДокументОбъект = СтрокаТаблицы.ДокументСверки.ПолучитьОбъект();
			
			Если СтрокаТаблицы.ИзменятьДокумент = "УдалитьСоздатьНовый" Тогда
				
				Попытка
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
					ДобавитьВПротоколВыполнения(ДокументОбъект.Ссылка, "ПометкаНаУдаление", ОтработанныеДокументы);
				Исключение
					ТекстОшибки    = НСтр("ru='Не удалось пометить на удаление %Документ%. %ОписаниеОшибки%'");
					ТекстОшибки    = СтрЗаменить(ТекстОшибки, "%Документ%",	ДокументОбъект);
					ТекстОшибки    = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект.Ссылка);
				КонецПопытки;
				
			ИначеЕсли СтрокаТаблицы.ИзменятьДокумент = "Перезаполнять" Тогда
				
				МассивВсехДокументовСверки.Добавить(СтрокаТаблицы.ДокументСверки);
				ДанныеЗаполнения.УстанавливатьНовыйНомер = Ложь;
				ЗаполнитьПровестиДокументОбъект(ДокументОбъект, ДанныеЗаполнения);
				
				ДобавитьВПротоколВыполнения(ДокументОбъект.Ссылка, "Перезаполнение", ОтработанныеДокументы);
				
			ИначеЕсли СтрокаТаблицы.ИзменятьДокумент = "НеИзменять" Тогда
				
				МассивВсехДокументовСверки.Добавить(СтрокаТаблицы.ДокументСверки);
				ДобавитьВПротоколВыполнения(ДокументОбъект.Ссылка, "НеИзменять", ОтработанныеДокументы);
				
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("МассивВсехДокументовСверки", МассивВсехДокументовСверки);
	Результат.Вставить("ОтработанныеДокументы", ОтработанныеДокументы);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Заполняет структуру данными о получателях печатных форм.
// Параметры:
// 	ДокументОбъект - ДокументОбъект.СверкаВзаиморасчетов2_5_11 - Объект сверки для заполнения.
// 	ДанныеЗаполнения - Структура - Структура ключевых реквизитов сверки:
//     * ДанныеДокумента - Структура - Данные шапки сверки:
//       * Организация - СправочникСсылка.Организации - Организация шапки.
//       * ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - Тип расчетов.
//       * Партнер - СправочникСсылка.Партнеры - Партнер шапки.
//       * Контрагент - СправочникСсылка.Контрагенты - Контрагент шапки.
//       * Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор шапки.
//     * ПериодСверки - Структура - Структура периода сверки:
//       * ДатаНачала - Дата - Начало периода сверки.
//       * ДатаОкончания - Дата - Конец периода сверки.
//
Процедура ЗаполнитьПровестиДокументОбъект(ДокументОбъект, ДанныеЗаполнения)
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("Организация",              ДанныеЗаполнения.ДанныеДокумента.Организация);
	ДанныеДокумента.Вставить("ТипРасчетов",              ДанныеЗаполнения.ДанныеДокумента.ТипРасчетов);
	ДанныеДокумента.Вставить("Партнер",                  ДанныеЗаполнения.ДанныеДокумента.Партнер);
	ДанныеДокумента.Вставить("Контрагент",               ДанныеЗаполнения.ДанныеДокумента.Контрагент);
	ДанныеДокумента.Вставить("Договор",                  ДанныеЗаполнения.ДанныеДокумента.Договор);
	ДанныеДокумента.Вставить("Валюта",                   ДанныеЗаполнения.ДанныеДокумента.ВалютаСверки);
	ДанныеДокумента.Вставить("НачалоПериода",            ДанныеЗаполнения.ПериодСверки.ДатаНачала);
	ДанныеДокумента.Вставить("КонецПериода",             ДанныеЗаполнения.ПериодСверки.ДатаОкончания);
	ДанныеДокумента.Вставить("Статус",                   Перечисления.СтатусыСверокВзаиморасчетов.Создана);
	ДанныеДокумента.Вставить("НастройкиОтбора",          ДанныеЗаполнения.НастройкиОтбора);
	ДанныеДокумента.Вставить("ДоговорыБезОборотов",      ДанныеЗаполнения.ДоговорыБезОборотов);
	ДанныеДокумента.Вставить("РазбиватьПоТипамРасчетов", ДанныеЗаполнения.РазбиватьПоТипамРасчетов);
	ДанныеДокумента.Вставить("РазбиватьПоПартнерам",     ДанныеЗаполнения.РазбиватьПоПартнерам);
	ДанныеДокумента.Вставить("РазбиватьПоДоговорам",     ДанныеЗаполнения.РазбиватьПоДоговорам);
	ДанныеДокумента.Вставить("СверкаВВалюте",            ДанныеЗаполнения.СверкаВВалюте);
	ДанныеДокумента.Вставить("РежимСверкиИтоговВзаиморасчетов", ДанныеЗаполнения.РежимСверкиИтоговВзаиморасчетов);
	
	УстановитьПривилегированныйРежим(Истина);
	ДокументОбъект.Заполнить(ДанныеДокумента);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеЗаполнения.УстанавливатьНовыйНомер Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Если ДокументОбъект.ПроверитьЗаполнение() Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       ДокументОбъект);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект.Ссылка);
		КонецПопытки;
		
	Иначе
		
		ТекстОшибки = НСтр("ru='Не удалось записать %Документ%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОбъект);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект.Ссылка);
		
	КонецЕсли;

КонецПроцедуры

// Описание
// 
// Параметры:
// 	ДокументСверки - ДокументСсылка.СверкаВзаиморасчетов2_5_11 - Описание
// 	Действие - Строка - Описание
// 	ОтработанныеДокументы - Массив из см. СтрокаПротокола -
//
Процедура ДобавитьВПротоколВыполнения(ДокументСверки, Действие, ОтработанныеДокументы)
	
	СтрокаПротокола = СтрокаПротокола();
	СтрокаПротокола.ДокументСверки = ДокументСверки;
	СтрокаПротокола.Действие = Действие;
	
	ОтработанныеДокументы.Добавить(СтрокаПротокола);
	
КонецПроцедуры

// Строка протокола.
// 
// Возвращаемое значение:
//  Структура из КлючИЗначение - Описание:
// * Действие - Строка -
// * ДокументСверки - ДокументСсылка.СверкаВзаиморасчетов2_5_11 -
Функция СтрокаПротокола() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ДокументСверки", ПустаяСсылка());
	Результат.Вставить("Действие","");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПометкаНаУдаление

Процедура УстановитьПометкуНаУдаление(Параметры, АдресХранилища = "") Экспорт
	
	Для Каждого Ссылка Из Параметры.ВыделенныеДокументы Цикл
		Объект = Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(НЕ Объект.ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормаДокумента

Процедура РаспределениеРасчетовПоДокументам(Параметры, АдресХранилища = "") Экспорт
	
	РаспределениеВзаиморасчетовВызовСервера.РаспределитьРасчетыФоновымЗаданием(
		Параметры.КонецПериода,
		Параметры.АналитикиРасчета);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

#Область ЗаполнитьДанныеСверкиПоРасчетам

// Параметры:
// 	ДанныеДокумента - ДокументОбъект.СверкаВзаиморасчетов2_5_11 - 
Процедура ЗаполнитьДанныеПоРасчетам(ДанныеДокумента) Экспорт
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
	СведенияОКонтрагенте  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Контрагент, ДанныеДокумента.Дата);
	КонтрагентНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование");
	
	СтруктураПредставленийУчастников = Новый Структура;
	СтруктураПредставленийУчастников.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	СтруктураПредставленийУчастников.Вставить("КонтрагентНаименование", КонтрагентНаименование);
	
	КомпоновщикОтбор = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИнициализироватьКомпоновщикНастроек(КомпоновщикОтбор);
	Если ДанныеДокумента.НастройкиОтбора <> Неопределено Тогда
		НастройкиОтбора = ДанныеДокумента.НастройкиОтбора.Получить();
		Если НастройкиОтбора <> Неопределено Тогда
			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикОтбор.Настройки.Отбор, НастройкиОтбора.Отбор);
		КонецЕсли;
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "НачалоПериода", ДанныеДокумента.НачалоПериода);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "КонецПериода", КонецДня(ДанныеДокумента.КонецПериода));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "Период", ДанныеДокумента.НачалоПериода);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ПолучатьДокументыСверки", Ложь);
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоТипамРасчетов", ДанныеДокумента.РазбиватьПоТипамРасчетов);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоПартнерам", ДанныеДокумента.РазбиватьПоПартнерам);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоДоговорам", ДанныеДокумента.РазбиватьПоДоговорам);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "СверкаВВалюте", ДанныеДокумента.СверкаВВалюте);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор.Настройки, "Организация", ДанныеДокумента.Организация);
	Если ДанныеДокумента.СверкаВВалюте Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор.Настройки, "Валюта", ДанныеДокумента.Валюта);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов")
		И ТипЗнч(ДанныеДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.Контрагент, "Партнер");
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор.Настройки, "Партнер", Партнер);
	Иначе
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор.Настройки, "Контрагент", ДанныеДокумента.Контрагент);
	КонецЕсли;
	
	Если ДанныеДокумента.ДополнительныеСвойства.Свойство("ДляОтладки") Тогда
		ДляОтладки = ДанныеДокумента.ДополнительныеСвойства.ДляОтладки;
		КомпоновщикОтбор.Настройки.ДополнительныеСвойства.Вставить("ДляОтладки", ДляОтладки);
	КонецЕсли;
	
	ТаблицаРезультатаСКД = ПолучитьВзаиморасчеты(КомпоновщикОтбор);
	
	СвернутьРасчетыПоГруппировкам(ДанныеДокумента, ТаблицаРезультатаСКД);
	
	Если КомпоновщикОтбор.Настройки.ДополнительныеСвойства.Свойство("ДляОтладки") Тогда
		ДляОтладки = КомпоновщикОтбор.Настройки.ДополнительныеСвойства.ДляОтладки;
		ДанныеДокумента.ДополнительныеСвойства.Вставить("ДляОтладки", ДляОтладки);
		КомпоновщикОтбор.Настройки.ДополнительныеСвойства.Удалить("ДляОтладки");
	КонецЕсли;
	
КонецПроцедуры

Процедура СвернутьРасчетыПоГруппировкам(ДанныеДокумента, ТаблицаВзаиморасчетов)
	
	ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеДокумента.Организация);
	СверкаВВалютеРегл = ВалютаРегл = ДанныеДокумента.Валюта;
	СверкаПоДоговорам = ДанныеДокумента.РежимСверкиИтоговВзаиморасчетов = Перечисления.РежимСверкиИтоговВзаиморасчетов.ПоДоговорам;
	Группировки = "ТипРасчетов, Партнер, Договор, НомерДоговора, ДатаДоговора, НаименованиеДоговора";
	ПолеОбъектаРасчетов = ?(СверкаПоДоговорам,"",", ОбъектРасчетов");
	//++ Локализация
	СчетаФактуры = ПолучитьСчетаФактуры(ТаблицаВзаиморасчетов);
	НомерСФВУПД = НомерСФВУПД();
	//-- Локализация
	
	Ресурсы = Новый Соответствие;
	Ресурсы.Вставить("НачальноеСальдоДт", "НачальноеСальдоДт");
	Ресурсы.Вставить("НачальноеСальдоКт", "НачальноеСальдоКт");
	Ресурсы.Вставить("ОборотДт", "ОборотДт");
	Ресурсы.Вставить("ОборотКт", "ОборотКт");
	Ресурсы.Вставить("КонечноеСальдоДт", "КонечноеСальдоДт");
	Ресурсы.Вставить("КонечноеСальдоКт", "КонечноеСальдоКт");
	Ресурсы.Вставить("СуммаДолг", "СуммаДолг");
	Ресурсы.Вставить("СуммаАванс", "СуммаАванс");
	Ресурсы.Вставить("СуммаДебет", "СуммаДебет");
	Ресурсы.Вставить("СуммаКредит", "СуммаКредит");
	Ресурсы.Вставить("СуммаДокумента", "СуммаДокумента");
	
	РесурсыРегл = Новый Соответствие;
	РесурсыРегл.Вставить("НачальноеСальдоДт", "НачальноеСальдоДтРегл");
	РесурсыРегл.Вставить("НачальноеСальдоКт", "НачальноеСальдоКтРегл");
	РесурсыРегл.Вставить("ОборотДт", "ОборотДтРегл");
	РесурсыРегл.Вставить("ОборотКт", "ОборотКтРегл");
	РесурсыРегл.Вставить("КонечноеСальдоДт", "КонечноеСальдоДтРегл");
	РесурсыРегл.Вставить("КонечноеСальдоКт", "КонечноеСальдоКтРегл");
	РесурсыРегл.Вставить("СуммаДолг", "СуммаДолгРегл");
	РесурсыРегл.Вставить("СуммаАванс", "СуммаАвансРегл");
	РесурсыРегл.Вставить("СуммаДебет", "СуммаДебетРегл");
	РесурсыРегл.Вставить("СуммаКредит", "СуммаКредитРегл");
	РесурсыРегл.Вставить("СуммаДокумента", "СуммаДокумента");
	
	ДанныеДокумента.ИтоговыеЗаписи.Очистить();
	ДанныеДокумента.ДетальныеЗаписи.Очистить();
	
	Для Каждого СтрокаРасчетов Из ТаблицаВзаиморасчетов Цикл
		
		Если СтрокаРасчетов.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом
			ИЛИ СтрокаРасчетов.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком Тогда
			ПоляГруппировки = Группировки + ПолеОбъектаРасчетов;
			ГруппировкаДетальныхЗаписей = "ТипРасчетов" + ПолеОбъектаРасчетов + ", Партнер, Договор, РасчетныйДокумент, ВалютаДокумента, СуммаДокумента, НомерДокумента, ДатаДокумента";
			ПоляСуммирования = "НачальноеСальдоДт, НачальноеСальдоКт, ОборотДт, ОборотКт, КонечноеСальдоДт, КонечноеСальдоКт";
			ПоляСуммированияДетальныхЗаписей = "СуммаДолг, СуммаАванс, СуммаДебет, СуммаКредит";
			ТЧГруппировки = ДанныеДокумента.ИтоговыеЗаписи; // ТабличнаяЧасть
			ТЧДетальныеЗаписи = ДанныеДокумента.ДетальныеЗаписи; // ТабличнаяЧасть
			
		КонецЕсли;
		
		ДанныеСумм = ЗначенияРесурсов(СтрокаРасчетов, ?(СверкаВВалютеРегл,РесурсыРегл,Ресурсы));
		
		НоваяСтрока = ТЧГруппировки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетов, ПоляГруппировки + ", " + ПоляСуммирования);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСумм);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
			НоваяСтрока.Договор = Неопределено;
		КонецЕсли;
		
		Если СтрокаРасчетов.НачальноеСальдо = 0 И ДанныеСумм.ЕстьЗаполненные Тогда
			Если НЕ СверкаВВалютеРегл
				И ТипЗнч(СтрокаРасчетов.РасчетныйДокумент) = Тип("ДокументСсылка.РасчетКурсовыхРазниц") Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТЧДетальныеЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетов, ГруппировкаДетальныхЗаписей + ", " + ПоляСуммированияДетальныхЗаписей);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСумм);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
				НоваяСтрока.Договор = Неопределено;
			КонецЕсли;
			ОписаниеДокумента = ОписаниеРасчетногоДокумента(СтрокаРасчетов.РасчетныйДокумент, СтрокаРасчетов.НомерДокумента, СтрокаРасчетов.ДатаДокумента, СтрокаРасчетов.НаименованиеПервичногоДокумента);
			НоваяСтрока.НомерДокумента = ОписаниеДокумента.НомерДокумента;
			НоваяСтрока.ДатаДокумента = ОписаниеДокумента.ДатаДокумента;
			НоваяСтрока.НаименованиеДокумента = ОписаниеДокумента.НаименованиеДокумента;
			//++ Локализация
			Отбор = Новый Структура("РасчетныйДокумент", СтрокаРасчетов.РасчетныйДокумент);
			СФДокумента = СчетаФактуры.НайтиСтроки(Отбор);
			Если СФДокумента.Количество() > 0 Тогда
				ОписаниеСчетовФактур = Новый Массив;
				Для Каждого СФ Из СФДокумента Цикл
					Если СФ.ЭтоВходящий Тогда
						НомерНаПечать = УбратьЛидирующиеНули(СФ.Номер);
					Иначе
						НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СФ.Номер);
					КонецЕсли;
					ОписаниеСФ = СтрШаблон(НСтр("ru = 'Счет-фактура №%1 от %2'"), НомерНаПечать, Формат(СФ.Дата, "ДЛФ=D"));
					ОписаниеСчетовФактур.Добавить(ОписаниеСФ);
				КонецЦикла;
				ТекстСчетовФактур = СтрСоединить(ОписаниеСчетовФактур, ",");
				НоваяСтрока.СвязанныеДокументы = ТекстСчетовФактур;
				Если СтрокаРасчетов.РасчетныйДокумент <> Неопределено И НЕ СтрокаРасчетов.РасчетныйДокумент.Пустая() Тогда
					МетаданныеДокумента = СтрокаРасчетов.РасчетныйДокумент.Метаданные(); //ОбъектМетаданных
					Если НомерСФВУПД.Свойство(МетаданныеДокумента.Имя) Тогда
						НоваяСтрока.НомерДокумента = НомерНаПечать;
						НоваяСтрока.ДатаДокумента = СФ.Дата;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//-- Локализация
		КонецЕсли;
		
	КонецЦикла;
	
	#Область ЗаполнениеТЧРасчетов
	ГрупповыеЗаписи = ДанныеДокумента.ИтоговыеЗаписи.Выгрузить();
	Если ГрупповыеЗаписи.Количество() > 0 Тогда
		ГрупповыеЗаписи.Свернуть(ПоляГруппировки, ПоляСуммирования);
	КонецЕсли;
	ДанныеДокумента.ИтоговыеЗаписи.Очистить();
	
	ДетальныеЗаписи = ДанныеДокумента.ДетальныеЗаписи.Выгрузить();
	Если ДетальныеЗаписи.Количество() > 0 Тогда
		ДетальныеЗаписи.Свернуть(ГруппировкаДетальныхЗаписей + ",СвязанныеДокументы,НаименованиеДокумента", ПоляСуммированияДетальныхЗаписей);
		ВзаимозачетАванса = Новый Массив;
		Для Каждого Запись Из ДетальныеЗаписи Цикл
			Если ТипЗнч(Запись.РасчетныйДокумент) = Тип("ДокументСсылка.ВзаимозачетЗадолженности")
				И Запись.СуммаДебет - Запись.СуммаКредит = 0 Тогда
				ВзаимозачетАванса.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Запись Из ВзаимозачетАванса Цикл
			ДетальныеЗаписи.Удалить(Запись);
		КонецЦикла;
	КонецЕсли;
	ДанныеДокумента.ДетальныеЗаписи.Загрузить(ДетальныеЗаписи);
	
	Для Каждого Группировка Из ГрупповыеЗаписи Цикл
		
		ВзаиморасчетыКлиентСервер.РассчитатьКонечноеСальдоДтКт(Группировка, ДетальныеЗаписи, СверкаПоДоговорам);
		
		Если Группировка.НачальноеСальдоДт = 0 И Группировка.НачальноеСальдоКт = 0
			И Группировка.ОборотДт = 0 И Группировка.ОборотКт = 0
			И Группировка.КонечноеСальдоДт = 0 И Группировка.КонечноеСальдоКт Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеДокумента.ИтоговыеЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Группировка);
		
	КонецЦикла;
	
	ДанныеДокумента.ИтоговыеЗаписи.Сортировать("ТипРасчетов, Партнер, Договор, ОбъектРасчетов, Валюта");
	#КонецОбласти
	
КонецПроцедуры
//++ Локализация
Функция ПолучитьСчетаФактуры(ТаблицаВзаиморасчетов)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРасчетов.РасчетныйДокумент КАК РасчетныйДокумент
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	&Взаиморасчеты КАК ТаблицаРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Обороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ОснованиеСФ.Ссылка КАК СчетФактура,
	|	ОснованиеСФ.Ссылка.ПредставлениеНомера КАК Номер,
	|	ОснованиеСФ.Ссылка.Дата КАК Дата,
	|	ЛОЖЬ КАК ЭтоВходящий
	|ИЗ
	|	Обороты КАК Обороты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ОснованиеСФ
	|		ПО Обороты.РасчетныйДокумент = ОснованиеСФ.ДокументОснование
	|ГДЕ
	|	НЕ ОснованиеСФ.Ссылка ЕСТЬ NULL
	|	И ОснованиеСФ.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Обороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ОснованиеСФ.Ссылка КАК СчетФактура,
	|	ОснованиеСФ.Ссылка.Номер КАК Номер,
	|	ОснованиеСФ.Ссылка.ДатаСоставления КАК Дата,
	|	ИСТИНА КАК ЭтоВходящий
	|ИЗ
	|	Обороты КАК Обороты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованиеСФ
	|		ПО Обороты.РасчетныйДокумент = ОснованиеСФ.ДокументОснование
	|ГДЕ
	|	НЕ ОснованиеСФ.Ссылка ЕСТЬ NULL
	|	И ОснованиеСФ.Ссылка.Проведен";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Взаиморасчеты", ТаблицаВзаиморасчетов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция НомерСФВУПД()
	
	Результат = Новый Структура;
	
	Результат.Вставить(Метаданные.Документы.АктВыполненныхРабот.Имя);
	Результат.Вставить(Метаданные.Документы.ВыкупВозвратнойТарыКлиентом.Имя);
	Результат.Вставить(Метаданные.Документы.ВыкупТоваровХранителем.Имя);
	Результат.Вставить(Метаданные.Документы.КорректировкаРеализации.Имя);
	Результат.Вставить(Метаданные.Документы.РеализацияТоваровУслуг.Имя);
	Результат.Вставить(Метаданные.Документы.РеализацияУслугПрочихАктивов.Имя);
	
	Возврат Результат;
	
КонецФункции
//-- Локализация

Функция ЗначенияРесурсов(ДанныеЗаполнения, ИменаРесурсов)
	
	ДанныеРесурсов = Новый Структура;
	
	ЕстьЗаполненные = Ложь;
	Для Каждого Ресурс Из ИменаРесурсов Цикл
		
		ДанныеРесурсов.Вставить(Ресурс.Ключ,ДанныеЗаполнения[Ресурс.Значение]);
		Если ДанныеРесурсов[Ресурс.Ключ] <> 0 И НЕ ЕстьЗаполненные Тогда
			ЕстьЗаполненные = Истина;
		КонецЕсли;
		
	КонецЦикла; 
	
	ДанныеРесурсов.Вставить("ЕстьЗаполненные", ЕстьЗаполненные);
	
	Возврат ДанныеРесурсов;
	
КонецФункции

#КонецОбласти

Функция ПолучитьВзаиморасчеты(КомпоновщикОтбор) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОтборРасчетов");
	
	ДобавитьДоступныеТаблицы(СхемаКомпоновкиДанных.НаборыДанных.ОстаткиИОбороты.Запрос);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	СегментыСервер.ВключитьОтборПоСегментуПартнеровВСКД(КомпоновщикОтбор);
	
	НастройкиКомпоновкиДанных = КомпоновщикОтбор.Настройки;
	ВключатьДоговорыБезОборотов = КомпоновкаДанныхКлиентСервер.ИспользуетсяОтбор(НастройкиКомпоновкиДанных.Отбор.Элементы, "ДоговорыБезОборотов", Истина);
	
	НачалоПериода = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикОтбор.Настройки, "НачалоПериода");
	Если НЕ ЗначениеЗаполнено(НачалоПериода.Значение) Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "НачалоПериода", Дата('19800101'));
	КонецЕсли;
	Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикОтбор.Настройки, "Период");
	Если НЕ ЗначениеЗаполнено(Период.Значение) Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "Период", Дата('19800101'));
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ДоговорыБезОборотов", ВключатьДоговорыБезОборотов);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "АрендныеОбязательства", Неопределено);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ОбеспечительныйПлатеж", Неопределено);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "УслугаПоАренде", Неопределено);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ВыкупнаяСтоимость", Неопределено);
	ТипыСуммАренды = Новый Массив;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ТипыСуммАренды", ТипыСуммАренды,,Истина);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,,Истина);
	
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаРезультатаСКД = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	УстановитьПривилегированныйРежим(Ложь);
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
		ТаблицаРезультатаСКД.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаРезультатаСКД.ЗаполнитьЗначения(Организация, "Организация");
	КонецЕсли;
	
	СхемаОтбора = Новый Структура;
	СхемаОтбора.Вставить("СКД", СхемаКомпоновкиДанных);
	СхемаОтбора.Вставить("Настройки", НастройкиКомпоновкиДанных);
	СхемаОтбора.Вставить("Результат", ТаблицаРезультатаСКД);
	
	Если КомпоновщикОтбор.Настройки.ДополнительныеСвойства.Свойство("ДляОтладки") Тогда
		КомпоновщикОтбор.Настройки.ДополнительныеСвойства.ДляОтладки.Вставить("СхемаОтбора", СхемаОтбора);
	КонецЕсли;
	
	Возврат ТаблицаРезультатаСКД;
	
КонецФункции

Функция ДанныеРасчетногоДокумента(РасчетныеДокументы) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеестрДокументов.Ссылка КАК Ссылка,
	|	РеестрДокументов.ДатаПервичногоДокумента КАК Дата,
	|	РеестрДокументов.НомерПервичногоДокумента КАК Номер,
	|	РеестрДокументов.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
	|	РеестрДокументов.Валюта КАК Валюта,
	|	РеестрДокументов.Сумма КАК Сумма
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.Дата КАК Дата,
	|	СуммыДокументов.Номер КАК Номер,
	|	"""" КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.ДатаВходящегоДокумента КАК Дата,
	|	СуммыДокументов.НомерВходящегоДокумента КАК Номер,
	|	СуммыДокументов.НаименованиеВходящегоДокумента КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыУПоставщика КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.ДатаВходящегоДокумента КАК Дата,
	|	СуммыДокументов.НомерВходящегоДокумента КАК Номер,
	|	СуммыДокументов.НаименованиеВходящегоДокумента КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.ДатаВходящегоДокумента КАК Дата,
	|	СуммыДокументов.НомерВходящегоДокумента КАК Номер,
	|	СуммыДокументов.НаименованиеВходящегоДокумента КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.Дата КАК Дата,
	|	СуммыДокументов.Номер КАК Номер,
	|	"""" КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитенту КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.Дата КАК Дата,
	|	СуммыДокументов.Номер КАК Номер,
	|	"""" КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.ДатаВходящегоДокумента КАК Дата,
	|	СуммыДокументов.НомерВходящегоДокумента КАК Номер,
	|	СуммыДокументов.НаименованиеВходящегоДокумента КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ПервичныйДокумент КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.Ссылка.Дата КАК Дата,
	|	СуммыДокументов.Ссылка.Номер КАК Номер,
	|	"""" КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.ВалютаВзаиморасчетов КАК Валюта,
	|	СУММА(СуммыДокументов.Сумма) КАК Сумма
	|ИЗ
	|	Документ.КорректировкаЗадолженности.Задолженность КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|		
	|СГРУППИРОВАТЬ ПО
	|	СуммыДокументов.Ссылка,
	|	СуммыДокументов.ВалютаВзаиморасчетов";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивДокументов", РасчетныеДокументы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеДокумента = Новый Структура("Ссылка,Номер,Дата, НаименованиеПервичногоДокумента, Валюта,Сумма");
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Выборка);
	КонецЦикла;
	
	Возврат ДанныеДокумента;
	
КонецФункции

Процедура ИнициализироватьКомпоновщикНастроек(КомпоновщикОтбор, УникальныйИдентификаторФормы = Неопределено, НастройкиОтбора = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОтборРасчетов");
	
	ДобавитьДоступныеТаблицы(СхемаКомпоновкиДанных.НаборыДанных.ОстаткиИОбороты.Запрос);
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		Поле = СхемаКомпоновкиДанных.НаборыДанных.ОстаткиИОбороты.Поля.Найти("Контрагент"); // ПолеНабораДанныхСхемыКомпоновкиДанных 
		Если Поле <> Неопределено Тогда
			Поле.ОграничениеИспользования.Условие = Истина;
			Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
		КонецЕсли;
	Иначе
		Поле = СхемаКомпоновкиДанных.НаборыДанных.ОстаткиИОбороты.Поля.Найти("ОрганизацияКонтрагент"); // ПолеНабораДанныхСхемыКомпоновкиДанных 
		Если Поле <> Неопределено Тогда
			Поле.ОграничениеИспользования.Условие = Истина;
			Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаголовокПоляСКДВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
		СхемаКомпоновкиДанных.НаборыДанных.ОстаткиИОбороты, "Партнер", НСтр("ru = 'Контрагент'"));
	
	ДоступныеТипыРасчетов = Новый СписокЗначений;
	ДоступныеТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	ДоступныеТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);

	ПолеТипРасчетов = СхемаКомпоновкиДанных.НаборыДанных.ОстаткиИОбороты.Поля.Найти("ТипРасчетов");
	ПолеТипРасчетов.УстановитьДоступныеЗначения(ДоступныеТипыРасчетов);
		
	Если УникальныйИдентификаторФормы = Неопределено Тогда
		АдресВХранилище = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	КонецЕсли;
	АдресВХранилище = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификаторФормы);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВХранилище);
	
	КомпоновщикОтбор.Инициализировать(ИсточникНастроек);
	
	КомпоновщикОтбор.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Если НастройкиОтбора <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикОтбор.Настройки.Отбор, НастройкиОтбора.Отбор);
	КонецЕсли;
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		КомпоновкаДанныхКлиентСервер.УдалитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Контрагент");
	Иначе
		КомпоновкаДанныхКлиентСервер.УдалитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "ОрганизацияКонтрагент");
	КонецЕсли;
	КомпоновщикОтбор.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Если УникальныйИдентификаторФормы = Неопределено Тогда
		УдалитьИзВременногоХранилища(АдресВХранилище);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтборПартнераПоКонтрагенту(Отбор) Экспорт
	
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Отбор,"Контрагент");
	Если ЭлементОтбора <> Неопределено Тогда
		ПолеПартнер = Новый ПолеКомпоновкиДанных("Партнер");
		ЭлементОтбора.ЛевоеЗначение = ПолеПартнер;
		Если ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
				ЭлементОтбора.ПравоеЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементОтбора.ПравоеЗначение, "Партнер");
			ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Массив") Тогда
				Партнеры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЭлементОтбора.ПравоеЗначение, "Партнер");
				ЭлементОтбора.ПравоеЗначение.Очистить();
				Для Каждого Партнер Из Партнеры Цикл
					ЭлементОтбора.ПравоеЗначение.Добавить(Партнер);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДоступныеТаблицы(ТекстЗапроса)
	
	ТекстыЗапросов = ТекстыЗапросовДоступныхТаблиц();
	Для Каждого Текст Из ТекстыЗапросов Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//"+Текст.Ключ, Текст.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапрещенныеТипыРасчетов() Экспорт
	
	Результат = Новый Массив;
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам) Тогда
		Если НЕ ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКредитовИДепозитов) Тогда
			Результат.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором);
			Результат.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСДебитором);
		КонецЕсли;
		
	Иначе
		Результат.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором);
		Результат.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСДебитором);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстыЗапросовДоступныхТаблиц()
	
	Результат = Новый Соответствие;
	Если ПравоДоступа("Просмотр", Метаданные.Документы.ПервичныйДокумент) Тогда
		Результат.Вставить("#3", ТекстЗапросаПервичныйДокумент()); //ДокументПервичныйДокумент
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Документы.КорректировкаЗадолженности) Тогда
		Результат.Вставить("#4", ТекстЗапросаКорректировкаЗадолженности()); //ДокументКорректировкаЗадолженности
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПервичныйДокумент()
	
	Возврат "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуммыДокументов.Ссылка КАК Регистратор,
	|	Обороты.Организация КАК Организация,
	|	Обороты.ТипРасчетов КАК ТипРасчетов,
	|	СуммыДокументов.ДатаВходящегоДокумента КАК ДатаДокумента,
	|	СуммыДокументов.НомерВходящегоДокумента КАК НомерДокумента,
	|	СуммыДокументов.НаименованиеВходящегоДокумента КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Обороты КАК Обороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПервичныйДокумент КАК СуммыДокументов
	|	ПО Обороты.РасчетныйДокумент = СуммыДокументов.Ссылка
	|		И Обороты.РасчетныйДокумент <> НЕОПРЕДЕЛЕНО";
	
КонецФункции

Функция ТекстЗапросаКорректировкаЗадолженности()
	
	Возврат "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СуммыДокументов.Ссылка КАК Регистратор,
	|	Обороты.Организация КАК Организация,
	|	Обороты.ТипРасчетов КАК ТипРасчетов,
	|	СуммыДокументов.Ссылка.Дата КАК ДатаДокумента,
	|	СуммыДокументов.Ссылка.Номер КАК НомерДокумента,
	|	"""" КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.ВалютаВзаиморасчетов КАК Валюта,
	|	СУММА(СуммыДокументов.Сумма) КАК Сумма
	|ИЗ
	|	Обороты КАК Обороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаЗадолженности.Задолженность КАК СуммыДокументов
	|	ПО Обороты.РасчетныйДокумент = СуммыДокументов.Ссылка
	|		И Обороты.РасчетныйДокумент <> НЕОПРЕДЕЛЕНО
	|		И Обороты.ТипРасчетов = СуммыДокументов.ТипРасчетов
	|		И Обороты.ОбъектРасчетов = СуммыДокументов.ОбъектРасчетов
	|		И Обороты.Партнер = СуммыДокументов.Партнер
	|		
	|СГРУППИРОВАТЬ ПО
	|	СуммыДокументов.Ссылка,
	|	Обороты.ТипРасчетов,
	|	Обороты.Организация,
	|	СуммыДокументов.ВалютаВзаиморасчетов";
	
КонецФункции

Функция РеквизитыПоследнегоДокумента(Контрагент) Экспорт

	СтруктураРеквизитов = Новый Структура("Партнер,
										  |Договор,
										  |РасшифровкаПоЗаказам,
										  |РасшифровкаПоПартнерам,
										  |РасшифровкаПоДоговорам,
										  |ФИОРуководителяКонтрагента,
										  |ДолжностьРуководителяКонтрагента,
										  |КонтактноеЛицо");
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СверкаВзаиморасчетов.Партнер КАК Партнер,
		|	СверкаВзаиморасчетов.Договор КАК Договор,
		|	ИСТИНА КАК РасшифровкаПоЗаказам,
		|	СверкаВзаиморасчетов.РазбиватьПоПартнерам КАК РасшифровкаПоПартнерам,
		|	СверкаВзаиморасчетов.РазбиватьПоДоговорам КАК РасшифровкаПоДоговорам,
		|	СверкаВзаиморасчетов.ФИОРуководителяКонтрагента КАК ФИОРуководителяКонтрагента,
		|	СверкаВзаиморасчетов.ДолжностьРуководителяКонтрагента КАК ДолжностьРуководителяКонтрагента,
		|	СверкаВзаиморасчетов.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	Документ.СверкаВзаиморасчетов2_5_11 КАК СверкаВзаиморасчетов
		|ГДЕ
		|	СверкаВзаиморасчетов.Контрагент = &Контрагент
		|	И НЕ СверкаВзаиморасчетов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	СверкаВзаиморасчетов.МоментВремени УБЫВ";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
