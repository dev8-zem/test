#Область ОписаниеПеременных

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьПередачиТоваровМеждуОрганизациями = ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями");
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	
	ЗаполнитьСпискиВыбораТипаРасчетов();
	ЗаполнитьТипОбъектаРасчетов();
	УстановитьПараметрыВыбораПартнера();
	УстановитьВидимость();
	
	Элементы.ГруппаВводОстатковПо.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	
	УстановитьЗаголовокЭтойФормы();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();
	ЗаполнитьТипОбъектаРасчетов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьТипОбъектаРасчетов();
	УстановитьЗаголовокЭтойФормы();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ХозяйственнаяОперация",  Объект.ХозяйственнаяОперация);
	Оповестить("Запись_ВводОстатков", ПараметрыЗаписи, Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИсправлениеДокументовКлиент.ПослеЗаписи(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	Объект.РасчетыСПартнерами.Очистить();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Объект.Организация Тогда
		ОчиститьНомерДатуОбъектовРасчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВОперативномУчетеПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБУиНУПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВУУПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадолженностьКлиентов

&НаКлиенте
Процедура ЗадолженностьКлиентовПартнерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПартнерПриИзменении(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент, ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьОбъектРасчетовСервер(ТекущаяСтрокаИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбъектРасчетов = Элементы.ЗадолженностьКлиентов.ТекущиеДанные.ОбъектРасчетов;
	Если ЗначениеЗаполнено(ОбъектРасчетов) И ТипЗнч(ОбъектРасчетов) <> Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
		ПоказатьЗначение(Неопределено, ОбъектРасчетов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовНомерРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	НомерРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовДатаРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	РассчитанныеСуммы = РассчитатьСуммы(
		ТекущиеДанные.Сумма,
		0,
		ТекущиеДанные.ВалютаВзаиморасчетов,
		ВалютаРегламентированногоУчета,
		ВалютаУправленческогоУчета,
		Объект.Дата,
		ТекущиеДанные.ДокументРасчетов);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РассчитанныеСуммы, "СуммаРегл, СуммаУпр");

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовВалютаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ВалютаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.ЗадолженностьКлиентов.ТекущиеДанные);
	ИнициализироватьКонтрагентаВСтроке(Элементы.ЗадолженностьКлиентов.ТекущиеДанные, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗадолженностьКлиентовОбъектРасчетов" Тогда
		УстановитьПараметрыВыбораОбъектаРасчетов(Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ЗадолженностьКлиентовТипРасчетов" Тогда
		УстановитьСписокВыбораТипаРасчетов(Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ЗадолженностьКлиентовРасчетныйДокумент" Тогда 
		УстановитьПараметрыВыбораРасчетногоДокумента(Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовОбъектРасчетовПриИзменении(Элемент)
	
	ОбъектРасчетовПриИзменении(Элементы.ЗадолженностьКлиентов.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадолженностьПередПоставщиками

&НаКлиенте
Процедура ЗадолженностьПоставщикамПартнерПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПартнерПриИзменении(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент, ТекущаяСтрокаИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьОбъектРасчетовСервер(ТекущаяСтрокаИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбъектРасчетов = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные.ОбъектРасчетов;
	Если ЗначениеЗаполнено(ОбъектРасчетов) И ТипЗнч(ОбъектРасчетов) <> Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
		ПоказатьЗначение(Неопределено, ОбъектРасчетов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамНомерРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	НомерРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамДатаРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	РассчитанныеСуммы = РассчитатьСуммы(
		ТекущиеДанные.Сумма,
		ТекущиеДанные.СуммаДисконтирования,
		ТекущиеДанные.ВалютаВзаиморасчетов,
		ВалютаРегламентированногоУчета,
		ВалютаУправленческогоУчета,
		Объект.Дата,
		ТекущиеДанные.ДокументРасчетов);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РассчитанныеСуммы, "СуммаРегл, СуммаУпр");

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамСуммаПроцентовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	РассчитанныеСуммы = РассчитатьСуммы(
		ТекущиеДанные.Сумма,
		ТекущиеДанные.СуммаДисконтирования,
		ТекущиеДанные.ВалютаВзаиморасчетов,
		ВалютаРегламентированногоУчета,
		ВалютаУправленческогоУчета,
		Объект.Дата,
		ТекущиеДанные.ДокументРасчетов);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РассчитанныеСуммы, "СуммаДисконтированияРегл, СуммаДисконтированияУпр");

КонецПроцедуры


&НаКлиенте
Процедура ЗадолженностьПоставщикамВалютаВзаиморасчетовПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ВалютаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.ЗадолженностьПоставщикам.ТекущиеДанные);
	ИнициализироватьКонтрагентаВСтроке(Элементы.ЗадолженностьПоставщикам.ТекущиеДанные, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗадолженностьПоставщикамОбъектРасчетов" Тогда
		УстановитьПараметрыВыбораОбъектаРасчетов(Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ЗадолженностьПоставщикамТипРасчетов" Тогда
		УстановитьСписокВыбораТипаРасчетов(Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ЗадолженностьПоставщикамДокументРасчетов" Тогда 
		УстановитьПараметрыВыбораРасчетногоДокумента(Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамОбъектРасчетовПриИзменении(Элемент)
	
	ОбъектРасчетовПриИзменении(Элементы.ЗадолженностьПоставщикам.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвансыКлиентов

&НаКлиенте
Процедура АвансыКлиентовПартнерПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПартнерПриИзменении(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент, ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьОбъектРасчетовСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбъектРасчетов = Элементы.АвансыКлиентов.ТекущиеДанные.ОбъектРасчетов;
	Если ЗначениеЗаполнено(ОбъектРасчетов) И ТипЗнч(ОбъектРасчетов) <> Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
		ПоказатьЗначение(Неопределено, ОбъектРасчетов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.АвансыКлиентов.ТекущиеДанные;
	ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовНомерРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	НомерРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовДатаРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	РассчитанныеСуммы = РассчитатьСуммы(
		ТекущиеДанные.Сумма,
		0,
		ТекущиеДанные.ВалютаВзаиморасчетов,
		ВалютаРегламентированногоУчета,
		ВалютаУправленческогоУчета,
		Объект.Дата,
		ТекущиеДанные.ДокументРасчетов);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РассчитанныеСуммы, "СуммаРегл, СуммаУпр");

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовВалютаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	ВалютаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.АвансыКлиентов.ТекущиеДанные);
	ИнициализироватьКонтрагентаВСтроке(Элементы.АвансыКлиентов.ТекущиеДанные, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "АвансыКлиентовОбъектРасчетов" Тогда
		УстановитьПараметрыВыбораОбъектаРасчетов(Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "АвансыКлиентовТипРасчетов" Тогда 
		УстановитьСписокВыбораТипаРасчетов(Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "АвансыКлиентовРасчетныйДокумент" Тогда 
		УстановитьПараметрыВыбораРасчетногоДокумента(Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовОбъектРасчетовПриИзменении(Элемент)
	
	ОбъектРасчетовПриИзменении(Элементы.АвансыКлиентов.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовРасчетныйДокументПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.АвансыКлиентов.ТекущиеДанные;
	ДатаРасчетногоДокумента = Дата(1,1,1);
	Если ТипЗнч(ТекущаяСтрока.ОбъектРасчетов) = Тип("СправочникСсылка.ПодарочныеСертификаты") 
		И ЗначениеЗаполнено(ТекущаяСтрока.ДокументРасчетов) Тогда
		РеквизитыДокументаРасчетов = Новый Массив;
		РеквизитыДокументаРасчетов.Добавить("Дата");
		ДанныеДокументаРасчетов = ПолучитьДанныеДокументаРасчетов(ТекущаяСтрока.ДокументРасчетов, РеквизитыДокументаРасчетов);
		ДатаРасчетногоДокумента = ДанныеДокументаРасчетов.Дата;
	КонецЕсли;
	Если ДатаРасчетногоДокумента <> ТекущаяСтрока.ДатаРасчетногоДокумента Тогда
		ТекущаяСтрока.ДатаРасчетногоДокумента = ДатаРасчетногоДокумента;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвансыПоставщикам

&НаКлиенте
Процедура АвансыПоставщикамПартнерПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПартнерПриИзменении(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент, ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьОбъектРасчетовСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбъектРасчетов = Элементы.АвансыПоставщикам.ТекущиеДанные.ОбъектРасчетов;
	Если ЗначениеЗаполнено(ОбъектРасчетов) И ТипЗнч(ОбъектРасчетов) <> Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
		ПоказатьЗначение(Неопределено, ОбъектРасчетов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамНомерРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	НомерРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамДатаРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	РассчитанныеСуммы = РассчитатьСуммы(
		ТекущиеДанные.Сумма,
		0,
		ТекущиеДанные.ВалютаВзаиморасчетов,
		ВалютаРегламентированногоУчета,
		ВалютаУправленческогоУчета,
		Объект.Дата,
		ТекущиеДанные.ДокументРасчетов);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РассчитанныеСуммы, "СуммаРегл, СуммаУпр");

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамВалютаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ВалютаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.АвансыПоставщикам.ТекущиеДанные);
	ИнициализироватьКонтрагентаВСтроке(Элементы.АвансыПоставщикам.ТекущиеДанные, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "АвансыПоставщикамОбъектРасчетов" Тогда
		УстановитьПараметрыВыбораОбъектаРасчетов(Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "АвансыПоставщикамТипРасчетов" Тогда
		УстановитьСписокВыбораТипаРасчетов(Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "АвансыПоставщикамРасчетныйДокумент" Тогда
		УстановитьПараметрыВыбораРасчетногоДокумента(Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамОбъектРасчетовПриИзменении(Элемент)
	
	ОбъектРасчетовПриИзменении(Элементы.АвансыПоставщикам.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбъектРасчетовПриИзменении(ТекущаяСтрока) 
	
	ТекущиеДанные = Объект.РасчетыСПартнерами.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
		ТекущиеДанные.ДокументРасчетов = ТекущиеДанные.ОбъектРасчетов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументРасчетов)
		И (ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
				ИЛИ ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями")) Тогда
		ДоговорРасчетногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДокументРасчетов, "Договор");
		Если ДоговорРасчетногоДокумента <> ТекущиеДанные.ОбъектРасчетов Тогда
			ТекущиеДанные.ДокументРасчетов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоОбъектуРасчетов(
		ТекущиеДанные.ВалютаВзаиморасчетов,
		ТекущиеДанные.Договор,
		ТекущиеДанные.ПорядокРасчетов,
		ТекущиеДанные.ТипДоговора,
		ТекущиеДанные.ОбъектРасчетов);
	
	РезультатРасчета = РассчитатьСуммы(ТекущиеДанные.Сумма,
	                     ?(ТекущиеДанные.Свойство("СуммаДисконтирования"), ТекущиеДанные.СуммаДисконтирования, 0),
	                     ТекущиеДанные.ВалютаВзаиморасчетов, 
	                     ВалютаРегламентированногоУчета, 
	                     ВалютаУправленческогоУчета, 
	                     Объект.Дата,
	                     ТекущиеДанные.ДокументРасчетов);
	ТекущиеДанные.СуммаРегл = РезультатРасчета.СуммаРегл;
	ТекущиеДанные.СуммаУпр = РезультатРасчета.СуммаУпр;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ЗадолженностьКлиентовНомерРасчетногоДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ЗадолженностьКлиентовДатаРасчетногоДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ЗадолженностьПоставщикамНомерРасчетногоДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ЗадолженностьПоставщикамДатаРасчетногоДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.АвансыКлиентовНомерРасчетногоДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.АвансыКлиентовДатаРасчетногоДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.АвансыПоставщикамНомерРасчетногоДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.АвансыПоставщикамДатаРасчетногоДокумента.Имя);
	
	ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(Элемент.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "Объект.РасчетыСПартнерами.ТипРасчетов", НСтр("ru = 'Договор с контрагентом'"));
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "Объект.РасчетыСПартнерами.ОбъектРасчетов", Неопределено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ЗадолженностьКлиентовТипРасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ЗадолженностьПоставщикамТипРасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.АвансыКлиентовТипРасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.АвансыПоставщикамТипРасчетов.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.РасчетыСПартнерами.ОбъектРасчетов", Неопределено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ЗадолженностьКлиентовНомерРасчетногоДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ЗадолженностьКлиентовДатаРасчетногоДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ЗадолженностьПоставщикамНомерРасчетногоДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ЗадолженностьПоставщикамДатаРасчетногоДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.АвансыКлиентовНомерРасчетногоДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.АвансыКлиентовДатаРасчетногоДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.АвансыПоставщикамНомерРасчетногоДокумента.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.АвансыПоставщикамДатаРасчетногоДокумента.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.РасчетыСПартнерами.ОбъектРасчетов", Неопределено);

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ЗадолженностьКлиентовОбъектРасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ЗадолженностьПоставщикамОбъектРасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.АвансыКлиентовОбъектРасчетов.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.АвансыПоставщикамОбъектРасчетов.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.РасчетыСПартнерами.ОбъектРасчетов", Неопределено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	

КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	Элементы.ЗадолженностьКлиентовВалюта.ТолькоПросмотр              = Истина;
	Элементы.ЗадолженностьКлиентовОбъектРасчетов.Видимость           = Истина;
	Элементы.ЗадолженностьКлиентовРасчетныйДокумент.Видимость        = Объект.ОтражатьВОперативномУчете;
	Элементы.ЗадолженностьКлиентовНомерРасчетногоДокумента.Видимость = Ложь;
	Элементы.ЗадолженностьКлиентовДатаРасчетногоДокумента.Видимость  = Ложь;
	
	Элементы.ЗадолженностьПоставщикамВалютаВзаиморасчетов.ТолькоПросмотр = Истина;
	Элементы.ЗадолженностьПоставщикамОбъектРасчетов.Видимость            = Истина;
	Элементы.ЗадолженностьПоставщикамДокументРасчетов.Видимость          = Объект.ОтражатьВОперативномУчете;
	Элементы.ЗадолженностьПоставщикамНомерРасчетногоДокумента.Видимость  = Ложь;
	Элементы.ЗадолженностьПоставщикамДатаРасчетногоДокумента.Видимость   = Ложь;
	
	Элементы.АвансыКлиентовВалюта.ТолькоПросмотр              = Истина;
	Элементы.АвансыКлиентовОбъектРасчетов.Видимость           = Истина;
	Элементы.АвансыКлиентовРасчетныйДокумент.Видимость        = Объект.ОтражатьВОперативномУчете;
	Элементы.АвансыКлиентовНомерРасчетногоДокумента.Видимость = Ложь;
	Элементы.АвансыКлиентовДатаРасчетногоДокумента.Видимость  = Ложь;
	
	Элементы.АвансыПоставщикамВалюта.ТолькоПросмотр              = Истина;
	Элементы.АвансыПоставщикамОбъектРасчетов.Видимость           = Истина;
	Элементы.АвансыПоставщикамРасчетныйДокумент.Видимость        = Объект.ОтражатьВОперативномУчете;
	Элементы.АвансыПоставщикамНомерРасчетногоДокумента.Видимость = Ложь;
	Элементы.АвансыПоставщикамДатаРасчетногоДокумента.Видимость  = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаЗадолженностьКлиентов.Видимость          = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов;
	Элементы.ГруппаЗадолженностьПередПоставщиками.Видимость = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам;
	Элементы.ГруппаАвансыКлиентов.Видимость                 = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов;
	Элементы.ГруппаАвансыПоставщикам.Видимость              = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам;

	ВидимостьЗаполненияПоОстаткам = НЕ Объект.ОтражатьВОперативномУчете И (Объект.ОтражатьВБУиНУ ИЛИ  Объект.ОтражатьВУУ) И НЕ Объект.Исправление;
	Элементы.ЗадолженностьКлиентовЗаполнитьПоОстаткам.Видимость = ВидимостьЗаполненияПоОстаткам;
	Элементы.ЗадолженностьПоставщикамЗаполнитьПоОстаткам.Видимость = ВидимостьЗаполненияПоОстаткам;
	Элементы.АвансыКлиентовЗаполнитьПоОстаткам.Видимость = ВидимостьЗаполненияПоОстаткам;
	Элементы.АвансыПоставщикамЗаполнитьПоОстаткам.Видимость = ВидимостьЗаполненияПоОстаткам;
	
	ВидимостьСуммыУпр = Объект.ОтражатьВОперативномУчете ИЛИ Объект.ОтражатьВУУ; 
	Элементы.ЗадолженностьКлиентовСуммаУпр.Видимость = ВидимостьСуммыУпр;
	Элементы.ЗадолженностьПоставщикамСуммаУпр.Видимость = ВидимостьСуммыУпр;
	Элементы.АвансыКлиентовСуммаУпр.Видимость = ВидимостьСуммыУпр;
	Элементы.АвансыПоставщикамСуммаУпр.Видимость = ВидимостьСуммыУпр;
	
	ВидимостьСуммыРегл = Объект.ОтражатьВОперативномУчете ИЛИ Объект.ОтражатьВБУиНУ; 
	Элементы.ЗадолженностьКлиентовСуммаРегл.Видимость = ВидимостьСуммыРегл;
	Элементы.ЗадолженностьПоставщикамСуммаРегл.Видимость = ВидимостьСуммыРегл;
	Элементы.АвансыКлиентовСуммаРегл.Видимость = ВидимостьСуммыРегл;
	Элементы.АвансыПоставщикамСуммаРегл.Видимость = ВидимостьСуммыРегл;
	
	Элементы.АвансыПоставщикамРасчетныйДокумент.Видимость        = Объект.ОтражатьВОперативномУчете;
	Элементы.АвансыКлиентовРасчетныйДокумент.Видимость           = Объект.ОтражатьВОперативномУчете;
	Элементы.ЗадолженностьПоставщикамДокументРасчетов.Видимость = Объект.ОтражатьВОперативномУчете;
	Элементы.ЗадолженностьКлиентовРасчетныйДокумент.Видимость    = Объект.ОтражатьВОперативномУчете;

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ДействующиеПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик("УчетнаяПолитикаФинансовогоУчета", Объект.Организация, Объект.Дата);
		Дисконт = ДействующиеПараметрыУчетнойПолитики.УчетДисконтированнойКредиторскойЗадолженностиПоставщикам;
		Элементы.ЗадолженностьПоставщикамСуммаДисконтирования.Видимость     = Дисконт;
		Элементы.ЗадолженностьПоставщикамСуммаДисконтированияРегл.Видимость = Дисконт И ВидимостьСуммыРегл;
		Элементы.ЗадолженностьПоставщикамСуммаДисконтированияУпр.Видимость  = Дисконт И ВидимостьСуммыУпр;
	Иначе
		Элементы.ЗадолженностьПоставщикамСуммаДисконтирования.Видимость     = Ложь;
		Элементы.ЗадолженностьПоставщикамСуммаДисконтированияРегл.Видимость = Ложь;
		Элементы.ЗадолженностьПоставщикамСуммаДисконтированияУпр.Видимость  = Ложь;
	КонецЕсли;
	
	Элементы.ЗадолженностьКлиентовОтложенныйДоходНУ.Видимость = Ложь;
	Элементы.ЗадолженностьПоставщикамОтложенныйДоходНУ.Видимость = Ложь;
	Элементы.ЗадолженностьКлиентовОтложенныйРасходНУ.Видимость = Ложь;
	Элементы.ЗадолженностьПоставщикамОтложенныйРасходНУ.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокЭтойФормы()
	
	АвтоЗаголовок = Ложь;
	
	Заголовок = ВводОстатковВызовСервера.ЗаголовокДокументаВводОстатковПоХозяйственнойОперации(Объект.Ссылка,
		Объект.Номер,
		Объект.Дата,
		Объект.ХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораТипаРасчетов()
	
	СписокВыбора = СписокТиповОбъектовРасчетов; 
	
	СписокВыбора.Очистить();
	
	// Договоры
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов Тогда
		
		// Договоры
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда
			СписокВыбора.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), НСтр("ru = 'Договор с контрагентом'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями") Тогда
			СписокВыбора.Добавить(Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка(), НСтр("ru = 'Договоры между организациями'"));
		КонецЕсли;
		
		// Заказы
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
			СписокВыбора.Добавить(Документы.ЗаказКлиента.ПустаяСсылка(), НСтр("ru = 'Заказ клиента'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов") Тогда
			СписокВыбора.Добавить(Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка(), НСтр("ru = 'Заявка на возврат товаров от клиента'"));
		КонецЕсли;
		
		// Накладные
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов Тогда
			СписокВыбора.Добавить(Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента, НСтр("ru = 'Оплата от клиента'"));
		Иначе
			СписокВыбора.Добавить(Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту, НСтр("ru = 'Реализация клиенту'"));
		КонецЕсли;

	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам Тогда
		
		// Договоры
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками") Тогда
			СписокВыбора.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), НСтр("ru = 'Договор с контрагентом'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями") Тогда
			СписокВыбора.Добавить(Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка(), НСтр("ru = 'Договоры между организациями'"));
		КонецЕсли;
		
		// Заказы
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
			СписокВыбора.Добавить(Документы.ЗаказПоставщику.ПустаяСсылка(), НСтр("ru = 'Заказ поставщику'"));
		КонецЕсли;
		
		// Накладные
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам Тогда
			СписокВыбора.Добавить(Перечисления.ТипыПервичныхДокументов.ОплатаПоставщику, НСтр("ru = 'Оплата поставщику'"));
		Иначе
			СписокВыбора.Добавить(Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика, НСтр("ru = 'Приобретение у поставщика'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПретензии") Тогда
		СписокВыбора.Добавить(Справочники.Претензии.ПустаяСсылка(), НСтр("ru = 'Претензия'"));
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
			СписокВыбора.Добавить(Справочники.ПодарочныеСертификаты.ПустаяСсылка(), Нстр("ru = 'Подарочный сертификат'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипОбъектаРасчетов(ИдентификаторСтроки = Неопределено)

	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТаблицаРасчетов.НомерСтроки,
	|	ТаблицаРасчетов.ОбъектРасчетов КАК ОбъектРасчетов
	|ПОМЕСТИТЬ ВТСтроки
	|ИЗ
	|	&ТаблицаРасчетов КАК ТаблицаРасчетов
	|ГДЕ
	|	ТаблицаРасчетов.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	|	ИЛИ ТаблицаРасчетов.ОбъектРасчетов ССЫЛКА Документ.ПервичныйДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтроки.НомерСтроки,
	|	ДоговорыКонтрагентов.ТипДоговора,
	|	ДоговорыКонтрагентов.ПорядокРасчетов
	|ИЗ
	|	ВТСтроки КАК ВТСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВТСтроки.ОбъектРасчетов = ДоговорыКонтрагентов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтроки.НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ПервичныйДокумент.ТипПервичногоДокумента) КАК ТипПервичногоДокумента
	|ИЗ
	|	ВТСтроки КАК ВТСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПервичныйДокумент КАК ПервичныйДокумент
	|		ПО ВТСтроки.ОбъектРасчетов = ПервичныйДокумент.Ссылка");
		
	Если НЕ ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		Запрос.УстановитьПараметр("ТаблицаРасчетов", Объект.РасчетыСПартнерами.Выгрузить());
	Иначе
		МассивСтрок = Новый Массив;
		ОбрабатываемаяСтрока = Объект.РасчетыСПартнерами.НайтиПоИдентификатору(ИдентификаторСтроки);
		МассивСтрок.Добавить(ОбрабатываемаяСтрока);
		Запрос.УстановитьПараметр("ТаблицаРасчетов", Объект.РасчетыСПартнерами.Выгрузить(МассивСтрок));
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТЗСтрокиСДоговором = РезультатЗапроса[1].Выгрузить();
	ТЗСтрокиСДокументом = РезультатЗапроса[2].Выгрузить();

	Для Каждого СтрокаТаблицы Из Объект.РасчетыСПартнерами Цикл
		Если ЗначениеЗаполнено(ИдентификаторСтроки) И СтрокаТаблицы <> ОбрабатываемаяСтрока Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СтрокаСДоговором = ТЗСтрокиСДоговором.Найти(СтрокаТаблицы.НомерСтроки, "НомерСтроки");
			Если СтрокаСДоговором <> Неопределено Тогда
				ТипДоговора = СтрокаСДоговором.ТипДоговора;
				// Используется для правильного отбора первичных документов при детализации расчетов
				// По договорам контрагентов и Аванс по договорам, долг по накладным
				СтрокаТаблицы.ПорядокРасчетов = СтрокаСДоговором.ПорядокРасчетов;
			Иначе
				ТипДоговора = Неопределено;
			КонецЕсли;
			
			СтрокаТаблицы.ТипДоговора = ТипДоговора;
			
			Если ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с покупателем'");
			//++ Устарело_Переработка24
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с давальцем'");
			//-- Устарело_Переработка24
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем2_5 Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с давальцем'");
			//++ Устарело_Переработка24
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с переработчиком'");
			//-- Устарело_Переработка24
			ИначеЕсли (ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком2_5
					Или ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком2_5_ЕАЭС) Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с переработчиком'");
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с комиссионером'");
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с поставщиком'");
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СКомитентом Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с комитентом'");
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.Импорт Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор импорта'");
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СПоклажедателем Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с поклажедателем'");
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СХранителем Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с хранителем'");
			Иначе
				ХозяйственнаяОперацияДоговора = Документы.ВводОстатковВзаиморасчетов.ХозяйственнаяОперацияДоговораПоТипуОперации(Объект.ХозяйственнаяОперация);
				Если ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
					СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с покупателем'");
				ИначеЕсли ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
					СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с поставщиком'");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
			СтрокаСДокументом = ТЗСтрокиСДокументом.Найти(СтрокаТаблицы.НомерСтроки, "НомерСтроки");
			Если СтрокаСДокументом <> Неопределено Тогда
				СтрокаТаблицы.ТипРасчетов = СтрокаСДокументом.ТипПервичногоДокумента;
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
			Если СтрокаТаблицы.ОбъектРасчетов = Перечисления.ТипыДоговоров.СПокупателем Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с покупателем'");
			ИначеЕсли СтрокаТаблицы.ОбъектРасчетов = Перечисления.ТипыДоговоров.СКомиссионером Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с комиссионером'");
			ИначеЕсли СтрокаТаблицы.ОбъектРасчетов = Перечисления.ТипыДоговоров.СПоставщиком Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с поставщиком'");
			ИначеЕсли СтрокаТаблицы.ОбъектРасчетов = Перечисления.ТипыДоговоров.СКомитентом Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с комитентом'");
			ИначеЕсли СтрокаТаблицы.ОбъектРасчетов = Перечисления.ТипыДоговоров.Импорт Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор импорта'");
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СПоклажедателем Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с поклажедателем'");
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СХранителем Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с хранителем'");
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ТипРасчетов = Строка(ТипЗнч(СтрокаТаблицы.ОбъектРасчетов));
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПодобратьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор)

	ИмяТЧ = Документы.ВводОстатковВзаиморасчетов.ИмяТабличнойЧастиРасчетовПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	ТекущиеДанные = Объект[ИмяТЧ].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Документы.ВводОстатковВзаиморасчетов.ПодобратьДокументРасчетов(Объект, ТекущиеДанные);

КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзменении(Партнер, Контрагент, ИдентификаторСтроки)
	
	ПартнерПриИзмененииСервер(Партнер, Контрагент);
	ПроверитьОбъектРасчетовСервер(ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбъектРасчетовСервер(ТекущаяСтрокаИдентификатор)

	ИмяТЧ = Документы.ВводОстатковВзаиморасчетов.ИмяТабличнойЧастиРасчетовПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	ТекущиеДанные = Объект[ИмяТЧ].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ОбъектРасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Структура("Номер, Дата, Ссылка, Представление");
	Если ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		
		Реквизиты.Вставить("Валюта","ВалютаВзаиморасчетов");
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов Тогда
			
			Реквизиты.Вставить("Организация", "Организация");
			Реквизиты.Вставить("Контрагент",  "ОрганизацияПолучатель");
			
		Иначе
			
			Реквизиты.Вставить("Организация", "ОрганизацияПолучатель");
			Реквизиты.Вставить("Контрагент",  "Организация");
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Реквизиты.Вставить("Организация", "Организация");
		Реквизиты.Вставить("Партнер",     "Партнер");
		Реквизиты.Вставить("Контрагент",  "Контрагент");
		Реквизиты.Вставить("Валюта",      "ВалютаВзаиморасчетов");
	Иначе
		Реквизиты.Вставить("Организация", "Организация");
		Реквизиты.Вставить("Партнер",     "Партнер");
		Реквизиты.Вставить("Контрагент",  "Контрагент");
		Реквизиты.Вставить("Валюта",      "Валюта");
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДанные.ОбъектРасчетов,Реквизиты);
	Если ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		ЗначенияРеквизитов.Вставить("Партнер", Справочники.Партнеры.НашеПредприятие);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.Организация)
		 И ЗначенияРеквизитов.Организация <> Объект.Организация Тогда
		ТекстСообщения = НСтр("ru='В документе ""%ОбъектРасчетов%"" организация отличается от указанной во вводе остатков'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ОбъектРасчетов%",ЗначенияРеквизитов.Представление);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ТекущиеДанные.ОбъектРасчетов = Неопределено;
		ТекущиеДанные.ДокументРасчетов = Неопределено;
		ТекущиеДанные.ТипРасчетов = "";
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущиеДанные.Партнер)
		 И ЗначениеЗаполнено(ЗначенияРеквизитов.Партнер)
		 И ЗначенияРеквизитов.Партнер <> ТекущиеДанные.Партнер Тогда
		ТекстСообщения = НСтр("ru='В %Объект% ""%ОбъектРасчетов%"" партнер отличается от указанного во вводе остатков'");
		Если ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			ИЛИ ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Объект%", НСтр("ru='договоре'"));
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Объект%", НСтр("ru='документе'"));
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ОбъектРасчетов%",ЗначенияРеквизитов.Представление);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ТекущиеДанные.ОбъектРасчетов = Неопределено;
		ТекущиеДанные.НомерРасчетногоДокумента = "";
		ТекущиеДанные.ДатаРасчетногоДокумента = "";
		ТекущиеДанные.ДокументРасчетов = Неопределено;
		ТекущиеДанные.ТипРасчетов = "";
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент)
		 И ЗначениеЗаполнено(ЗначенияРеквизитов.Контрагент)
		 И ЗначенияРеквизитов.Контрагент <> ТекущиеДанные.Контрагент Тогда
		ТекстСообщения = НСтр("ru='В %Объект% ""%ОбъектРасчетов%"" контрагент отличается от указанного во вводе остатков'");
		Если ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			ИЛИ ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Объект%", НСтр("ru='договоре'"));
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Объект%", НСтр("ru='документе'"));
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ОбъектРасчетов%",ЗначенияРеквизитов.Представление);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ТекущиеДанные.ОбъектРасчетов = Неопределено;
		ТекущиеДанные.НомерРасчетногоДокумента = "";
		ТекущиеДанные.ДатаРасчетногоДокумента = "";
		ТекущиеДанные.ДокументРасчетов = Неопределено;
		ТекущиеДанные.ТипРасчетов = "";
		Возврат;
	КонецЕсли;
	ТекущиеДанные.Контрагент = ЗначенияРеквизитов.Контрагент;
	ТекущиеДанные.Партнер = ЗначенияРеквизитов.Партнер;
	ТекущиеДанные.ОбъектРасчетов			= ЗначенияРеквизитов.Ссылка;
	ТекущиеДанные.ДатаРасчетногоДокумента	= ЗначенияРеквизитов.Дата;
	ТекущиеДанные.НомерРасчетногоДокумента	= ЗначенияРеквизитов.Номер;
	ТекущиеДанные.ВалютаВзаиморасчетов = ЗначенияРеквизитов.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерРасчетногоДокументаПриИзменении(ТекущиеДанные)

	Если Не (ЗначениеЗаполнено(ТекущиеДанные.НомерРасчетногоДокумента)
		И ЗначениеЗаполнено(ТекущиеДанные.ДатаРасчетногоДокумента))
		И ТипЗнч(ТекущиеДанные.ОбъектРасчетов) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПодобратьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные)

	Если Не (ЗначениеЗаполнено(ТекущиеДанные.НомерРасчетногоДокумента)
		И ЗначениеЗаполнено(ТекущиеДанные.ДатаРасчетногоДокумента))
		И ТипЗнч(ТекущиеДанные.ОбъектРасчетов) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПодобратьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);

КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммы(Сумма, СуммаПроцентов, Валюта, ВалютаРегл, ВалютаУпр, ДатаДокумента, ДокументРасчетов)
	
	Запрос = Новый Запрос;
	МассивВалют = Новый Массив;
	МассивВалют.Добавить(Валюта);
	МассивВалют.Добавить(ВалютаРегл);
	МассивВалют.Добавить(ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаУпр",         ВалютаУпр);
	Запрос.УстановитьПараметр("МассивВалют",       МассивВалют);
	Запрос.УстановитьПараметр("Период",            ДатаДокумента);
	Запрос.УстановитьПараметр("ПервичныйДокумент", ДокументРасчетов);
	Запрос.Текст = ТекстЗапросаКурсов();
	
	КурсЧислитель       = 1;
	КурсЗнаменатель     = 1;
	КурсЧислительУпр    = 1;
	КурсЗнаменательУпр  = 1;
	КурсЧислительРегл   = 1;
	КурсЗнаменательРегл = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Валюта = Валюта Тогда
			КурсЧислитель   = Выборка.КурсЧислитель;
			КурсЗнаменатель = Выборка.КурсЗнаменатель;
		КонецЕсли;
		Если Выборка.Валюта = ВалютаРегл Тогда
			КурсЧислительРегл   = Выборка.КурсЧислитель;
			КурсЗнаменательРегл = Выборка.КурсЗнаменатель;
		КонецЕсли;
		Если Выборка.Валюта = ВалютаУпр Тогда
			КурсЧислительУпр   = Выборка.КурсЧислитель;
			КурсЗнаменательУпр = Выборка.КурсЗнаменатель;
		КонецЕсли;
	КонецЦикла;
	
	Если Валюта = ВалютаРегл Тогда
		СуммаРегл          = Сумма;
		СуммаПроцентовРегл = СуммаПроцентов;
	Иначе
		КоэффициентПересчета = КурсЧислитель * КурсЗнаменательРегл / (КурсЗнаменатель * КурсЧислительРегл);
		СуммаРегл          = Окр(Сумма * КоэффициентПересчета, 2, 1);
		СуммаПроцентовРегл = Окр(СуммаПроцентов * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
	Если Валюта = ВалютаУпр Тогда
		СуммаУпр          = Сумма;
		СуммаПроцентовУпр = СуммаПроцентов;
	Иначе
		КоэффициентПересчета = КурсЧислитель * КурсЗнаменательУпр / (КурсЗнаменатель * КурсЧислительУпр);
		СуммаУпр          = Окр(Сумма * КоэффициентПересчета, 2, 1);
		СуммаПроцентовУпр = Окр(СуммаПроцентов * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
	РассчитанныеСуммы = Новый Структура();
	РассчитанныеСуммы.Вставить("СуммаРегл",          СуммаРегл);
	РассчитанныеСуммы.Вставить("СуммаУпр",           СуммаУпр);
	РассчитанныеСуммы.Вставить("СуммаДисконтированияРегл", СуммаПроцентовРегл);
	РассчитанныеСуммы.Вставить("СуммаДисконтированияУпр",  СуммаПроцентовУпр);
	
	Возврат РассчитанныеСуммы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаКурсов()
	
	Возврат
	"ВЫБРАТЬ
	|	ЕСТЬNULL(
	|		ЕСТЬNULL(ДоговорыМеждуОрганизациями.Ссылка, 
	|				ДоговорыКонтрагентов.Ссылка), 
	|		НЕОПРЕДЕЛЕНО)                                            КАК Договор,
	|	ЕСТЬNULL(
	|		ЕСТЬNULL(ДоговорыМеждуОрганизациями.Дата, 
	|				ДоговорыКонтрагентов.Дата), 
	|		&Период)                                                 КАК Дата,
	|	ЕСТЬNULL(
	|		ЕСТЬNULL(ДоговорыМеждуОрганизациями.ВариантКурсаДоговора,
	|				ДоговорыКонтрагентов.ВариантКурсаДоговора), 
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный)) КАК ВариантКурсаДоговора,
	|	ЕСТЬNULL(
	|		ЕСТЬNULL(ДоговорыМеждуОрганизациями.ВалютаВзаиморасчетов,
	|				ДоговорыКонтрагентов.ВалютаВзаиморасчетов), 
	|		ПервичныйДокумент.Валюта)                                КАК ВалютаВзаиморасчетов,
	|	ПервичныйДокумент.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ПервичныйДокумент.Ссылка                                     КАК Документ
	|ПОМЕСТИТЬ ДанныеДоговора
	|ИЗ
	|	Документ.ПервичныйДокумент КАК ПервичныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
	|		ПО ПервичныйДокумент.Договор = ДоговорыМеждуОрганизациями.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ПервичныйДокумент.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ПервичныйДокумент.Ссылка = &ПервичныйДокумент
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервичныйДокумент.Ссылка КАК Ссылка,
	|	ПервичныйДокумент.Дата КАК ДатаКурса,
	|	ВалютыИКурсыДокументов.ВалютаДокумента КАК ВалютаДокумента,
	|	ВалютыИКурсыДокументов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВалютыИКурсыДокументов.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ВалютыИКурсыДокументов.КурсЧислительВалютыВзаиморасчетов КАК КурсЧислительВалютыВзаиморасчетов,
	|	ВалютыИКурсыДокументов.КурсЗнаменательВалютыВзаиморасчетов КАК КурсЗнаменательВалютыВзаиморасчетов,
	|	ВалютыИКурсыДокументов.КурсЧислительВалютыУправленческогоУчета КАК КурсЧислительВалютыУправленческогоУчета,
	|	ВалютыИКурсыДокументов.КурсЗнаменательВалютыУправленческогоУчета КАК КурсЗнаменательВалютыУправленческогоУчета,
	|	ВалютыИКурсыДокументов.КурсЧислительВалютыДокумента КАК КурсЧислительВалютыДокумента,
	|	ВалютыИКурсыДокументов.КурсЗнаменательВалютыДокумента КАК КурсЗнаменательВалютыДокумента
	|ПОМЕСТИТЬ ВтФиксированныйКурс
	|ИЗ
	|	Документ.ПервичныйДокумент КАК ПервичныйДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ПервичныйДокумент.Ссылка = ОбъектыРасчетов.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговора КАК ДанныеДоговора
	|		ПО ПервичныйДокумент.Договор = ДанныеДоговора.Договор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВалютыИКурсыДокументов КАК ВалютыИКурсыДокументов
	|		ПО ПервичныйДокумент.Ссылка = ВалютыИКурсыДокументов.Документ
	|ГДЕ
	|	ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
	|	И ДанныеДоговора.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДоговора.ВалютаВзаиморасчетов           КАК Валюта,
	|	ДанныеДоговора.ВалютаРегламентированногоУчета КАК БазоваяВалюта,
	|	КурсыПоДоговорам.Период                       КАК ДатаКурса,
	|	КурсыПоДоговорам.КурсЧислитель                КАК КурсЧислитель,
	|	КурсыПоДоговорам.КурсЗнаменатель              КАК КурсЗнаменатель
	|ИЗ
	|	ДанныеДоговора КАК ДанныеДоговора
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютРасчетовПоДоговорам.СрезПоследних(
	|				&Период,
	|				Договор В
	|					(ВЫБРАТЬ
	|						ДанныеДоговора.Договор
	|					ИЗ
	|						ДанныеДоговора
	|					ГДЕ
	|						ДанныеДоговора.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре))) КАК КурсыПоДоговорам
	|		ПО ДанныеДоговора.Договор = КурсыПоДоговорам.Договор 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтносительныеКурсы.Валюта          КАК Валюта,
	|	ОтносительныеКурсы.БазоваяВалюта   КАК БазоваяВалюта,
	|	ОтносительныеКурсы.Период          КАК ДатаКурса,
	|	ОтносительныеКурсы.КурсЧислитель   КАК КурсЧислитель,
	|	ОтносительныеКурсы.КурсЗнаменатель КАК КурсЗнаменатель
	|ИЗ
	|	ДанныеДоговора КАК ДанныеДоговора
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
	|				&Период,
	|				Валюта В (&МассивВалют)
	|				И БазоваяВалюта В (ВЫБРАТЬ ДанныеДоговора.ВалютаРегламентированногоУчета ИЗ ДанныеДоговора)) КАК ОтносительныеКурсы
	|		ПО ДанныеДоговора.ВалютаРегламентированногоУчета = ОтносительныеКурсы.БазоваяВалюта
	|ГДЕ
	|	НЕ (ДанныеДоговора.ВалютаВзаиморасчетов = ОтносительныеКурсы.Валюта И 
	|	ДанныеДоговора.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре))
	|	И НЕ ДанныеДоговора.Документ В
	|				(ВЫБРАТЬ
	|					Т.Ссылка
	|				ИЗ
	|					ВтФиксированныйКурс КАК Т)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтФиксированныйКурс.ВалютаДокумента                КАК Валюта,
	|	ВтФиксированныйКурс.ВалютаРегламентированногоУчета КАК БазоваяВалюта,
	|	ВтФиксированныйКурс.ДатаКурса                      КАК ДатаКурса,
	|	ВтФиксированныйКурс.КурсЧислительВалютыДокумента   КАК КурсЧислитель,
	|	ВтФиксированныйКурс.КурсЗнаменательВалютыДокумента КАК КурсЗнаменатель
	|ИЗ
	|	ВтФиксированныйКурс КАК ВтФиксированныйКурс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтФиксированныйКурс.ВалютаВзаиморасчетов                КАК Валюта,
	|	ВтФиксированныйКурс.ВалютаРегламентированногоУчета      КАК БазоваяВалюта,
	|	ВтФиксированныйКурс.ДатаКурса                           КАК ДатаКурса,
	|	ВтФиксированныйКурс.КурсЧислительВалютыВзаиморасчетов   КАК КурсЧислитель,
	|	ВтФиксированныйКурс.КурсЗнаменательВалютыВзаиморасчетов КАК КурсЗнаменатель
	|ИЗ
	|	ВтФиксированныйКурс КАК ВтФиксированныйКурс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ВалютаУпр                                                    КАК Валюта,
	|	ВтФиксированныйКурс.ВалютаРегламентированногоУчета            КАК БазоваяВалюта,
	|	ВтФиксированныйКурс.ДатаКурса                                 КАК ДатаКурса,
	|	ВтФиксированныйКурс.КурсЧислительВалютыУправленческогоУчета   КАК КурсЧислитель,
	|	ВтФиксированныйКурс.КурсЗнаменательВалютыУправленческогоУчета КАК КурсЗнаменатель
	|ИЗ
	|	ВтФиксированныйКурс КАК ВтФиксированныйКурс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтФиксированныйКурс.ВалютаРегламентированногоУчета КАК Валюта,
	|	ВтФиксированныйКурс.ВалютаРегламентированногоУчета КАК БазоваяВалюта,
	|	ВтФиксированныйКурс.ДатаКурса                      КАК ДатаКурса,
	|	1                                                  КАК КурсЧислитель,
	|	1                                                  КАК КурсЗнаменатель
	|ИЗ
	|	ВтФиксированныйКурс КАК ВтФиксированныйКурс
	|";
	
КонецФункции

&НаКлиенте
Процедура ВалютаПриИзменении(ТекущиеДанные)

	Если ТекущиеДанные.Сумма <> 0 Тогда
		РассчитанныеСуммы = РассчитатьСуммы(
			ТекущиеДанные.Сумма,
			?(ТекущиеДанные.Свойство("СуммаДисконтирования"), ТекущиеДанные.СуммаДисконтирования, 0),
			ТекущиеДанные.ВалютаВзаиморасчетов,
			ВалютаРегламентированногоУчета,
			ВалютаУправленческогоУчета,
			Объект.Дата,
			ТекущиеДанные.ДокументРасчетов);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, РассчитанныеСуммы, "СуммаРегл, СуммаУпр, СуммаДисконтированияРегл, СуммаДисконтированияУпр");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПоОбъектуРасчетов(ВалютаВзаиморасчетов, Договор, ПорядокРасчетов, ТипДоговора, ОбъектРасчетов)
	
	Если Не ЗначениеЗаполнено(ОбъектРасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями")
		ИЛИ ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		РеквизитыОбъектаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектРасчетов, "ВалютаВзаиморасчетов, ПорядокРасчетов, ТипДоговора");
		ВалютаВзаиморасчетов     = РеквизитыОбъектаРасчетов.ВалютаВзаиморасчетов;
		ПорядокРасчетов          = РеквизитыОбъектаРасчетов.ПорядокРасчетов;
		Договор                  = ОбъектРасчетов;
		ТипДоговора = РеквизитыОбъектаРасчетов.ТипДоговора;
	ИначеЕсли ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ПодарочныеСертификаты") Тогда
		РеквизитыОбъектаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектРасчетов, "Владелец.Валюта, ПорядокРасчетов");
		ВалютаВзаиморасчетов     = РеквизитыОбъектаРасчетов.ВладелецВалюта;
		ПорядокРасчетов          = РеквизитыОбъектаРасчетов.ПорядокРасчетов;
		Договор                  = Неопределено;
		ТипДоговора              = Неопределено;
	ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбъектРасчетов, "ВалютаВзаиморасчетов") Тогда
		РеквизитыОбъектаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектРасчетов, "ВалютаВзаиморасчетов, Договор");
		ВалютаВзаиморасчетов     = РеквизитыОбъектаРасчетов.ВалютаВзаиморасчетов;
		Договор                  = РеквизитыОбъектаРасчетов.Договор;
		ПорядокРасчетов          = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПустаяСсылка");
		ТипДоговора = Неопределено;
	Иначе
		РеквизитыОбъектаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектРасчетов, "Валюта, Договор");
		ВалютаВзаиморасчетов     = РеквизитыОбъектаРасчетов.Валюта;
		Договор                  = РеквизитыОбъектаРасчетов.Договор;
		ПорядокРасчетов          = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПустаяСсылка");
		ТипДоговора = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПартнерПриИзмененииСервер(Партнер, Контрагент)
	
	Если Партнер = Справочники.Партнеры.НашеПредприятие 
		И ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Организации") Тогда
		Контрагент = Справочники.Организации.ПустаяСсылка();
	Иначе
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументаРасчетов(ДокументРасчетов, Знач Реквизиты, ВыбратьРазрешенные = Ложь, Знач КодЯзыка = Неопределено)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетов, Реквизиты, ВыбратьРазрешенные, КодЯзыка);
КонецФункции

&НаКлиенте
Процедура ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы)

	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТаблицы.ДатаРасчетногоДокумента = ВыбранноеЗначение.Дата;
		СтрокаТаблицы.НомерРасчетногоДокумента = ВыбранноеЗначение.Номер;
		СтрокаТаблицы.ОбъектРасчетов = ВыбранноеЗначение.Заказ;
		СтрокаТаблицы.ВалютаВзаиморасчетов = ВыбранноеЗначение.ВалютаВзаиморасчетов;
		ЗаполнитьТипОбъектаРасчетов(СтрокаТаблицы.ПолучитьИдентификатор());
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ТипыПервичныхДокументов") Тогда 
		
		Если ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) <> Тип("ДокументСсылка.ПервичныйДокумент") Тогда
			СтрокаТаблицы.ОбъектРасчетов = ПредопределенноеЗначение("Документ.ПервичныйДокумент.ПустаяСсылка");
			СтрокаТаблицы.ДокументРасчетов = ПредопределенноеЗначение("Документ.ПервичныйДокумент.ПустаяСсылка");
		КонецЕсли;
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.ОплатаОтКлиента") Тогда
			СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Оплата от клиента'");
		ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику") Тогда
			СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Оплата поставщику'");
		ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.РеализацияКлиенту") Тогда
			СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Реализация клиенту'");
		ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.ПриобретениеУПоставщика") Тогда
			СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Приобретение у поставщика'");
		КонецЕсли;
		
	Иначе
		Если ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) <> ТипЗнч(ВыбранноеЗначение)
			 ИЛИ (ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("ПеречислениеСсылка.ТипыДоговоров") И СтрокаТаблицы.ОбъектРасчетов <> ВыбранноеЗначение) Тогда
			 
			 Если ВыбранноеЗначение = НСтр("ru = 'Не указан'") Тогда
				СтрокаТаблицы.ОбъектРасчетов = Неопределено;
				СтрокаТаблицы.ДокументРасчетов = ПредопределенноеЗначение("Документ.ПервичныйДокумент.ПустаяСсылка");
				СтрокаТаблицы.ТипРасчетов = ВыбранноеЗначение;
				СтрокаТаблицы.ДатаРасчетногоДокумента = Дата(1,1,1);
				СтрокаТаблицы.НомерРасчетногоДокумента = "";
			Иначе
				СтрокаТаблицы.ОбъектРасчетов = ВыбранноеЗначение;
				СтрокаТаблицы.ДокументРасчетов = ПредопределенноеЗначение("Документ.ПервичныйДокумент.ПустаяСсылка");
				Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем") Тогда
					СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с покупателем'");
				ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомиссионером") Тогда
					СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с комиссионером'");
				ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком") Тогда
					СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с поставщиком'");
				ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомитентом") Тогда
					СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор с комитентом'");
				ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.Импорт") Тогда
					СтрокаТаблицы.ТипРасчетов = НСтр("ru = 'Договор импорта'");
				Иначе
					СтрокаТаблицы.ТипРасчетов = Строка(ТипЗнч(ВыбранноеЗначение));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораОбъектаРасчетов(ИмяЭлементаОбъектРасчетов, СтрокаТаблицы)
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметровВыбораОбъектаРасчетов = Новый Массив;
	МассивПорядковРасчета = Новый Массив;
	
	Если ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		МассивТиповДоговоров = Новый Массив;
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов"));
		
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов") Тогда
			
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомиссионером"));
			//++ Устарело_Переработка24
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СДавальцем"));
			//-- Устарело_Переработка24
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СДавальцем2_5"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СХранителем"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.РеализацияЧерезКомиссионера"));
			
			Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов") Тогда
				МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным"));
			КонецЕсли;
			
		Иначе
			
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомитентом"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.Импорт"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ВвозИзЕАЭС"));
			//++ Устарело_Переработка24
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПереработчиком"));
			//-- Устарело_Переработка24
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПереработчиком2_5"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПереработчиком2_5_ЕАЭС"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоклажедателем"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомиссионером"));
			
			Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам") Тогда
				МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным"));
			КонецЕсли;
			
			МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("ПоказыватьПередачуНаКомиссию", Истина));
			
		КонецЕсли;
		
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора", Новый ФиксированныйМассив(МассивТиповДоговоров)));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ПорядокРасчетов", Новый ФиксированныйМассив(МассивПорядковРасчета)));
		
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Партнер", СтрокаТаблицы.Партнер));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", СтрокаТаблицы.Контрагент));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("ЭтоВводОстатков", Истина));
		
	ИначеЕсли ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов") Тогда
			
			МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
			МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ОрганизацияПолучатель", СтрокаТаблицы.Контрагент));
			МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("ОтборОрганизацийПоИли", Истина));
		Иначе
			
			МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Организация", СтрокаТаблицы.Контрагент));
			МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ОрганизацияПолучатель", Объект.Организация));
			МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("ОтборОрганизацийПоИли", Истина));
		КонецЕсли;
		
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ПорядокРасчетов", ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов")));
		
	ИначеЕсли ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
		
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов") Тогда
			// Для возможности выбора реализаций по договору комиссии
			МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказам"));
			
				МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ТипПервичногоДокумента", ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.РеализацияКлиенту")));
			
		ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов") Тогда
			МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ТипПервичногоДокумента", ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.ОплатаОтКлиента")));
			
		ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам") Тогда
			МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ТипПервичногоДокумента", ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.ПриобретениеУПоставщика")));
			
		Иначе
			МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ТипПервичногоДокумента", ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику")));
			
		КонецЕсли;
		
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным"));
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным"));
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным"));
		
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ПорядокРасчетов", Новый ФиксированныйМассив(МассивПорядковРасчета)));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Организация",     Объект.Организация));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Партнер",         СтрокаТаблицы.Партнер));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Контрагент",      СтрокаТаблицы.Контрагент));
		
	ИначеЕсли ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.Претензии") Тогда
		
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов") Тогда
			МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ТипРасчетов", ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом")));
			
		Иначе
			МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ТипРасчетов", ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком")));
			
		КонецЕсли;
		
		ТипОбъектаРасчетовДоговор = ПредопределенноеЗначение("Перечисление.ТипыОбъектовРасчетов.Договор");
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ТипОбъектаРасчетов", ТипОбъектаРасчетовДоговор));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Организация",     Объект.Организация));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Партнер",         СтрокаТаблицы.Партнер));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Контрагент",      СтрокаТаблицы.Контрагент));
		
	ИначеЕсли ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ПодарочныеСертификаты") Тогда
		
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ТипРасчетов", ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом")));
		
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным"));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ПорядокРасчетов", Новый ФиксированныйМассив(МассивПорядковРасчета)));
		
		ТипОбъектаРасчетовДоговор = ПредопределенноеЗначение("Перечисление.ТипыОбъектовРасчетов.Договор");
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ТипОбъектаРасчетов", ТипОбъектаРасчетовДоговор));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Организация",     Объект.Организация));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Партнер",         СтрокаТаблицы.Партнер));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Контрагент",      СтрокаТаблицы.Контрагент));
		
	Иначе
		
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказам"));
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов")
			ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам") Тогда
			МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным"));
		КонецЕсли;
		
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ПорядокРасчетов", Новый ФиксированныйМассив(МассивПорядковРасчета)));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Организация",     Объект.Организация));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Партнер",         СтрокаТаблицы.Партнер));
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.Контрагент",      СтрокаТаблицы.Контрагент));
		// В форме выбора заказов будет установлен отбор: Хозяйственная операция <> Передача на комиссию
		МассивПараметровВыбораОбъектаРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Неопределено));
		
	КонецЕсли;
	
	Элементы[ИмяЭлементаОбъектРасчетов].ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораОбъектаРасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораРасчетногоДокумента(ИмяЭлементаРасчетныйДокумент, СтрокаТаблицы)
	
	МассивПараметровРасчетногоДокумента = Новый Массив;
	МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.Партнер",     СтрокаТаблицы.Партнер));
	МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.Контрагент",  СтрокаТаблицы.Контрагент));
	МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов",
				СтрокаТаблицы.ВалютаВзаиморасчетов));
	
	Если ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		Или ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ПорядокРасчетов", СтрокаТаблицы.ПорядокРасчетов));
		
	ИначеЕсли ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("ДокументСсылка.ПервичныйДокумент")
		Или СтрокаТаблицы.ОбъектРасчетов = Неопределено Тогда
		
		МассивПорядковРасчета = Новый Массив;
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным"));
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным"));
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным"));
		
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ПорядокРасчетов", Новый ФиксированныйМассив(МассивПорядковРасчета)));
	ИначеЕсли ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ПодарочныеСертификаты") Тогда
		МассивПорядковРасчета = Новый Массив;
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов"));
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным"));
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказам"));
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным"));
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным"));
		
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ПорядокРасчетов", Новый ФиксированныйМассив(МассивПорядковРасчета)));
	Иначе
		//Заказ
		МассивПорядковРасчета = Новый Массив;
		МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказам"));
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов")
			ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам") Тогда
			МассивПорядковРасчета.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным"));
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТаблицы.Договор) Тогда
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.Договор", СтрокаТаблицы.Договор));
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов") Тогда
		
			МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ТипПервичногоДокумента", ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.РеализацияКлиенту")));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов") Тогда
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ТипПервичногоДокумента", ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.ОплатаОтКлиента")));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам") Тогда
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ТипПервичногоДокумента", ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.ПриобретениеУПоставщика")));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам") Тогда
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ТипПервичногоДокумента", ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику")));
		
	КонецЕсли;
	
	Элементы[ИмяЭлементаРасчетныйДокумент].ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровРасчетногоДокумента);
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьСписокВыбораТипаРасчетов(ИмяЭлементаТипРасчетов, СтрокаТаблицы)
	
	СписокВыбора = Элементы[ИмяЭлементаТипРасчетов].СписокВыбора;
	СписокВыбора.Очистить();
	Для каждого Элемент Из СписокТиповОбъектовРасчетов Цикл
		СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТаблицы.Контрагент) <> Тип("СправочникСсылка.Организации") Тогда
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка"));
		Если ЭлементСписка <> Неопределено Тогда
			СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТаблицы.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
		Если ЭлементСписка <> Неопределено Тогда
			СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка"));
		Если ЭлементСписка <> Неопределено Тогда
			СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Документ.ЗаказПоставщику.ПустаяСсылка"));
		Если ЭлементСписка <> Неопределено Тогда
			СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка"));
		Если ЭлементСписка <> Неопределено Тогда
			СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Справочник.ПодарочныеСертификаты.ПустаяСсылка"));
		Если ЭлементСписка <> Неопределено Тогда
			СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораПартнера()

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов Тогда
		
		МассивПараметров = Новый Массив;
		ПараметрВыбора   = Новый ПараметрВыбора("Отбор.Клиент", Истина);
		
		МассивПараметров.Добавить(ПараметрВыбора);
		
		Если ИспользоватьПередачиТоваровМеждуОрганизациями Тогда
			
			ПараметрВыбора = Новый ПараметрВыбора("УстанавливатьОтборПоТипуПартнераКакИЛИ", Истина);
			МассивПараметров.Добавить(ПараметрВыбора);
			
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.НашеПредприятие", Истина);
			МассивПараметров.Добавить(ПараметрВыбора);
			
		КонецЕсли;
		
		Элементы.ЗадолженностьКлиентовПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.АвансыКлиентовПартнер.ПараметрыВыбора        = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам Тогда
		
		МассивПараметров = Новый Массив;
		ПараметрВыбора   = Новый ПараметрВыбора("Отбор.Поставщик", Истина);
		
		МассивПараметров.Добавить(ПараметрВыбора);
		
		Если ИспользоватьПередачиТоваровМеждуОрганизациями Тогда
			
			ПараметрВыбора = Новый ПараметрВыбора("УстанавливатьОтборПоТипуПартнераКакИЛИ", Истина);
			МассивПараметров.Добавить(ПараметрВыбора);
			
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.НашеПредприятие", Истина);
			МассивПараметров.Добавить(ПараметрВыбора);
			
		КонецЕсли;
		
		Элементы.ЗадолженностьПоставщикамПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.АвансыПоставщикамПартнер.ПараметрыВыбора        = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВалютуВзаиморасчетовВСтроке(Строка)

	Если НЕ ЗначениеЗаполнено(Строка.ВалютаВзаиморасчетов) И Не ИспользоватьНесколькоВалют Тогда
		Строка.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьКонтрагентаВСтроке(Строка, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Строка.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНомерДатуОбъектовРасчета()
	
	Для Каждого Элемент Из Объект.РасчетыСПартнерами Цикл
		Элемент.НомерРасчетногоДокумента = "";
		Элемент.ДатаРасчетногоДокумента = Дата(1,1,1);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
