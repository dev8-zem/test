///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

//РаботаСВнешнимОборудованием
Перем глПодключаемоеОборудованиеСобытиеОбработано Экспорт; // для предотвращения повторной обработки события
Перем глПодключаемоеОборудованиеСобытиеОбработаноДанные Экспорт; // для предотвращения повторной обработки события
Перем глДоступныеТипыОборудования Экспорт;
//Конец РаботаСВнешнимОборудованием

//++ НЕ ГОСИС
Перем глКомпонентаОбменаСМобильнымиПриложениями Экспорт;
Перем глФормаНачальнойНастройкиПрограммы Экспорт;
//-- НЕ ГОСИС

// СтандартныеПодсистемы

// Хранилище глобальных переменных.
//
// ПараметрыПриложения - Соответствие - хранилище переменных, где:
//   * Ключ - Строка - имя переменной в формате "ИмяБиблиотеки.ИмяПеременной";
//   * Значение - Произвольный - значение переменной.
//
// Инициализация (на примере СообщенияДляЖурналаРегистрации):
//   ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
//   Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
//     ПараметрыПриложения.Вставить(ИмяПараметра, Новый СписокЗначений);
//   КонецЕсли;
//  
// Использование (на примере СообщенияДляЖурналаРегистрации):
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"].Добавить(...);
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"] = ...;
Перем ПараметрыПриложения Экспорт;

// Конец СтандартныеПодсистемы

// ТехнологияСервиса
Перем ОповещениеПриПримененииЗапросовНаИспользованиеВнешнихРесурсовВМоделиСервиса Экспорт;
// Конец ТехнологияСервиса

// Параметры для фоновых заданий
Перем ИдентификаторФоновогоЗадания Экспорт;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередНачаломРаботыСистемы()
	
	#Если МобильныйКлиент Тогда
		Если ОсновнойСерверДоступен() = Ложь Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	//++ НЕ ГОСИС
	#Если МобильныйКлиент Тогда
		Выполнить("глФормаНачальнойНастройкиПрограммы = ОткрытиеФормПриНачалеРаботыСистемыВызовСервера.ФормаНачальнойНастройкиПрограммы()");
	#Иначе
		глФормаНачальнойНастройкиПрограммы = ОткрытиеФормПриНачалеРаботыСистемыВызовСервера.ФормаНачальнойНастройкиПрограммы();
	#КонецЕсли
	//-- НЕ ГОСИС
	
	// СтандартныеПодсистемы
	#Если МобильныйКлиент Тогда
		Выполнить("СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы()");
	#Иначе
		СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы();
	#КонецЕсли
	// Конец СтандартныеПодсистемы
	
	//++ Локализация
	
	//++ НЕ ГОСИС
	
	// ИнтернетПоддержкаПользователей
	#Если МобильныйКлиент Тогда
		Выполнить("ИнтернетПоддержкаПользователейКлиент.ПередНачаломРаботыСистемы()");
	#Иначе
		ИнтернетПоддержкаПользователейКлиент.ПередНачаломРаботыСистемы();
	#КонецЕсли
	// Конец ИнтернетПоддержкаПользователей
	
	//-- НЕ ГОСИС
	
	//-- Локализация
	
	// ПодключаемоеОборудование
	#Если МобильныйКлиент Тогда
		Выполнить("МенеджерОборудованияКлиент.ПередНачаломРаботыСистемы()");
	#Иначе
		МенеджерОборудованияКлиент.ПередНачаломРаботыСистемы();
	#КонецЕсли
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	
	// СтандартныеПодсистемы
	#Если МобильныйКлиент Тогда
		Выполнить("СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы()");
	#Иначе
		СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы();
	#КонецЕсли
	// Конец СтандартныеПодсистемы
	
	// ПодключаемоеОборудование
	#Если МобильныйКлиент Тогда
		Выполнить("МенеджерОборудованияКлиент.ПриНачалеРаботыСистемы()");
	#Иначе
		МенеджерОборудованияКлиент.ПриНачалеРаботыСистемы();
	#КонецЕсли
	// Конец ПодключаемоеОборудование
	
	#Если МобильныйКлиент Тогда
		Если ОбменМобильныеВызовПК.ТребуетсяОбменДаннымиСАвтономнымПриложением() Тогда
			Если ОсновнойСерверДоступен() = Истина Тогда
				ОбменМобильныеАвтономныйКлиент.НачатьОбмен();
			КонецЕсли;
			ПодключитьОбработчикОжидания("ПроверкаНеобходимостиСинхронизации", 10);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)
	
	// СтандартныеПодсистемы
	#Если МобильныйКлиент Тогда
		Выполнить("СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)");
	#Иначе
		СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения);
	#КонецЕсли
	// Конец СтандартныеПодсистемы
	
	// ПодключаемоеОборудование
	#Если МобильныйКлиент Тогда
		Выполнить("МенеджерОборудованияКлиент.ПередЗавершениемРаботыСистемы()");
	#Иначе
		МенеджерОборудованияКлиент.ПередЗавершениемРаботыСистемы();
	#КонецЕсли
	// Конец ПодключаемоеОборудование
	
	Если глКомпонентаОбменаСМобильнымиПриложениями <> Неопределено Тогда
		
		Попытка
			глКомпонентаОбменаСМобильнымиПриложениями.Отключить(0);
		Исключение
			ИмяСобытия = НСтр("ru='Ошибка при отключении компоненты обмена данными'");
			#Если МобильныйКлиент Тогда
				Выполнить("ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, ""Ошибка"", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,Истина)");
			#Иначе
				ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
				ИмяСобытия,
				"Ошибка",
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,Истина);
			#КонецЕсли
		КонецПопытки;
		
		глКомпонентаОбменаСМобильнымиПриложениями = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)
	
	//++ НЕ ГОСИС
	Если Лев(Источник, 17) = "MobileApplication" Тогда
		#Если МобильныйКлиент Тогда
			Выполнить("МобильныеПриложенияКлиент.ОбработатьВнешнееСобытиеОтМобильногоПриложения(Источник, Событие, Данные)");
		#Иначе
			МобильныеПриложенияКлиент.ОбработатьВнешнееСобытиеОтМобильногоПриложения(Источник, Событие, Данные);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Если глПодключаемоеОборудованиеСобытиеОбработаноДанные <> Неопределено
		И глПодключаемоеОборудованиеСобытиеОбработаноДанные[Данные] <> Неопределено Тогда
		глПодключаемоеОборудованиеСобытиеОбработаноДанные.Удалить(Данные);
		Возврат;
	КонецЕсли;
	
	глПодключаемоеОборудованиеСобытиеОбработано = Ложь;
	
	//РаботаСВнешнимОборудованием
	// Подготовить данные
	ОписаниеСобытия = Новый Структура();
	ОписаниеОшибки  = "";
	
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие",  Событие);
	ОписаниеСобытия.Вставить("Данные",   Данные);
	
	// Передать на обработку данные
	Результат = Истина;
	#Если МобильныйКлиент Тогда
		Выполнить("Результат = МенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки)");
	#Иначе
		Результат = МенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
	#КонецЕсли
	Если Не Результат Тогда
		#Если МобильныйКлиент Тогда
			Выполнить("ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(""ru='При обработке внешнего события от устройства произошла ошибка.'"")+ Символы.ПС + ОписаниеОшибки)");
		#Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='При обработке внешнего события от устройства произошла ошибка.'")
			+ Символы.ПС + ОписаниеОшибки);
		#КонецЕсли
	КонецЕсли;
	//Конец РаботаСВнешнимОборудованием
	
КонецПроцедуры

Процедура ОбработкаПолученияФормыВыбораПользователейСистемыВзаимодействия(НазначениеВыбора, Форма, ИдентификаторОбсуждения, Параметры, ВыбраннаяФорма, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Обсуждения
	ПодсистемаСуществует = Ложь;
	#Если МобильныйКлиент Тогда
		Выполнить("ПодсистемаСуществует = ОбщегоНазначенияКлиент.ПодсистемаСуществует(""СтандартныеПодсистемы.Обсуждения"")");
	#Иначе
		ПодсистемаСуществует = ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения");
	#КонецЕсли
	
	Если ПодсистемаСуществует Тогда
		#Если МобильныйКлиент Тогда
			Выполнить("МодульОбсужденияСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(""ОбсужденияСлужебныйКлиент"")");
			Выполнить("МодульОбсужденияСлужебныйКлиент.ПриПолученииФормыВыбораПользователейСистемыВзаимодействия(НазначениеВыбора, Форма, ИдентификаторОбсуждения, Параметры, ВыбраннаяФорма, СтандартнаяОбработка)");
		#Иначе
			МодульОбсужденияСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияСлужебныйКлиент");
			МодульОбсужденияСлужебныйКлиент.ПриПолученииФормыВыбораПользователейСистемыВзаимодействия(НазначениеВыбора, Форма, ИдентификаторОбсуждения, Параметры, ВыбраннаяФорма, СтандартнаяОбработка);
		#КонецЕсли
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Обсуждения
	
КонецПроцедуры

#КонецОбласти

// Процедура осуществляет проверку на необходимость обмена данными с заданным интервалом
Процедура ПроверкаНеобходимостиСинхронизации() Экспорт

#Если МобильныйКлиент Тогда
	Если ОсновнойСерверДоступен() = Истина Тогда
		ОбменМобильныеАвтономныйКлиент.НачатьОбмен();
	КонецЕсли;
#КонецЕсли

КонецПроцедуры

#Если МобильныйКлиент Тогда
Процедура НаблюдениеЗаСинхронизацией() Экспорт
	
	ТекстОшибки = "";
	Если ОбменМобильныеАвтономныйСервер.ОбменДаннымиЗакончен(ИдентификаторФоновогоЗадания, ТекстОшибки) Тогда
		ОтключитьОбработчикОжидания("НаблюдениеЗаСинхронизацией");
		Если  ТекстОшибки <> "" Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
		Иначе
			Если ОсновнойСерверДоступен() = Истина Тогда
				ОбменМобильныеКлиент.ОповеститьОЗавершении();
			КонецЕсли
		КонецЕсли
	КонецЕсли
	
КонецПроцедуры
#КонецЕсли

Процедура ПриИзмененииДоступностиОсновногоСервера(НачалоСеансаОсновногоСервера)
#Если МобильныйКлиент Тогда
	Если НЕ НачалоСеансаОсновногоСервера Тогда
		ОбменМобильныеАвтономныйКлиент.ОтключитьОбработчикиОжидания();
	КонецЕсли;
#КонецЕсли
КонецПроцедуры

#Область Инициализация

глПодключаемоеОборудованиеСобытиеОбработано = Ложь;

#КонецОбласти