
#Область ПрограммныйИнтерфейс

#Область РаботаССервисомShare

// Возвращает структуру, состава команд исходящих и входящих документов доступных для обмена в сервисе 1С:Share.
// 
// Возвращаемое значение:
//  Структура - состав команд исходящих и входящих документов:
//   * Исходящие - Массив Из Строка - наименование объекта метаданных. Например: Документ.СчетНаОплатуПокупателю.
//   * Входящие  - Массив Из Строка - наименование объекта метаданных. Например: Документ.СчетНаОплатуПоставщика.
//
Функция НовыйСоставКомандShare() Экспорт
	
	СоставКоманды = Новый Структура;
	СоставКоманды.Вставить("Исходящие", Новый Массив);
	СоставКоманды.Вставить("Входящие" , Новый Массив);
	
	Возврат СоставКоманды;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДляВызоваИзЭлектронногоВзаимодействия

// ОбменСКонтрагентами.ЭлектронныеДокументы.ПодключаемыеКоманды
// См. ПодключаемыеКомандыЭДО.ПриОпределенииСпискаКомандЭДО.
Процедура ПриОпределенииСпискаКомандЭДО(Знач СоставКоманд, Знач ПолноеИмя, Знач НаправлениеЭД, КомандыЭДО) Экспорт
	
	Если СоставКоманд.Исходящие.Найти(ПолноеИмя) <> Неопределено 
			И НаправлениеЭД <> Перечисления.НаправленияЭДО.Входящий
			И ПравоДоступа("Вывод", Метаданные) Тогда
			
		КомандыShare = НовыйСоставКомандShare();
		ИнтеграцияShareПереопределяемый.ПриОпределенииСоставаКомандShare(КомандыShare);
		
		Если КомандыShare.Исходящие.Найти(ПолноеИмя) <> Неопределено Тогда
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтеграцияShareКлиент.ОткрытьФормуПоделитьсяДокументом";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ПоделитьсяДокументомShare";
			КомандаЭДО.Представление = НСтр("ru = 'Поделиться документом'", ОбщегоНазначения.КодОсновногоЯзыка());
			КомандаЭДО.Порядок       = 101;
			КомандаЭДО.Картинка      = БиблиотекаКартинок["Поделиться"];
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "";
			КомандаЭДО.Недоступна      = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСервиса

// Отправляет электронный документ в сервис 1С:Share и формирует короткую ссылку на скачивание.
//
// Параметры:
//  ПараметрыДокумента - Структура - параметры документа для скачивания
//                                   см. ИнтеграцияShareКлиентСервер.НовыеПараметрыЭлектронногоДокумента
//  Отказ              - Булево - признак отказа выполнения.
//
Процедура ОпубликоватьИПолучитьСсылкуНаСкачиваниеДокумента(ПараметрыДокумента, Отказ) Экспорт
	
	СсылкаНаДокумент = ПараметрыДокумента.ЭлектронныйДокумент;
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СсылкиНаДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаДокумент);
	ЭлектронноеВзаимодействиеПереопределяемый.ПроверитьГотовностьИсточников(СсылкиНаДокументы, Истина);
	
	Если СсылкиНаДокументы.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов = ЭлектронныеДокументыДляВыгрузки(СсылкиНаДокументы);
	
	Если Не ЗначениеЗаполнено(ТаблицаДокументов) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = ТаблицаДокументов[0];
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаОтправитьДокумент();
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДанныеДокумента);
	
	ПараметрыЗапроса.ДанныеОрганизации = ДанныеУчастникаОбмена(ПараметрыЗапроса.Организация);
	ПараметрыЗапроса.ДанныеКонтрагента = ДанныеУчастникаОбмена(ПараметрыЗапроса.Контрагент);
	
	ПараметрыЗапроса.ПредставлениеОбъекта = Строка(ПараметрыЗапроса.ОбъектУчета);
	
	ЗапросСервиса = ЗапросСервисаОтправитьДокумент(ПараметрыЗапроса, Отказ);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗапроса = Неопределено
		Или Не РезультатЗапроса.Данные.Свойство("shortLink")
		Или ПустаяСтрока(РезультатЗапроса.Данные.Свойство("shortLink")) Тогда
		СообщениеОбОшибке = НСтр("ru='Получен некорректный ответ от сервиса 1С:Share'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(СообщениеОбОшибке, ИнтеграцияShareКлиентСервер.ИмяПодсистемы());
		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента.Контрагент                   = ПараметрыЗапроса.Контрагент;
	ПараметрыДокумента.ПредставлениеДокумента       = ПараметрыЗапроса.Наименование;
	ПараметрыДокумента.ОрганизацияНаименование      = ПараметрыЗапроса.ДанныеОрганизации.Наименование;
	ПараметрыДокумента.КонтрагентНаименование       = ПараметрыЗапроса.ДанныеКонтрагента.Наименование;
	ПараметрыДокумента.СуммаДокумента               = ПараметрыЗапроса.Сумма;
	ПараметрыДокумента.ВалютаДокумента              = ПараметрыЗапроса.Валюта;
	ПараметрыДокумента.СсылкаДляСкачиванияДокумента = РезультатЗапроса.Данные.shortLink;
	
КонецПроцедуры

// Загружает данные документа по публичной ссылки из сервиса 1С:Share.
//
// Параметры:
//  СсылкаДляСкачивания - Строка - адрес ссылки для скачивания документа.
//  ДанныеДокумента     - Структура - см. РезультатОбработкиПолученияДанныхДокументаПоПубличнойСсылке
//  Отказ               - Булево - признак отказа выполнения.
//
Процедура ЗагрузитьДанныеДокументаПоПубличнойСсылке(Знач СсылкаДляСкачивания, ДанныеДокумента, Отказ) Экспорт
	
	ЗапросСервиса = ЗапросСервисаПолучитьДанныеДокументаПоПубличнойСсылке(СсылкаДляСкачивания);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = РезультатОбработкиПолученияДанныхДокументаПоПубличнойСсылке(РезультатЗапроса);
	
КонецПроцедуры

Процедура ЗагрузитьЭлектронныйДокумент(Знач ИдентификаторДокумента, АдресХранилищаРезультата) Экспорт
	
	Отказ = Ложь;
	
	ЗапросСервиса = ЗапросСервисаПолучитьДанныеДокументаДляЗагрузки(ИдентификаторДокумента);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		ПоместитьВоВременноеХранилище(Неопределено, АдресХранилищаРезультата);
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = НовоеОписаниеЭлектронногоДокументаДляЗагрузки();
	ДанныеДокумента.ИдентификаторЭлектронногоДокумента = ИдентификаторДокумента;
	
	ОбработатьРезультатПолученияДанныхДокументаДляЗагрузки(РезультатЗапроса, ДанныеДокумента);
	
	ТипыОбъектаУчета = ТипыОбъектаУчетаЭлектронногоДокумента(ДанныеДокумента.ТипДокумента);
	ДанныеДокумента.ДокументУчета = СсылкаНаОбъектУчетаЭлектронногоДокумента(ДанныеДокумента.ИдентификаторДокумента,
		ТипыОбъектаУчета);
		
	Если ЗначениеЗаполнено(ДанныеДокумента.ДокументУчета) Тогда
		ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресХранилищаРезультата);
		Возврат;
	КонецЕсли;
	
	ДополнитьДанныеУчастниковОбмена(ДанныеДокумента);
	
	ДополнитьОписаниеПакетаДокументов(ДанныеДокумента);

	ПроверитьСопоставлениеНоменклатурыДокумента(ДанныеДокумента, Отказ);
	
	Если Отказ Тогда
		ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресХранилищаРезультата);
		Возврат;
	КонецЕсли;
	
	СоздатьВУчетеЭлектронныйДокумент(ДанныеДокумента, АдресХранилищаРезультата);
	
КонецПроцедуры

Процедура СоздатьВУчетеЭлектронныйДокумент(Знач ДанныеДокумента, АдресХранилищаРезультата) Экспорт
	
	ПараметрыОтраженияВУчете = ОбменСКонтрагентамиИнтеграция.НовыеДанныеДокументаДляОтраженияВУчете();
	ПараметрыОтраженияВУчете.Отправитель  = ДанныеДокумента.Контрагент;
	ПараметрыОтраженияВУчете.ТипДокумента = ДанныеДокумента.ВидЭД;
	ПараметрыОтраженияВУчете.Направление  = ДанныеДокумента.НаправлениеЭД;
	ПараметрыОтраженияВУчете.ДанныеОсновногоФайла       = ДанныеДокумента.ДанныеОсновногоФайла.ДвоичныеДанные;
	ПараметрыОтраженияВУчете.ДанныеДополнительногоФайла = ДанныеДокумента.ДанныеФайлаДопДанных.ДвоичныеДанные;

	МассивОбъектов = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеДокумента.ДокументУчета) Тогда
		МассивОбъектов.Добавить(ДанныеДокумента.ДокументУчета);
	КонецЕсли;
	
	ТипыОбъектаУчета = ТипыОбъектаУчетаЭлектронногоДокумента(ДанныеДокумента.ТипДокумента);
	Если ЗначениеЗаполнено(ТипыОбъектаУчета) Тогда
		ПараметрыОтраженияВУчете.СпособОбработки = ТипыОбъектаУчета[0].Представление;
	КонецЕсли;

	Отказ = Ложь;
	ОбменСКонтрагентамиИнтеграция.ОтразитьВУчетеЭлектронныйДокумент(ПараметрыОтраженияВУчете, МассивОбъектов, Отказ);

	Если Не ЗначениеЗаполнено(ДанныеДокумента.ДокументУчета) И ЗначениеЗаполнено(МассивОбъектов) Тогда
		ДанныеДокумента.ДокументУчета = МассивОбъектов[0];
	КонецЕсли;

	Если Отказ Тогда
		ПодробноеОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не удалось загрузить документ %1.
												 |Подробности см. в журнале регистрации.'",
			ОбщегоНазначения.КодОсновногоЯзыка()), ДанныеДокумента.ПредставлениеДокумента);

		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеОписаниеОшибки,
			ИнтеграцияShareКлиентСервер.ИмяПодсистемы());
		ОбщегоНазначения.СообщитьПользователю(ПодробноеОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ОтметитьЗагрузкуДокументаВСервисе(ДанныеДокумента, Отказ);
	
	ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресХранилищаРезультата);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСДанными

Функция ЭлектронныеДокументыДляВыгрузки(Знач СсылкиНаДокументы)
	
	ТекстОшибки = "";
	
	ОписанияОбъектовУчета = ОбменСКонтрагентамиИнтеграция.ОписанияОбъектовУчета(СсылкиНаДокументы);
	ПараметрыВизуализацииОбъектовУчета = Новый Соответствие;
	Для Каждого ОписаниеОбъектаУчета Из ОписанияОбъектовУчета Цикл
		ПараметрыВизуализации = ОбменСКонтрагентамиИнтеграция.НовыеПараметрыВизуализации();
		ПараметрыВизуализации.ВыводитьДопДанные           = Ложь;
		ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = Ложь;
		ПараметрыВизуализации.ВыводитьКопияВерна          = Ложь;
		ПараметрыВизуализацииОбъектовУчета.Вставить(ОписаниеОбъектаУчета.ОбъектУчета, ПараметрыВизуализации);
	КонецЦикла;
	
	ДанныеДляВыгрузки = ОбменСКонтрагентамиИнтеграция.СформироватьДанныеДляВыгрузки(ОписанияОбъектовУчета,
		ПараметрыВизуализацииОбъектовУчета, ТекстОшибки);
		
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеДляВыгрузки;
	
КонецФункции

Функция ПредставлениеДокументаВФорматеPDF(Знач ДвоичныеДанныеПечатнойФормы)
	
	ПотокПредставления = Новый ПотокВПамяти;
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.Прочитать(ДвоичныеДанныеПечатнойФормы.ОткрытьПотокДляЧтения());
	ПечатнаяФорма.Записать(ПотокПредставления, ТипФайлаТабличногоДокумента.PDF);
	
	Возврат ПотокПредставления.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

Функция ДанныеУчастникаОбмена(Знач УчастникОбмена)
	
	СведенияУчастника = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(УчастникОбмена);
	
	Наименование = СведенияУчастника.Наименование;
	Если ПустаяСтрока(Наименование) Тогда
		Наименование = СведенияУчастника.СокращенноеНаименование;
	КонецЕсли;
	Если ПустаяСтрока(Наименование) Тогда
		Наименование = СведенияУчастника.ПолноеНаименование;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.вставить("Наименование", Наименование);
	Результат.вставить("ИНН"         , СведенияУчастника.ИНН);
	Результат.вставить("КПП"         , СведенияУчастника.КПП);
	
	Возврат Результат;
	
КонецФункции

Функция ТипыОбъектаУчетаЭлектронногоДокумента(Знач ТипЭлектронногоДокумента)
	
	Если НРег(Лев(ТипЭлектронногоДокумента, 3)) = "v8." Тогда
		ТипЭлектронногоДокумента = Сред(ТипЭлектронногоДокумента, 4);
	КонецЕсли;
	
	ТипДокумента = ОбменСКонтрагентамиИнтеграция.ТипДокументаПоЗначениюСервиса(ТипЭлектронногоДокумента);
	Если ТипДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипыОбъектов = ИнтеграцияЭДО.ТипыОбъектовУчетаПоТипуЭлектронногоДокумента(ТипДокумента);
	
	КомандыShare = НовыйСоставКомандShare();
	ИнтеграцияShareПереопределяемый.ПриОпределенииСоставаКомандShare(КомандыShare);
	
	ТипыОбъектовНаУдаление = Новый Массив;
	Для Каждого ТипОбъекта Из ТипыОбъектов Цикл
		ПолноеИмя = ТипОбъекта.Значение.Метаданные().ПолноеИмя();
		Если КомандыShare.Входящие.Найти(ПолноеИмя) = Неопределено Тогда
			ТипыОбъектовНаУдаление.Добавить(ТипОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТипОбъекта Из ТипыОбъектовНаУдаление Цикл
		ТипыОбъектов.Удалить(ТипОбъекта);
	КонецЦикла;
		
	Возврат ТипыОбъектов;
	
КонецФункции

Функция СсылкаНаОбъектУчетаЭлектронногоДокумента(Знач ИдентификаторДокумента, Знач ТипыОбъектаУчета)
	
	Если Не ЗначениеЗаполнено(ИдентификаторДокумента)
		Или ТипыОбъектаУчета = Неопределено
		Или ТипыОбъектаУчета.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Счетчик = 0 По ТипыОбъектаУчета.Количество() - 1 Цикл
		НаименованиеТипа = ТипыОбъектаУчета.Получить(Счетчик).Значение.Метаданные().Имя;
		СсылкаНаОбъектУчета = Документы[НаименованиеТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторДокумента));
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъектУчета)
			И Не СсылкаНаОбъектУчета.ПометкаУдаления Тогда
			Возврат СсылкаНаОбъектУчета;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ЗаголовокЗагружаемогоДокумента(Знач ДанныеСервиса)
	
	Возврат СтрШаблон(НСтр("ru = 'Загрузить %1 от %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеСервиса.ПредставлениеДокумента,
			ДанныеСервиса.НаименованиеОрганизации);
	
КонецФункции

Процедура ДополнитьДанныеУчастниковОбмена(ДанныеДокумента)

	Контрагент = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП(
		"Контрагенты", ДанныеДокумента.КонтрагентИНН, ДанныеДокумента.КонтрагентКПП, Контрагент);
	ДанныеДокумента.Контрагент = Контрагент;

	Организация = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП(
		"Организации", ДанныеДокумента.ОрганизацияИНН, ДанныеДокумента.ОрганизацияКПП, Организация);
	ДанныеДокумента.Организация = Организация;

	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыКонтрагента = Новый Структура;
		РеквизитыКонтрагента.Вставить("ИНН", ДанныеДокумента.КонтрагентИНН);
		РеквизитыКонтрагента.Вставить("КПП", ДанныеДокумента.КонтрагентКПП);
		РеквизитыКонтрагента.Вставить("Наименование", ДанныеДокумента.КонтрагентНаименование);

		ОбменСКонтрагентамиПереопределяемый.СоздатьКонтрагентаПоРеквизитам(РеквизитыКонтрагента, ДанныеДокумента.Контрагент);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьСопоставлениеНоменклатурыДокумента(ДанныеДокумента, Отказ)

	НоменклатураСопоставленияДокументов = НоваяТаблицаСопоставленияНоменклатурыДокумента();
	НоменклатураСопоставленияПоДокументу = ОбменСКонтрагентамиИнтеграция.ДанныеНеСопоставленнойНоменклатурыДокумента(
			ДанныеДокумента.ДанныеОсновногоФайла, ДанныеДокумента.Контрагент);

	Для Каждого ЭлементКоллекции Из НоменклатураСопоставленияПоДокументу Цикл

		Отбор = НовыйОтборСопоставленияНоменклатурыДокумента();
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементКоллекции);
		Если НоменклатураСопоставленияДокументов.НайтиСтроки(Отбор).Количество() = 0 Тогда
			НоваяЗапись = НоменклатураСопоставленияДокументов.Добавить();
			НоваяЗапись.ДанныеНоменклатурыКонтрагента = ЭлементКоллекции;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ЭлементКоллекции);
		КонецЕсли;

	КонецЦикла;

	Если НоменклатураСопоставленияДокументов.Количество() Тогда
		Отказ = Истина;
		ДанныеДокумента.НоменклатураСопоставления = НоменклатураСопоставленияДокументов.ВыгрузитьКолонку(
			"ДанныеНоменклатурыКонтрагента");
		ДанныеДокумента.ТребуетсяСопоставлениеНоменклатуры = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьОписаниеПакетаДокументов(ДанныеДокумента)
	
	ДанныеДокумента.НаправлениеЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий");
	
	ОписаниеФайлаПакета = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	ОписаниеФайлаПакета.ДвоичныеДанные = ДанныеДокумента.ДвоичныеДанныеДокумента;

	ОписаниеПакета = ОбменСКонтрагентамиИнтеграция.ОписаниеПакета(ОписаниеФайлаПакета);

	ДанныеДокумента.ДанныеОсновногоФайла = ОписаниеПакета.ДанныеОсновногоФайла;
	ДанныеДокумента.ДанныеФайлаДопДанных = ОписаниеПакета.ДанныеФайлаДопДанных;
	ДанныеДокумента.ВидЭД                = ОписаниеПакета.Содержание.ТипДокумента;
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Описание запроса к сервису.
//
// Возвращаемое значение:
//  Структура - содержит стандартный набор параметров для выполнения команд сервиса:
//    * Сервис        - Строка - имя сервиса.
//    * АдресСервиса  - Строка - адрес сервиса.
//    * Наименование  - Строка - полное наименование метода.
//    * СтрокаЗапроса - Строка - адрес URI метода.
//    * Метод         - Строка - метод HTTP соединения, например POST.
//    * Данные        - ДвоичныеДанные, Строка, Неопределено - передаваемые данные.
//    * Ошибки        - Соответствие из КлючИЗначение - Соответствие ошибок, например: (404, "Не найдено"):
//      ** Ключ     - Число
//      ** Значение - Строка
//    * БлокироватьСообщенияОбОшибках - Булево - блокировка вывода сообщения об ошибках.
//    * Заголовки                     - Соответствие из Строка- данные заголовков:
//       ** Ключ - Строка - наименование заголовка HTTP запроса.
//       ** Значение - Строка - значение заголовка HTTP запроса.
//    * ТипПередаваемогоКонтента      - Строка - описание контента передаваемого в заголовке.
//    * ТипВозвращаемогоКонтента      - Строка - описание контента для чтения данных.
//    * ДопустимыеКодыСостояния       - Массив из Число - коды состояния, означающие успешное выполнение запроса.
//
Функция НовыйЗапросСервиса()
	
	ЗапросСервиса = Новый Структура;
	ЗапросСервиса.Вставить("Сервис"                       , "Share");
	ЗапросСервиса.Вставить("АдресСервиса"                 , "");
	ЗапросСервиса.Вставить("Наименование"                 , "");
	ЗапросСервиса.Вставить("СтрокаЗапроса"                , "");
	ЗапросСервиса.Вставить("Метод"                        , "");
	ЗапросСервиса.Вставить("Данные"                       , Неопределено);
	ЗапросСервиса.Вставить("Ошибки"                       , Новый Соответствие);
	ЗапросСервиса.Вставить("БлокироватьСообщенияОбОшибках", Ложь);
	ЗапросСервиса.Вставить("Заголовки"                    , Новый Соответствие);
	ЗапросСервиса.Вставить("ТипПередаваемогоКонтента"     , "");
	ЗапросСервиса.Вставить("ТипВозвращаемогоКонтента"     , "");
	ЗапросСервиса.Вставить("ДопустимыеКодыСостояния"      , Новый Массив());

	Возврат ЗапросСервиса;
	
КонецФункции

// Параметры метода для отправки документа в сервис
//
// Возвращаемое значение:
//  Структура - содержит набор параметров для отправки документа в сервис:
//   * УникальныйИдентификатор       - УникальныйИдентификатор - уникальный идентификатор пакета документов.
//   * Организация                   - СправочникСсылка - ссылка на контрагента получателя документа.
//   * Контрагент                    - СправочникСсылка - ссылка на организацию отправителя документа.
//   * Наименование                  - Строка - заголовок ответного электронного документа,
//                                            например "Ответ на заказ 134 от 01.01.2023".
//   * ОбъектУчета                   - ДокументСсылка - ссылка на учетный документ.
//   * ТипДокумента                  - Строка - тип электронного документа.
//   * Валюта                        - Строка - валюта документа. По умолчанию "руб."
//   * Сумма                         - Число - сумма документа.
//   * Номер                         - Строка - номер документа.
//   * Дата                          - Дата - дата документа.
//   * ПолноеИмяФайла                - Строка - представление документа PDF.
//   * ДвоичныеДанныеПакета          - ДвоичныеДанные - двоичные данные контейнера электронного документа.
//   * РасширениеДанныхДокумента     - Строка - формат расширения файла с данными электронного документа.
//                                              По умолчанию "zip"
//   * ДвоичныеДанныеПредставления   - ДвоичныеДанные - двоичные данные файла с представлением документа PDF.
//   * РасширениеДанныхПредставления - Строка - формат расширения файла с представлением документа. По Умолчанию "pdf"
//   * ДанныеКонтрагента             - Структура - см. ДанныеУчастникаОбмена()
//   * ДанныеОрганизации             - Структура - см. ДанныеУчастникаОбмена()
//   * ПредставлениеОбъекта          - Строка - представление учетного документа.
//
Функция НовыеПараметрыЗапросаОтправитьДокумент()
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("УникальныйИдентификатор");
	ПараметрыЗапроса.Вставить("Организация");
	ПараметрыЗапроса.Вставить("Контрагент");
	ПараметрыЗапроса.Вставить("Наименование", "");
	ПараметрыЗапроса.Вставить("ОбъектУчета");
	ПараметрыЗапроса.Вставить("ТипДокумента", "");
	ПараметрыЗапроса.Вставить("Валюта", "руб.");
	ПараметрыЗапроса.Вставить("Сумма", 0);
	ПараметрыЗапроса.Вставить("Номер", "");
	ПараметрыЗапроса.Вставить("Дата", Дата(1,1,1));
	ПараметрыЗапроса.Вставить("ПолноеИмяФайла", "");
	ПараметрыЗапроса.Вставить("ДвоичныеДанныеПакета");
	ПараметрыЗапроса.Вставить("РасширениеДанныхДокумента", "zip");
	ПараметрыЗапроса.Вставить("ДвоичныеДанныеПредставления");
	ПараметрыЗапроса.Вставить("РасширениеДанныхПредставления", "pdf");
	ПараметрыЗапроса.Вставить("ДанныеКонтрагента");
	ПараметрыЗапроса.Вставить("ДанныеОрганизации");
	ПараметрыЗапроса.Вставить("ПредставлениеОбъекта", "");
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция НовыйОтборСопоставленияНоменклатурыДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("Владелец");
	Результат.Вставить("Идентификатор");
	Результат.Вставить("ИдентификаторНоменклатурыСервиса");
	Результат.Вставить("ИдентификаторХарактеристикиСервиса");
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаСопоставленияНоменклатурыДокумента()

	НоменклатураСопоставленияДокументов = Новый ТаблицаЗначений;
	НоменклатураСопоставленияДокументов.Колонки.Добавить("Владелец");
	НоменклатураСопоставленияДокументов.Колонки.Добавить("Идентификатор");
	НоменклатураСопоставленияДокументов.Колонки.Добавить("ИдентификаторНоменклатурыСервиса");
	НоменклатураСопоставленияДокументов.Колонки.Добавить("ИдентификаторХарактеристикиСервиса");
	НоменклатураСопоставленияДокументов.Колонки.Добавить("ДанныеНоменклатурыКонтрагента");

	Возврат НоменклатураСопоставленияДокументов;

КонецФункции

Функция НовоеОписаниеЭлектронногоДокументаДляЗагрузки()
	
	Результат = Новый Структура;
	Результат.Вставить("ОрганизацияИНН");
	Результат.Вставить("ОрганизацияКПП");
	Результат.Вставить("КонтрагентНаименование");
	Результат.Вставить("КонтрагентИНН");
	Результат.Вставить("КонтрагентКПП");
	Результат.Вставить("ИдентификаторЭлектронногоДокумента");
	Результат.Вставить("ПредставлениеДокумента");
	Результат.Вставить("ТипДокумента");
	Результат.Вставить("ДвоичныеДанныеПредставленияДокумента");
	Результат.Вставить("ДвоичныеДанныеДокумента");
	
	Результат.Вставить("Контрагент");
	Результат.Вставить("Организация");
	Результат.Вставить("НоменклатураСопоставления", Новый Массив());
	Результат.Вставить("ТребуетсяСопоставлениеНоменклатуры", Ложь);
	Результат.Вставить("ДанныеОсновногоФайла");
	Результат.Вставить("ДанныеФайлаДопДанных");
	Результат.Вставить("ВидЭД");
	Результат.Вставить("НаправлениеЭД");
	Результат.Вставить("ДокументУчета");
	Результат.Вставить("ИдентификаторДокумента");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

// Получение значения в формате строки JSON.
//
// Параметры:
//  Данные          - Произвольный - значение записи JSON.
//  ПараметрыЗаписи - ПараметрыЗаписиJSON  - параметры записи JSON.
// 
// Возвращаемое значение:
//  Строка - значение в строке JSON.
//
Функция ЗначениеВJSON(Данные, ПараметрыЗаписи = Неопределено)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураИзПотокаJSON(Знач ПотокДанных)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(ПотокДанных);
	Результат = ПрочитатьJSON(ЧтениеJSON,,,ФорматДатыJSON.ISO);

	ЧтениеJSON.Закрыть();
	ПотокДанных.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСервиса

// Параметры запроса отправить документ.
//
// Параметры:
//  ПараметрыЗапроса - Структура - содержит данные документа для отправки см. НовыеПараметрыЗапросаОтправитьДокумент
//  Отказ            - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. НовыйЗапросСервиса.
//
Функция ЗапросСервисаОтправитьДокумент(Знач ПараметрыЗапроса, Отказ = Ложь)

	СтруктураПолучателя  = ЗаполнитьДанныеОбУчастникеОбмена(ПараметрыЗапроса.ДанныеКонтрагента);
	СтруктураОтправителя = ЗаполнитьДанныеОбУчастникеОбмена(ПараметрыЗапроса.ДанныеОрганизации);
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("recipientOrganization", СтруктураПолучателя);
	ДанныеДокумента.Вставить("senderOrganization"   , СтруктураОтправителя);
	ДанныеДокумента.Вставить("documentDataType"     , СтрШаблон("v8.%1", XMLСтрока(ПараметрыЗапроса.ТипДокумента)));
	ДанныеДокумента.Вставить("documentData"         , Base64Строка(ПараметрыЗапроса.ДвоичныеДанныеПакета));
	ДанныеДокумента.Вставить("documentDataTypeFile" , ПараметрыЗапроса.РасширениеДанныхДокумента); //
	ДанныеДокумента.Вставить("documentTitle"        , ПараметрыЗапроса.Наименование);
	ДанныеДокумента.Вставить("documentGuid"         , XMLСтрока(ПараметрыЗапроса.ОбъектУчета));
	ДанныеДокумента.Вставить("documentName"         , ПараметрыЗапроса.ПредставлениеОбъекта);
	ДанныеДокумента.Вставить("documentDate"         , ПараметрыЗапроса.Дата);
	ДанныеДокумента.Вставить("documentNumber"       , ПараметрыЗапроса.Номер);
	ДанныеДокумента.Вставить("amount"               , ПараметрыЗапроса.Сумма);
	ДанныеДокумента.Вставить("currency"             , ПараметрыЗапроса.Валюта);
	ДанныеДокумента.Вставить("metaData"             , ПараметрыЗапроса.ОбъектУчета.Метаданные().Имя);
	ДанныеДокумента.Вставить("author"               , Строка(Пользователи.АвторизованныйПользователь()));

	Если ПараметрыЗапроса.Свойство("ДвоичныеДанныеПредставления")
		И ЗначениеЗаполнено(ПараметрыЗапроса.ДвоичныеДанныеПредставления) Тогда
		ПредставлениеДокумента = ПредставлениеДокументаВФорматеPDF(ПараметрыЗапроса.ДвоичныеДанныеПредставления);
		ДанныеДокумента.Вставить("documentPresentationData", Base64Строка(ПредставлениеДокумента));
		ДанныеДокумента.Вставить("documentPresentationTypeFile", ПараметрыЗапроса.РасширениеДанныхПредставления);
	КонецЕсли;

	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Данные                   = ЗначениеВJSON(ДанныеДокумента);
	ЗапросСервиса.СтрокаЗапроса            = "api/documents";
	ЗапросСервиса.ТипПередаваемогоКонтента = "application/vnd-1cshare-doc.v1+json";
	ЗапросСервиса.ТипВозвращаемогоКонтента = "application/vnd-1cshare-shortLink.v1+json";
	ЗапросСервиса.Метод                    = "POST";
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияСоздано());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Отправка документа в сервис 1С:Share'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗаполнитьДанныеОбУчастникеОбмена(Знач ДанныеУчастникаОбмена)
	
	Результат = Новый Структура();
	Результат.Вставить("name", ДанныеУчастникаОбмена.Наименование);
	Результат.Вставить("inn" , ДанныеУчастникаОбмена.ИНН);
	Результат.Вставить("kpp" , ДанныеУчастникаОбмена.КПП);
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросСервисаПолучитьДанныеДокументаПоПубличнойСсылке(Знач СсылкаДляСкачивания)
	
	СтрокаЗапроса = АдресЗапросаПубличнойСсылки(СсылкаДляСкачивания);
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.СтрокаЗапроса            = СтрокаЗапроса;
	ЗапросСервиса.ТипВозвращаемогоКонтента = "application/vnd-1cshare-shortLink-doc.v1+json";
	ЗапросСервиса.Метод                    = "GET";
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияВыполнено());
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияНеНайден());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Получение сведений публичной ссылки в сервисе 1С:Share'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучитьДанныеДокументаДляЗагрузки(Знач ИдентификаторДокументаСервиса)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.СтрокаЗапроса            = СтрШаблон("api/documents/%1", ИдентификаторДокументаСервиса);
	ЗапросСервиса.ТипВозвращаемогоКонтента = "application/vnd-1cshare-doc.v1+json";
	ЗапросСервиса.Метод                    = "GET";
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияВыполнено());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Получение данных документа в сервисе 1С:Share'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Возврат ЗапросСервиса;
	
КонецФункции

Процедура УстановитьСлужебныеДанныеВЗаголовки(HTTPЗапрос)
	
	ДанныеЗаголовков = ИнтеграцияShareПовтИсп.СлужебныеДанныеЗаголовковЗапроса();
	
	Для Каждого СтрокаЗаголовка Из ДанныеЗаголовков Цикл
		HTTPЗапрос.Заголовки.Вставить(СтрокаЗаголовка.Ключ, СтрокаЗаголовка.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатОбработкиПолученияДанныхДокументаПоПубличнойСсылке(Знач РезультатЗапроса)
	
	Если РезультатЗапроса.КодСостояния = КодСостоянияНеНайден() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСервиса = ОписаниеДокументаПоПубличнойСсылкеИзСервиса(РезультатЗапроса.Данные);
	
	ТипыОбъектаУчета = ТипыОбъектаУчетаЭлектронногоДокумента(ДанныеСервиса.ТипДокумента);
	
	Если ТипыОбъектаУчета = Неопределено
		Или ТипыОбъектаУчета.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Загрузка документа с типом %1 не поддерживается'"),
			ДанныеСервиса.ТипДокумента));
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументУчета = СсылкаНаОбъектУчетаЭлектронногоДокумента(ДанныеСервиса.ИдентификаторДокумента, ТипыОбъектаУчета);
	
	ЗаголовокДокумента = ЗаголовокЗагружаемогоДокумента(ДанныеСервиса);
	
	Результат = Новый Структура();
	Результат.Вставить("НаименованиеОрганизации"           , ДанныеСервиса.НаименованиеОрганизации);
	Результат.Вставить("ПредставлениеДокумента"            , ДанныеСервиса.ПредставлениеДокумента);
	Результат.Вставить("ЗаголовокДокумента"                , ЗаголовокДокумента);
	Результат.Вставить("ДокументУчета"                     , ДокументУчета);
	Результат.Вставить("ИдентификаторЭлектронногоДокумента", ДанныеСервиса.ИдентификаторЭлектронногоДокумента);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеДокументаПоПубличнойСсылкеИзСервиса(Знач РезультатЗапроса)
	
	Результат = Новый Структура;
	Результат.Вставить("НаименованиеОрганизации",
		ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "nameSender"));
	Результат.Вставить("ИдентификаторЭлектронногоДокумента",
		ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "documentIdLink"));
	Результат.Вставить("ИдентификаторДокумента",
		ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "documentGuid"));
	Результат.Вставить("ТипДокумента",
		ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "documentDataType"));
	Результат.Вставить("ДатаДокумента",
		Формат(ПрочитатьДатуJSON(
				ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "documentDate"),
				ФорматДатыJSON.ISO),
			"ДЛФ=D;"));
	Результат.Вставить("НомерДокумента",
		ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "documentNumber"));
	Результат.Вставить("ПредставлениеДокумента",
		ЗначениеКоллекцииПоАбсолютномуПути(РезультатЗапроса, "documentTitle"));

	Возврат Результат;
	
КонецФункции

Процедура ОбработатьРезультатПолученияДанныхДокументаДляЗагрузки(Знач РезультатЗапроса, ДанныеДокумента)
	
	ДанныеСервиса = РезультатЗапроса.Данные;
	
	ДвоичныеДанныеДокумента = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса, "documentData");
	ДвоичныеДанныеДокумента = Base64Значение(ДвоичныеДанныеДокумента);
	
	ДвоичныеДанныеПредставленияДокумента = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса, "documentPresentationData");
	Если Не ПустаяСтрока(ДвоичныеДанныеПредставленияДокумента) Тогда
		ДвоичныеДанныеПредставленияДокумента = Base64Значение(ДвоичныеДанныеПредставленияДокумента);
	КонецЕсли;
	
	ДанныеДокумента.ОрганизацияИНН = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса, "recipientOrganization.inn");
	ДанныеДокумента.ОрганизацияКПП = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса, "recipientOrganization.kpp");
	ДанныеДокумента.КонтрагентНаименование = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса,
		"senderOrganization.name");
	ДанныеДокумента.КонтрагентИНН = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса, "senderOrganization.inn");
	ДанныеДокумента.КонтрагентКПП = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса, "senderOrganization.kpp");
	
	ДанныеДокумента.ПредставлениеДокумента = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса, "documentTitle");
	ДанныеДокумента.ДвоичныеДанныеПредставленияДокумента = ДвоичныеДанныеПредставленияДокумента;
	ДанныеДокумента.ДвоичныеДанныеДокумента              = ДвоичныеДанныеДокумента;
	
	ДанныеДокумента.ТипДокумента = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса, "documentDataType");
	ДанныеДокумента.ИдентификаторДокумента = ЗначениеКоллекцииПоАбсолютномуПути(ДанныеСервиса, "documentGuid");
	
КонецПроцедуры

Процедура ОтметитьЗагрузкуДокументаВСервисе(Знач ДанныеДокумента, Отказ)
	
	ЗапросСервиса = ЗапросСервисаОтметитьЗагрузкуДокумента(ДанныеДокумента, Отказ);
	ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
КонецПроцедуры

Функция ЗапросСервисаОтметитьЗагрузкуДокумента(Знач ДанныеДокумента, Отказ = Ложь)

	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("documentGuid"  , XMLСтрока(ДанныеДокумента.ДокументУчета));
	ТелоЗапроса.Вставить("dateOfDownload", ТекущаяУниверсальнаяДата());
	ТелоЗапроса.Вставить("user"          , Строка(Пользователи.АвторизованныйПользователь()));

	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Данные                   = ЗначениеВJSON(ТелоЗапроса);
	ЗапросСервиса.СтрокаЗапроса            = СтрШаблон("api/documents/%1/download",
		ДанныеДокумента.ИдентификаторЭлектронногоДокумента);
	ЗапросСервиса.ТипПередаваемогоКонтента = "application/vnd-1cshare-download-doc.v1+json";
	ЗапросСервиса.Метод                    = "PATCH";
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(КодСостоянияВыполнено());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Изменение состояния электронного документа в сервисе 1С:Share'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	Возврат ЗапросСервиса;

КонецФункции

#КонецОбласти

#Область ВыполнениеЗапросов

// Выполнение команды сервиса.
//
// Параметры:
//   ЗапросСервиса - Структура - параметры вызова или имя команды, см. НовыйЗапросСервиса.
//   Отказ         - Булево - признак ошибки выполнения.
//   ТекстОшибки   - Строка - текст ошибки при выполнении команды.
//
// Возврат
//   Строка, Массив, Структура - возвращаемые данные сервиса.
//
Функция ВыполнитьЗапрос(Знач ЗапросСервиса, Отказ, ТекстОшибки = Неопределено)
	
	// Проверка отказа заполнения параметров.
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	// Определение имени сервиса.
	ИмяСервиса = ИнтеграцияShareКлиентСервер.ИмяСервиса();
	Если Не ПустаяСтрока(ЗапросСервиса.Сервис) Тогда
		ИмяСервиса = ЗапросСервиса.Сервис;
	КонецЕсли;
	
	// Установка параметров соединения.
	ПараметрыСоединения = ИнтеграцияShareПовтИсп.ПараметрыСоединения(ИмяСервиса, ЗапросСервиса.АдресСервиса);
	
	// Установка времени ожидания ответа.
	Если ЗапросСервиса.Свойство("Таймаут") И ЗапросСервиса.Таймаут <> 0 Тогда
		Таймаут = ЗапросСервиса.Таймаут;
	Иначе
		Таймаут = ПараметрыСоединения.Таймаут;
	КонецЕсли;
	
	// Инициализация соединения с сервисом.
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.Сервер, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ТекстОшибки = НСтр("ru='Отсутствует соединение с сервисом 1С:Share. Подробности см. в журнале регистрации.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросСервиса, ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;

	// Установка параметров запроса.
	HTTPЗапрос = Новый HTTPЗапрос(ЗапросСервиса.СтрокаЗапроса, ЗапросСервиса.Заголовки);
	
	Если ЗначениеЗаполнено(ЗапросСервиса.ТипПередаваемогоКонтента) Тогда
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовкаТипПередаваемогоКонтента(),
			ЗапросСервиса.ТипПередаваемогоКонтента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросСервиса.ТипВозвращаемогоКонтента) Тогда
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовкаТипВозвращаемогоКонтента(),
			ЗапросСервиса.ТипВозвращаемогоКонтента);
	КонецЕсли;
	
	УстановитьСлужебныеДанныеВЗаголовки(HTTPЗапрос);
	
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ЗапросСервиса.Данные) Тогда
		Если ТипЗнч(ЗапросСервиса.Данные) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ЗапросСервиса.Данные);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ЗапросСервиса.Данные, КодировкаТекста.UTF8,
				ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
	// Выполнение запроса
	Попытка
		HTTPОтвет = Соединение.ВызватьHTTPМетод(ЗапросСервиса.Метод, HTTPЗапрос);
	Исключение
		ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ЗафиксироватьОшибкуВЗапросе(Соединение, ЗапросСервиса, ПодробноеОписаниеОшибки, Отказ);
		Возврат Неопределено;
	КонецПопытки;
	
	// Разбор тела ответа
	РезультатВыполнения = ОбработатьОтветСервиса(HTTPОтвет, ЗапросСервиса, ТекстОшибки, Отказ);
	
	// Выполнить перенаправление запроса
	Если РезультатВыполнения.КодСостояния = КодСостоянияРедиректаЗапроса() Тогда
		ЗапросСервисаРедиректа = НовыйЗапросСервиса();
		ЗаполнитьПараметрыЗапросаСервисаРедиректа(ЗапросСервисаРедиректа, ЗапросСервиса, РезультатВыполнения);
		ВыполнитьЗапрос(ЗапросСервисаРедиректа, Отказ, ТекстОшибки);
	КонецЕсли;
	
	Если Отказ Или Не ПустаяСтрока(ТекстОшибки) Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросСервиса, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ОбработатьОтветСервиса(Знач HTTPОтвет, Знач ЗапросСервиса, ТекстОшибки, Отказ)
	
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Результат = Новый Структура;
	Результат.Вставить("КодСостояния", КодСостояния);
	Результат.Вставить("Данные"      , Неопределено);
	
	Если КодСостояния = КодСостоянияРедиректаЗапроса() Тогда
		СтрокаАдреса = URLРедиректа(HTTPОтвет, ТекстОшибки);
		Если СтрокаАдреса <> Неопределено Тогда
			Результат.Данные = СтрокаАдреса;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗапросВыполненКорректно(ЗапросСервиса, HTTPОтвет, ТекстОшибки) Тогда
		Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Данные = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если ЗначениеЗаполнено(Данные) Тогда
	
		ПотокДанных = HTTPОтвет.ПолучитьТелоКакПоток();
		Данные = СтруктураИзПотокаJSON(ПотокДанных);
	КонецЕсли;
	
	Результат.Данные = Данные;
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросВыполненКорректно(Знач ЗапросСервиса, Знач HTTPОтвет, ТекстОшибки = "")
	
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Если ЗапросСервиса.ДопустимыеКодыСостояния.Количество() = 0
		Или ЗапросСервиса.ДопустимыеКодыСостояния.Найти(КодСостояния) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		ТекстОшибки = ЗапросСервиса.Ошибки.Получить(КодСостояния);
		Возврат Ложь;
	КонецЕсли;
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ПодстрокиОшибки = Новый Массив;
	Если ЕстьПодробноеОписаниеОшибки(HTTPОтвет) Тогда
		ОписаниеОшибки = СтруктураИзПотокаJSON(HTTPОтвет.ПолучитьТелоКакПоток());
		
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='Код состояния %1 - %2'", КодЯзыка),
			XMLСтрока(КодСостояния), ОписаниеОшибки.title));
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='Компонент сервиса: %1'", КодЯзыка), ОписаниеОшибки.type));
		
		ИдентификаторТрассировки = ЗначениеКоллекцииПоАбсолютномуПути(ОписаниеОшибки, "traceId");
		Если ЗначениеЗаполнено(ИдентификаторТрассировки) Тогда
			ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='Идентификатор трассировки: %1'", КодЯзыка),
			ИдентификаторТрассировки));
		КонецЕсли;
		
		ПодробноеОписание = ЗначениеКоллекцииПоАбсолютномуПути(ОписаниеОшибки, "detail");
		Если ЗначениеЗаполнено(ПодробноеОписание) Тогда
			ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='Подробное описание: %1'", КодЯзыка), ПодробноеОписание));
		КонецЕсли;
	Иначе
		ТекстОшибки = СтандартныеТекстыОшибокHTTPЗапросов().Получить(КодСостояния);
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			Если КодСостояния >= 500 Тогда
				ТекстОшибки = НСтр("ru = 'внутренняя ошибка сервиса'", КодЯзыка);
			ИначеЕсли КодСостояния >= 400 Тогда
				ТекстОшибки = НСтр("ru = 'ошибка параметров запроса'", КодЯзыка);
			Иначе
				ТекстОшибки = НСтр("ru = 'неизвестная ошибка'", КодЯзыка);
			КонецЕсли;
		КонецЕсли;
		
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='Код состояния %1 - %2'", КодЯзыка),
			XMLСтрока(КодСостояния), ТекстОшибки));
		
		Тело = "";
		Попытка
			Тело = HTTPОтвет.ПолучитьТелоКакСтроку();
			Если Не ПустаяСтрока(Тело) Тогда
				ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='Тело ответа: %1'", КодЯзыка), Тело));
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(ПодстрокиОшибки, Символы.ПС);
	
	Возврат Ложь;
	
КонецФункции

Функция ЗафиксироватьОшибкуВЗапросе(Знач ПараметрыСоединения, Знач ЗапросСервиса,
	Знач ТекстОшибки, ЕстьОшибки = Неопределено)
	
	ЕстьОшибки = Истина;
	ПодробноеОписаниеОшибки = "";
	
	ПредставлениеОшибки = Новый Массив;
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Ошибка взаимодействия с сервисом 1С:Share'")));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Хост: %1'"), ПараметрыСоединения.Сервер));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Запрос: %1 %2.'"), ЗапросСервиса.Метод,
		ЗапросСервиса.СтрокаЗапроса));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Текст ошибки: %1'"), ТекстОшибки));
	
	ПодробноеОписаниеОшибки = СтрСоединить(ПредставлениеОшибки, Символы.ПС);
	
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеОписаниеОшибки, ИнтеграцияShareКлиентСервер.ИмяПодсистемы());
	ОбщегоНазначения.СообщитьПользователю(ПодробноеОписаниеОшибки);

	Возврат ПодробноеОписаниеОшибки;

КонецФункции

Функция ЕстьПодробноеОписаниеОшибки(Знач HTTPОтвет)
	
	Возврат HTTPОтвет.Заголовки.Получить(ИмяЗаголовкаТипПередаваемогоКонтента()) = ТипКонтентаОшибка();
	
КонецФункции

Функция URLРедиректа(Знач HTTPОтвет, ТекстОшибки = Неопределено)
	
	Результат = HTTPОтвет.Заголовки.Получить(ИмяЗаголовкаРедиректа());

	Если Результат <> Неопределено Тогда
		Результат = СокрЛП(Результат);
		Если ПустаяСтрока(Результат) Тогда
			Результат = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если Результат = Неопределено Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка при выполнении запроса %1. Некорректное перенаправление,
				 | отсутствует HTTP-заголовок ответа ""Location"".'", ОбщегоНазначения.КодОсновногоЯзыка()), HTTPОтвет);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция АдресЗапросаПубличнойСсылки(Знач СсылкаДляСкачивания)
	
	ПараметрыСоединения = ИнтеграцияShareПовтИсп.ПараметрыСоединения(ИнтеграцияShareКлиентСервер.ИмяСервиса());
	
	Протокол     = ПротоколСоединения(ПараметрыСоединения);
	АдресСервера = ПараметрыСоединения.Сервер;
	
	Возврат СтрЗаменить(СсылкаДляСкачивания, СтрШаблон(
		"%1://%2/",
		Протокол,
		АдресСервера), "");
	
КонецФункции

Функция ПротоколСоединения(Знач ПараметрыСоединения)
	
	Возврат ?(ПараметрыСоединения.ЗащищенноеСоединение = Неопределено, "http", "https");
	
КонецФункции

Процедура ЗаполнитьПараметрыЗапросаСервисаРедиректа(ЗапросСервиса, Знач ДанныеИсходногоЗапроса,
	Знач РезультатИсходногоЗапроса)
	
	ЗаполнитьЗначенияСвойств(ЗапросСервиса, ДанныеИсходногоЗапроса, , "АдресСервиса, СтрокаЗапроса");
	
	URLРедиректа = РезультатИсходногоЗапроса.Данные;
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLРедиректа);
	
	ЗапросСервиса.СтрокаЗапроса = СтруктураURI.ПутьНаСервере;
	ЗапросСервиса.АдресСервиса  = СтруктураURI.ИмяСервера;

КонецПроцедуры

#КонецОбласти

#Область Словарь

Функция ИмяЗаголовкаТипПередаваемогоКонтента()
	
	Возврат "Content-Type";
	
КонецФункции

Функция ИмяЗаголовкаТипВозвращаемогоКонтента()
	
	Возврат "Accept";
	
КонецФункции

Функция ИмяЗаголовкаРедиректа()
	
	Возврат "Location";
	
КонецФункции

Функция ТипКонтентаОшибка()
	
	Возврат "application/problem+json";
	
КонецФункции

Функция КодСостоянияРедиректаЗапроса()
	
	Возврат 302;
	
КонецФункции

Функция КодСостоянияВыполнено()
	
	Возврат 200;
	
КонецФункции

Функция КодСостоянияНеНайден()
	
	Возврат 404;
	
КонецФункции

Функция КодСостоянияСоздано()
	
	Возврат 201;
	
КонецФункции

Функция СтандартныеТекстыОшибокHTTPЗапросов()

	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	СоответствиеКодов = Новый Соответствие;
	СоответствиеКодов.Вставить(400, НСтр("ru = 'ошибка в запросе.'", КодЯзыка));
	СоответствиеКодов.Вставить(401, НСтр("ru = 'неверные данные аутентификации.'", КодЯзыка));
	СоответствиеКодов.Вставить(403, НСтр("ru = 'у клиента нет доступа к ресурсу.'", КодЯзыка));
	СоответствиеКодов.Вставить(404, НСтр("ru = 'на сервере нет ресурса по указанному URI.'", КодЯзыка));
	СоответствиеКодов.Вставить(405, НСтр("ru = 'указанный метод нельзя применить к текущему ресурсу.'", КодЯзыка));
	СоответствиеКодов.Вставить(406, НСтр("ru = 'запрошенный URI не может удовлетворить переданным в заголовке
		|характеристикам.'", КодЯзыка));
	СоответствиеКодов.Вставить(407, НСтр("ru = 'для доступа к серверу требуется аутентификация
		|для прокси-сервера'", КодЯзыка));
	СоответствиеКодов.Вставить(408, НСтр("ru = 'время ожидания сервером передачи от клиента истекло.'", КодЯзыка));
	СоответствиеКодов.Вставить(409, НСтр("ru = 'запрос не может быть выполнен из-за конфликтного
		|обращения к ресурсу.'", КодЯзыка));
	СоответствиеКодов.Вставить(410, НСтр("ru = 'ресурс был удален и теперь недоступен.'", КодЯзыка));
	СоответствиеКодов.Вставить(411, НСтр("ru = 'не указан объем передаваемых данных в заголовке.'", КодЯзыка));
	СоответствиеКодов.Вставить(412, НСтр("ru = 'ни одно из условных полей заголовка запроса не было выполнено.'",
		КодЯзыка));
	СоответствиеКодов.Вставить(413, НСтр("ru = 'слишком большой размер тела запроса.'", КодЯзыка));
	СоответствиеКодов.Вставить(414, НСтр("ru = 'слишком длинный URL.'", КодЯзыка));
	СоответствиеКодов.Вставить(415, НСтр("ru = 'контент переданного типа не поддерживается.'", КодЯзыка));
	СоответствиеКодов.Вставить(422, НСтр("ru = 'имеется логическая ошибка, из-за которой невозможно
		|произвести операцию.'", КодЯзыка));
	СоответствиеКодов.Вставить(423, НСтр("ru = 'ресурс заблокирован.'", КодЯзыка));
	СоответствиеКодов.Вставить(426, НСтр("ru = 'необходимо обновить протокол.'", КодЯзыка));
	СоответствиеКодов.Вставить(429, НСтр("ru = 'слишком много запросов в единицу времени.'", КодЯзыка));
	СоответствиеКодов.Вставить(431, НСтр("ru = 'превышена допустимая длина заголовков.'", КодЯзыка));
	СоответствиеКодов.Вставить(434, НСтр("ru = 'запрашиваемый адрес недоступен.'", КодЯзыка));
	СоответствиеКодов.Вставить(449, НСтр("ru = 'поступило недостаточно информации.'", КодЯзыка));
	
	СоответствиеКодов.Вставить(500, НСтр("ru = 'внутренняя ошибка сервера.'", КодЯзыка));
	СоответствиеКодов.Вставить(501, НСтр("ru = 'сервер не поддерживает возможностей, необходимых
		|для обработки запроса.'", КодЯзыка));
	СоответствиеКодов.Вставить(502, НСтр("ru = 'сервер, выступая в роли шлюза или прокси-сервера,
		|получил недействительное ответное сообщение от вышестоящего сервера.'", КодЯзыка));
	СоответствиеКодов.Вставить(503, НСтр("ru = 'сервер временно не имеет возможности обрабатывать запросы
		|по техническим причинам.'", КодЯзыка));
	СоответствиеКодов.Вставить(504, НСтр("ru = 'сервер в роли шлюза или прокси-сервера не дождался ответа
		|от вышестоящего сервера для завершения текущего запроса.'", КодЯзыка));
	СоответствиеКодов.Вставить(505, НСтр("ru = 'сервер не поддерживает указанную в запросе
		|версию протокола HTTP.'", КодЯзыка));
	СоответствиеКодов.Вставить(507, НСтр("ru = 'не хватает места для выполнения текущего запроса.'",
		КодЯзыка));
	СоответствиеКодов.Вставить(510, НСтр("ru = 'на сервере отсутствует расширение, которое желает
		|использовать клиент.'", КодЯзыка));
	СоответствиеКодов.Вставить(511, НСтр("ru = 'необходимо авторизоваться в сети провайдера.'", КодЯзыка));
	
	Возврат СоответствиеКодов;
	
КонецФункции

#КонецОбласти

#Область РаботаСКоллекцией

// Получить значение данных коллекции в рекурсии.
//
// Параметры:
//  Значение - Произвольный - значения обработки.
//  СвойстваПути - Массив - элементы пути, например pathToRoot[0]; categories.
//  ЕстьОшибки - Булево - признак ошибки при разборе.
//
Функция ЗначениеСвойстваКоллекцииВРекурсии(Знач Значение, Знач СвойстваПути, ЕстьОшибки = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если Не ЭтоКоллекция(Значение) Тогда
		ЕстьОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("Структура") И Не Значение.Свойство(Свойство) 
		Или ТипЗнч(Значение) = Тип("Соответствие") И Значение.Получить(Свойство) = Неопределено Тогда
		ЕстьОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваКоллекцииВРекурсии(Значение, СвойстваПути, ЕстьОшибки);
	КонецЕсли;
	
КонецФункции

Функция ЗначениеКоллекцииПоАбсолютномуПути(Знач Значение, Знач Путь, ЕстьОшибки = Ложь) Экспорт
	
	СвойстваПути = СтрРазделить(Путь, ".", Ложь);
	
	Попытка
		Результат = ЗначениеСвойстваКоллекцииВРекурсии(Значение, СвойстваПути, ЕстьОшибки);
	Исключение
		Результат = Неопределено;
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоКоллекция(Знач Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Возврат ТипЗначения = Тип("Структура") Или ТипЗначения = Тип("Соответствие");
	
КонецФункции

#КонецОбласти

#КонецОбласти
