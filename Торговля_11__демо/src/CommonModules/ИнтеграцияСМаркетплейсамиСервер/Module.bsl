///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает признак использования интеграции хотя бы с одним маркетплейсом.
// Возвращаемое значение:
//  Булево - Признак использования интеграции.
//
Функция ИспользуетсяИнтеграцияСМаркетплейсами() Экспорт

	Интеграции = Новый Массив;
	Интеграции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСOzon.Имя);
	Интеграции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСЯндексМаркет.Имя);

	Результат = Ложь;
	Для каждого Интеграция Из Интеграции Цикл
		Если ПолучитьФункциональнуюОпцию(Интеграция) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Создает элементы подсистемы "Интеграция с Ozon" в форме присоединенного файла.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Источник события
//
Процедура ПриСозданииФормыЭлементаПрисоединенныхФайлов(Форма) Экспорт

	Если Не ИспользуетсяИнтеграцияСМаркетплейсами() Или ТипЗнч(Форма.Объект.Ссылка) <> Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы") Тогда
		Возврат;
	КонецЕсли;

	ЭлементПубликуетсяНаМП = Форма.Элементы.Вставить("ПубликуетсяВСервисах", Тип("ПолеФормы"), Форма.Элементы.ГруппаКоманды, Форма.Элементы.ФормаОткрытьФайлДляПросмотра);
	ЭлементПубликуетсяНаМП.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементПубликуетсяНаМП.ВидФлажка = ВидФлажка.Выключатель;
	ЭлементПубликуетсяНаМП.ПутьКДанным = "Объект.ПубликуетсяВСервисах";
	ЭлементПубликуетсяНаМП.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;

КонецПроцедуры

// Создает элементы подсистемы "Интеграция с Ozon" в форме списка присоединенных файлов.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Источник события
//
Процедура ПриСозданииФормыСпискаПрисоединенныхФайлов(Форма) Экспорт

	Если Не ИспользуетсяИнтеграцияСМаркетплейсами() Или ТипЗнч(Форма.ВладелецФайла) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;

	ПсевдонимПоля = "ПубликуетсяВСервисах";
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(Форма.Список.ТекстЗапроса);

	ЗапросПакета = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ОператорВыбрать = ЗапросПакета.Операторы[0];
	ТекстПоля = ОператорВыбрать.Источники[0].Источник.Псевдоним + "." + ПсевдонимПоля;

	ПолеПубликуетсяВСервисах = ОператорВыбрать.ВыбираемыеПоля.Добавить(ТекстПоля);
	ВыражениеПубликуетсяНаМП = ОператорВыбрать.ВыраженияОтбораКомпоновкиДанных.Добавить(ПолеПубликуетсяВСервисах);
	ВыражениеПубликуетсяНаМП.Псевдоним = ПсевдонимПоля;

	КолонкиСхемыЗапроса = ЗапросПакета.Колонки.Найти(ПолеПубликуетсяВСервисах);
	КолонкиСхемыЗапроса.Псевдоним = ПсевдонимПоля;
	ЗапросПакета.ПоляВыбораКомпоновкиДанных.Добавить(КолонкиСхемыЗапроса);

	Форма.Список.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();

	ЭлементПубликуетсяНаМП = Форма.Элементы.Добавить(ПсевдонимПоля, Тип("ПолеФормы"), Форма.Элементы.Список);
	ЭлементПубликуетсяНаМП.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементПубликуетсяНаМП.ПутьКДанным = "Список.ПубликуетсяВСервисах";

КонецПроцедуры

// Создает элементы подсистемы "Интеграция с Ozon" в форме сертификата номенклатуры.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Источник события
//
Процедура ПриСозданииФормыЭлементаСертификатаНоменклатуры(Форма) Экспорт

	Если Не ИспользуетсяИнтеграцияСМаркетплейсами() Тогда
		Возврат;
	КонецЕсли;

	ЭлементПубликуетсяНаМП = Форма.Элементы.Вставить("ПубликуетсяВСервисах", Тип("ПолеФормы"), Форма.Элементы.ГруппаИзображение, Форма.Элементы.ГруппаКоманднаяПанельИГиперссылка);
	ЭлементПубликуетсяНаМП.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементПубликуетсяНаМП.ВидФлажка = ВидФлажка.Выключатель;
	ЭлементПубликуетсяНаМП.ПутьКДанным = "Объект.ПубликуетсяВСервисах";
	ЭлементПубликуетсяНаМП.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;

КонецПроцедуры

// Процедура - При создании формы списка контекст сертификатов номенклатуры
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Источник события.
//
Процедура ПриСозданииФормыСпискаКонтекстСертификатовНоменклатуры(Форма) Экспорт

	Если Не ИспользуетсяИнтеграцияСМаркетплейсами() Тогда
		Возврат;
	КонецЕсли;

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Форма.СертификатыНоменклатуры.ТекстЗапроса);
	СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("СертификатыНоменклатуры.ПубликуетсяВСервисах");
	Форма.СертификатыНоменклатуры.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	НовыйЭлемент = Форма.Элементы.Добавить("СертификатыНоменклатурыПубликуетсяВСервисах", Тип("ПолеФормы"), Форма.Элементы.СертификатыНоменклатуры);
	НовыйЭлемент.ПутьКДанным = "СертификатыНоменклатуры.ПубликуетсяВСервисах";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;

КонецПроцедуры

// Описывает структуру ошибки.
// Возвращаемое значение:
//  Структура - Структура для описания ошибки.
//
Функция НоваяОшибка() Экспорт

	Возврат Новый Структура("КодОшибки, ОписаниеОшибки", "", "")

КонецФункции

#Область РаботаСВнешнимиРесурсами

// Возвращает общие параметры подключения к REST API Яндекс.OAuth.
// Возвращаемое значение:
//  Структура - Дополненная структура функции ПараметрыСоединения().
//
Функция ПараметрыРаботыССервисомАвторизации() Экспорт

	ПараметрыРаботы = ПараметрыСоединения();
	ПараметрыРаботы.Сервер = "oauth.yandex.ru";
	ПараметрыРаботы.Вставить("ШаблонОшибки", НСтр("ru = 'При выполнении метода API %1 возникла ошибка: %2'"));
	ПараметрыРаботы.Вставить("ШаблонОшибкиСКодом", НСтр("ru = 'При выполнении метода API %1 возникла ошибка: (%2) %3'"));
	ПараметрыРаботы.Вставить("ТипОбъектОшибка", ФабрикаXDTO.Тип("oauth.yandex.ru", "error"));

	Возврат ПараметрыРаботы;

КонецФункции

// Возвращает общие параметры подключения к REST API Яндекс.Диск.
// Возвращаемое значение:
//  Структура - Дополненная структура функции ПараметрыСоединения().
//
Функция ПараметрыРаботыСЯндексДиском() Экспорт

	ПараметрыРаботы = ПараметрыСоединения();
	ПараметрыРаботы.Сервер = "cloud-api.yandex.net";
	ПараметрыРаботы.Порт = 443;
	ПараметрыРаботы.Вставить("ШаблонОшибки", НСтр("ru = 'При выполнении метода API %1 возникла ошибка: %2'"));
	ПараметрыРаботы.Вставить("ШаблонОшибкиСКодом", НСтр("ru = 'При выполнении метода API %1 возникла ошибка: (%2) %3'"));
	ПараметрыРаботы.Вставить("ТипОбъектОшибка", ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "error"));

	Возврат ПараметрыРаботы;

КонецФункции

// Возвращает общие параметры приложения для использования в механизмах сервиса.
// Возвращаемое значение:
//  Структура - Дополненная структура функции ПараметрыПриложения().
//
Функция ПараметрыПриложенияЯндексДиск() Экспорт

	ПараметрыПриложения = ПараметрыПриложения();
	ПараметрыПриложения.ИдентификаторПриложения = "ЯндексДиск";
	ПараметрыПриложения.client_id = "17d0ffccaae840dba48edd4e246f6f27";
	ПараметрыПриложения.client_secret = "80ebf05fe140474d9b7adbdf6ade7e4e";

	Возврат ПараметрыПриложения;

КонецФункции

// Формирует HTTPЗапрос по переданным данным.
// Параметры:
//  Адрес                   - Строка - Путь к ресурсу на сервере.
//  ТелоЗапроса             - Строка или ДвоичныеДанные - Источник для установки тела запроса.
//                             Применимо для методов HTTP: OPTIONS, PATCH, POST и PUT.
//  ДополнительныеЗаголовки - Соответствие - Заголовки запроса. Могут перезаписывать обязательные заголовки функции.
//                             Названия заголовков регистронезависимые.
// 
// Возвращаемое значение:
//  HTTPЗапрос - Подготовленный для отправки запрос HTTP.
//
Функция ЗапросHTTP(Адрес, ТелоЗапроса = "", ДополнительныеЗаголовки = Неопределено) Экспорт

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("charset", "UTF-8");
	Заголовки.Вставить("accept", "application/json");
	Заголовки.Вставить("content-type", "application/json");

	Если ДополнительныеЗаголовки <> Неопределено Тогда
		Для каждого Заголовок Из ДополнительныеЗаголовки Цикл
			Заголовки.Вставить(НРег(Заголовок.Ключ), Заголовок.Значение);
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый HTTPЗапрос(Адрес, Заголовки);

	Если Не ПустаяСтрока(ТелоЗапроса) Тогда
		Если ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
		КонецЕсли;
	КонецЕсли;

	ПредставлениеКонфигурации = СтрШаблон("%1 (%2)", Метаданные.Синоним, Метаданные.Версия);
	Заголовки.Вставить("user-agent", ПредставлениеКонфигурации);

	Возврат Запрос;

КонецФункции

//  Записывает список ключей и значений по адресу в защищенное хранилище.
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Используется для формирования адреса в хранилище.
//  ПараметрыПриложения       - Структура - Используется для формирования адреса в хранилище. Подробнее см. ПараметрыПриложения().
//  ДанныеПриложения          - Структура/Соответствие - Источник пар ключ/значение для записи в защищенное хранилище.
//
Процедура ЗаписатьДанныеПриложенияВХранилище(УчетнаяЗаписьМаркетплейса, ПараметрыПриложения, ДанныеПриложения) Экспорт

	АдресВХранилище = Строка(УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор()) + "/" + ПараметрыПриложения.ИдентификаторПриложения;
	УстановитьПривилегированныйРежим(Истина);
	Для каждого ЭлементДанных Из ДанныеПриложения Цикл
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдресВХранилище, ЭлементДанных.Значение, ЭлементДанных.Ключ);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Получает данные приложения из хранилища.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Используется для формирования адреса в хранилище.
//  ПараметрыПриложения       - Структура - Используется для формирования адреса в хранилище. Подробнее см. ПараметрыПриложения().
//  Ключи                     - Строка - Имена ключей, разделенные запятыми.
// 
// Возвращаемое значение:
//  Произвольный, Структура, Неопределено - данные из безопасного хранилища. Если указан один ключ,
//                            то возвращается его значение, иначе структура.
//                            Если данные отсутствуют - Неопределенно.
//
Функция ПолучитьДанныеПриложенияИзХранилища(УчетнаяЗаписьМаркетплейса, ПараметрыПриложения, Ключи) Экспорт

	АдресВХранилище = Строка(УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор()) + "/" + ПараметрыПриложения.ИдентификаторПриложения;
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(АдресВХранилище, Ключи);

КонецФункции

#Область РаботаСЯндексАвторизацией

// Формирует адрес для интерактивного запроса кода подтверждения.
// Параметры:
//  КодПриложения- Строка - Код приложения Яндекс, для которого запрашивается доступ.
// 
// Возвращаемое значение:
//  Строка - Адрес для перехода на страницу запроса кода подтверждения.
//
Функция АдресЗапросаКодаПодтверждения(КодПриложения) Экспорт

	ТипОбъекта = ФабрикаXDTO.Тип("oauth.yandex.ru", "authorizeRequest");
	ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъекта);
	ОбъектXDTO.client_id = КодПриложения;

	ПараметрыСоединения = ПараметрыРаботыССервисомАвторизации();

	Метод = "authorize";

	СтрокаСоединения = ПротоколПоУмолчанию(ПараметрыСоединения.Порт) + ПараметрыСоединения.Сервер + "/" + Метод + ПараметрыЗапроса(ОбъектXDTO, ТипОбъекта);

	Возврат СтрокаСоединения;

КонецФункции

// Запрашивает токены авторизации приложения по коду подтверждения от пользователя.
// Параметры:
//  Приложение       - Структура - Подробности см. в функции ПараметрыПриложения().
//  КодПодтверждения - Строка - Код подтверждения, указанный пользователем.
// 
// Возвращаемое значение:
//  Структура - Результат обмена кода подтверждения на ключи доступа для приложения.
//              Содержит ключи: Отказ, token_type, access_token, expires_in, refresh_token.
//
Функция ЗапроситьТокеныАвторизацииПоКоду(Приложение, КодПодтверждения) Экспорт

	ПараметрыРаботы = ПараметрыРаботыССервисомАвторизации();

	ТипОбъекта = ФабрикаXDTO.Тип("oauth.yandex.ru", "tokenRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.code = КодПодтверждения;
	ЗапросОбъект.client_id = Приложение.client_id;
	ЗапросОбъект.client_secret = Приложение.client_secret;

	ТелоЗапроса = ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта, Ложь);
	Метод = "token";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Length", СтрДлина(ТелоЗапроса));

	Запрос = ЗапросHTTP(Метод, ТелоЗапроса, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос);

	ПараметрыОтвета = Новый Структура("Отказ, token_type, access_token, expires_in, refresh_token", Истина);

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат ПараметрыОтвета;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("oauth.yandex.ru", "tokenResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыОтвета, РезультатПриведения.Объект);
			ПараметрыОтвета.Отказ = Ложь;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.error_description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При авторизации с данным кодом подтверждения возникла ошибка.
			|Подробности см. в журнале регистрации.'"));
	КонецЕсли;

	Возврат ПараметрыОтвета;

КонецФункции

// Запрашивает токены авторизации приложения по токену обновления.
// Параметры:
//  Приложение      - Структура - Подробности см. в функции ПараметрыПриложения().
//  ТокенОбновления - Строка - Токен обновления, полученный при предыдущем запросе.
// 
// Возвращаемое значение:
//  Структура - Результат обновления токенов доступа для приложения.
//              Содержит ключи: Отказ, token_type, access_token, expires_in, refresh_token.
//
Функция ОбновитьТокеныАвторизации(Приложение, ТокенОбновления) Экспорт

	ПараметрыРаботы = ПараметрыРаботыССервисомАвторизации();

	ТипОбъекта = ФабрикаXDTO.Тип("oauth.yandex.ru", "refreshRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.refresh_token = ТокенОбновления;
	ЗапросОбъект.client_id = Приложение.client_id;
	ЗапросОбъект.client_secret = Приложение.client_secret;

	ТелоЗапроса = ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта, Ложь);
	Метод = "token";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Length", СтрДлина(ТелоЗапроса));

	Запрос = ЗапросHTTP(Метод, ТелоЗапроса, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос);

	ПараметрыОтвета = Новый Структура("Отказ, token_type, access_token, expires_in, refresh_token", Истина);

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат ПараметрыОтвета;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("oauth.yandex.ru", "tokenResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыОтвета, РезультатПриведения.Объект);
			ПараметрыОтвета.Отказ = Ложь;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.error_description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При авторизации с данным кодом подтверждения возникла ошибка.
			|Подробности см. в журнале регистрации.'"));
	КонецЕсли;

	Возврат ПараметрыОтвета;

КонецФункции

#КонецОбласти

#Область РаботаСЯндексДиском

// Получает из хранилища токен доступа, выданный приложению для работы с сервисом Яндекс.Диск.
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Используется для формирования адреса в хранилище.
// 
// Возвращаемое значение:
//  Строка - Токен доступа приложения.
//
Функция ПолучитьТокенДоступаЯндексДиск(УчетнаяЗапись) Экспорт

	ПараметрыПриложения = ПараметрыПриложенияЯндексДиск();
	ТокенДоступа = ПолучитьДанныеПриложенияИзХранилища(УчетнаяЗапись, ПараметрыПриложения, "access_token");

	Возврат ТокенДоступа;

КонецФункции

// Получает метаинформацию о файле или каталоге с помощью запроса GET к методу v1/disk/resources.
// Параметры:
//  ТокенДоступа       - Строка - Access_token приложения.
//  ПрисоединенныйФайл - СправочникСсылка.НоменклатураПрисоединенныеФайлы - Файл, по которому запрашивается информация от сервиса.
//  СписокПолей        - Строка - Имена реквизитов, разделенные запятой. Подробности см. в описании метода API.
// 
// Возвращаемое значение:
//  Структура - Содержит свойство "Отказ" (булево) и значения запрошенных полей.
//
Функция ПолучитьИнформациюОРесурсе(ТокенДоступа, ПрисоединенныйФайл, СписокПолей = "name") Экспорт

	СписокКлючей = "Отказ, КодСостояния" + ?(ПустаяСтрока(СписокПолей), "", ", ") + СписокПолей;

	ИнформацияОРесурсе = Новый Структура(СписокКлючей, Истина);
	ПараметрыРаботы = ПараметрыРаботыСЯндексДиском();
	ПутьКФайлуНаЯДиске = ПутьКРесурсу(ПрисоединенныйФайл);

	ТипОбъекта = ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "metainfoRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.path = ПутьКФайлуНаЯДиске;
	ЗапросОбъект.fields = СписокПолей;

	Метод = "v1/disk/resources";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Authorization", "OAuth " + ТокенДоступа);

	Запрос = ЗапросHTTP(Метод + ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта),, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос, "GET");

	ИнформацияОРесурсе.КодСостояния = РезультатОтправки.КодСостояния;

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат ИнформацияОРесурсе;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "metainfoResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Иначе
			ОтветОбъект = РезультатПриведения.Объект;
			ЗаполнитьЗначенияСвойств(ИнформацияОРесурсе, ОтветОбъект);
			ИнформацияОРесурсе.Отказ = Ложь;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;

	Возврат ИнформацияОРесурсе;

КонецФункции

// Загружает файл на сервис Яндекс.Диск в папку приложения и публикует его.
// Параметры:
//  ТокенДоступа          - Строка - Access_token приложения.
//  ПрисоединенныйФайл    - СправочникСсылка.НоменклатураПрисоединенныеФайлы - Файл, который загружается на сервис.
//  ОбновитьФайлНаСервисе - Булево - признак обновления.
// 
// Возвращаемое значение:
//  Структура - Содержит путь к файлу на сервисе, публичную ссылку и признак отказа в выполнении операции.
//
Функция ЗагрузитьФайлНаСервис(ТокенДоступа, ПрисоединенныйФайл, ОбновитьФайлНаСервисе = Истина) Экспорт

	ПараметрыРаботы = ПараметрыРаботыСЯндексДиском();
	РезультатПубликации = Новый Структура("ПутьКФайлуНаЯДиске, ПубличнаяСсылка, Отказ", "", "", Истина);
	ПутьКФайлуНаЯДиске = ПутьКРесурсу(ПрисоединенныйФайл);
	РезультатПубликации.ПутьКФайлуНаЯДиске = ПутьКФайлуНаЯДиске;

	ИнформацияОРесурсе = ПолучитьИнформациюОРесурсе(ТокенДоступа, ПрисоединенныйФайл);
	Если ИнформацияОРесурсе.КодСостояния = 200 И Не ОбновитьФайлНаСервисе Тогда
		РезультатПубликации.ПубличнаяСсылка = ИнформацияОРесурсе.public_url;
		РезультатПубликации.Отказ = Ложь;
		Возврат РезультатПубликации;
	КонецЕсли;

	ТипОбъекта = ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "uploadGetRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.path = ПутьКФайлуНаЯДиске;

	Метод = "v1/disk/resources/upload";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Authorization", "OAuth " + ТокенДоступа);

	Запрос = ЗапросHTTP(Метод + ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта),, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос, "GET");

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "uploadGetResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат РезультатПубликации;
		Иначе
			ОтветОбъект = РезультатПриведения.Объект;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;


	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ОтветОбъект.href);

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "image/jpeg");

	ПараметрыСоединения = ПараметрыСоединения();
	ПараметрыСоединения.Сервер = СтруктураURI.Хост;
	ПараметрыСоединения.Порт = СтруктураURI.Порт;
	ТелоЗапроса = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл, Ложь);
	Если ТелоЗапроса = Неопределено Тогда
		Возврат РезультатПубликации;
	КонецЕсли;

	Метод = СтруктураURI.ПутьНаСервере;

	Запрос = ЗапросHTTP(Метод, ТелоЗапроса, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыСоединения, Запрос, "PUT");

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	Если Не ЗапросУспешноОбработан(РезультатОтправки.КодСостояния) Тогда
		ШаблонОшибки = НСтр("ru = 'При выполнении метода API %1 возникла ошибка: (%2) %3'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	Если Не ЗапросУспешноОбработан(РезультатОтправки.КодСостояния) Тогда
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;


	ТипОбъекта = ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "publishRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.path = ПутьКФайлуНаЯДиске;
	ЗапросОбъект.fields = "public_key";

	Метод = "v1/disk/resources/publish";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Authorization", "OAuth " + ТокенДоступа);

	Запрос = ЗапросHTTP(Метод + ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта),, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос, "PUT");

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "publishResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат РезультатПубликации;
		Иначе
			ОтветОбъект = РезультатПриведения.Объект;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	ИнформацияОРесурсе = ПолучитьИнформациюОРесурсе(ТокенДоступа, ПрисоединенныйФайл, "public_url");

	Если Не ИнформацияОРесурсе.Отказ Тогда
		РезультатПубликации.ПубличнаяСсылка = ИнформацияОРесурсе.public_url;
		РезультатПубликации.Отказ = Ложь;
	КонецЕсли;
	Возврат РезультатПубликации;

КонецФункции

// Удаляет ресурс с сервиса Яндекс.Диск из папки приложения.
// Параметры:
//  ТокенДоступа       - Строка - Access_token приложения.
//  ПутьКФайлуНаЯДиске - Строка - Путь к файлу на сервисе. Возвращается функцией ЗагрузитьФайлНаСервис().
// 
// Возвращаемое значение:
//  Булево - Признак успешного завершения операции удаления файла.
//
Функция УдалитьФайлССервиса(ТокенДоступа, ПутьКФайлуНаЯДиске) Экспорт

	ПараметрыРаботы = ПараметрыРаботыСЯндексДиском();

	ТипОбъекта = ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "deleteRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.path = ПутьКФайлуНаЯДиске;

	Метод = "v1/disk/resources";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Authorization", "OAuth " + ТокенДоступа);

	Запрос = ЗапросHTTP(Метод + ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта),, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос, "DELETE");

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	Если Не ЗапросУспешноОбработан(РезультатОтправки.КодСостояния) Тогда
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеСобытияДляЖурналаРегистрации()

	Возврат НСтр("ru = 'Интеграция с маркетплейсами'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

// Формирует строку параметров запроса (QUERY).
// Параметры:
//  ОбъектXDTO          - ОбъектXDTO - Объект, из реквизитов с формой "атрибут" которого формируется строка.
//  ТипОбъекта          - ТипОбъектаXDTO - Тип объекта из операнда ОбъектXDTO.
//  ДобавитьРазделитель - Булево - Добавить к строке предваряющий разделитель (знак вопроса)
// 
// Возвращаемое значение:
//  Строка - Строковое представление параметров запроса для использования в URI.
//
Функция ПараметрыЗапроса(ОбъектXDTO, ТипОбъекта, ДобавитьРазделитель = Истина)

	СтрокиПараметров = Новый Массив;

	Для Каждого Свойство Из ТипОбъекта.Свойства Цикл
		Если Свойство.Форма = ФормаXML.Атрибут Тогда
			СтрокиПараметров.Добавить(Свойство.Имя + "=" + КодироватьСтроку(XMLСтрока(ОбъектXDTO[Свойство.Имя]), СпособКодированияСтроки.КодировкаURL));
		КонецЕсли;
	КонецЦикла;

	Если СтрокиПараметров.Количество() > 0 Тогда
		Если ДобавитьРазделитель Тогда
			Возврат "?" + СтрСоединить(СтрокиПараметров, "&");
		Иначе
			Возврат СтрСоединить(СтрокиПараметров, "&");
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ПараметрыСоединения()

	Возврат Новый Структура("Сервер, Порт, Протокол", "", 443, "https");

КонецФункции

// Возвращает описание приложения Яндекс.
// Возвращаемое значение:
//  Структура - Описание приложения Яндекс.
//              Содержит ключи: client_id, client_secret.
//
Функция ПараметрыПриложения()

	Возврат Новый Структура("ИдентификаторПриложения, client_id, client_secret", "", "", "");

КонецФункции

// Анализирует код состояния запроса после обработки сервером на корректность (диапазон 200-299).
//  Применяется в случаях возврата сервером множества значений кода состояния.
// Параметры:
//  КодСостояния - Число - Код состояния запроса HTTP.
// 
// Возвращаемое значение:
//  Булево - Признак успешной обработки запроса сервером.
//
Функция ЗапросУспешноОбработан(КодСостояния)

	Возврат КодСостояния >= 200 И КодСостояния <= 299;

КонецФункции

// Проверяет строку на допустимость использования в качестве метода HTTP согласно разделу 4 RFC 7231.
// Параметры:
//  Метод	 - Строка - Переданный метод HTTP.
// 
// Возвращаемое значение:
//  Булево - Признак допустимости метода HTTP.
//
Функция МетодHTTPДопустим(Метод)

	Методы = Новый Структура("DELETE, GET, POST, PUT");
	Возврат Методы.Свойство(ВРег(Метод)) <> Неопределено;

КонецФункции

Функция ПротоколПоУмолчанию(Порт)

	ПортыПоУмолчанию = Новый Соответствие;
	ПортыПоУмолчанию.Вставить(80, "http://");
	ПортыПоУмолчанию.Вставить(443, "https://");
	ПортыПоУмолчанию.Вставить(21, "ftp://");
	ПортыПоУмолчанию.Вставить(990, "ftps://");

	Протокол = ПортыПоУмолчанию.Получить(Порт);
	Если Протокол = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Протокол;
	КонецЕсли;

КонецФункции

// Формирует и отправляет запрос HTTP с анализом ответа сервера.
// Параметры:
//  ПараметрыПодключения - Структура - Параметры подключения к серверу. Подробнее см. ПараметрыСоединения().
//  Запрос               - HTTPЗапрос - Запрос для отправки.
//  МетодHTTP            - Строка - Метод HTTP из допустимых по разделу 4 RFC 7231.
// 
// Возвращаемое значение:
//  Структура - Информация об отправке и обработке запроса сервером.
//              Содержит ключи: КодСостояния, ТекстОтвета, Отказ, ТекстОшибки.
//
Функция ВыполнитьЗапросHTTP(ПараметрыПодключения, Запрос, МетодHTTP = "POST")

	Результат = Неопределено;

	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыПодключения.Протокол);
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт,,, Прокси, 20, ЗащищенноеСоединение, Ложь);

	Ответ = Новый Структура();
	Ответ.Вставить("КодСостояния", 0);
	Ответ.Вставить("ТекстОтвета", "");
	Ответ.Вставить("Отказ", Ложь);
	Ответ.Вставить("ТекстОшибки", "");

	Если Не МетодHTTPДопустим(МетодHTTP) Тогда
		ШаблонОшибки = НСтр("ru = 'Указан недопустимый метод HTTP (%1)'");
		Ответ.Отказ = Истина;
		Ответ.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, МетодHTTP);
		Возврат Ответ;
	КонецЕсли;

	Попытка
		РезультатЗапроса = Соединение.ВызватьHTTPМетод(ВРег(МетодHTTP), Запрос);

		Ответ.КодСостояния = РезультатЗапроса.КодСостояния;
		Ответ.ТекстОтвета = РезультатЗапроса.ПолучитьТелоКакСтроку("UTF8");
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'При отправке запроса на сервер %1 возникла ошибка: %2'"),
			ПараметрыПодключения.Сервер,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
		Ответ.Отказ = Истина;
		Ответ.ТекстОшибки = ТекстОшибки;
	КонецПопытки;

	Возврат Ответ;

КонецФункции   

// Выполняет попытку приведения строки в формате JSON к указанному типу объекта XDTO.
// Параметры:
//  ТекстОбъекта - Строка - Строковое описание объекта в формате JSON.
//  ТипОбъекта   - ТипОбъектаXDTO - Тип объекта для приведения.
// 
// Возвращаемое значение:
//  Структура - Результат выполнения приведения.
//              Содержит ключи: Объект, Отказ, ТекстОшибки;
//
Функция ПривестиКТипуОбъекта(ТекстОбъекта, ТипОбъекта)

	РезультатПриведения = Новый Структура("Объект, Отказ, ТекстОшибки", Неопределено, Ложь, "");

	Попытка
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ТекстОбъекта);
		РезультатПриведения.Объект = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON, ТипОбъекта);
	Исключение
		РезультатПриведения.Отказ = Истина;
		РезультатПриведения.ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;

	Возврат РезультатПриведения

КонецФункции

// Возвращает путь к ресурсу (папке или файлу) относительно папки приложения.
// Параметры:
//  ПрисоединенныйФайл - СправочникСсылка.НоменклатураПрисоединенныеФайлы - Файл, по которому запрашивается информация от сервиса.
// 
// Возвращаемое значение:
//  Строка - Путь к ресурсу в кодировке URL.
//
Функция ПутьКРесурсу(ПрисоединенныйФайл)

	Возврат "app:/" + ПрисоединенныйФайл.УникальныйИдентификатор() + Формат(ПрисоединенныйФайл.ДатаМодификацииУниверсальная, "ДФ=ггггММддччммсс") + "." + ПрисоединенныйФайл.Расширение;

КонецФункции

#КонецОбласти

#КонецЕсли
