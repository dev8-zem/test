#Область ПрограммныйИнтерфейс

// Функция получает данные авторизации
//
// Параметры:
//  СтруктураОтвета  - Структура - структура содержит набор ключей, которые необходимо вернуть.
//
// Возвращаемое значение:
//  СтруктураДанныхАвторизации  - Структура - структура содержит запрошенный набор ключей.
//
Функция ДанныеАвторизации(СтруктураОтвета) Экспорт
	
	СтруктураДанныхАвторизации = Новый Структура();

	Если СтруктураОтвета.Свойство("access_token") И
		 СтруктураОтвета.Свойство("expires_in") И 
		 СтруктураОтвета.Свойство("refresh_token") Тогда
		 
			expires_in = СтруктураОтвета.expires_in;
			
			Если ОбщегоНазначенияУТКлиентСервер.ЭтаСтрокаЯвляетсяЦелымНеотрицательнымЧислом(expires_in) Тогда
				СрокЖизниТокена = НачалоДня(ТекущаяДата() + Число(expires_in));
				СтруктураДанныхАвторизации.Вставить("access_token",СтруктураОтвета.access_token);
				СтруктураДанныхАвторизации.Вставить("access_token_expires",СрокЖизниТокена);
				СтруктураДанныхАвторизации.Вставить("refresh_token",СтруктураОтвета.refresh_token);
			Иначе
				ТекстОшибки = НСтр("ru = 'Некорректное значение свойства expires_in при получении ключа авторизации - '" +СтруктураОтвета.expires_in +"; en = 'Out of order property value expires_in'" +СтруктураОтвета.expires_in);		
				ТекстОписанияСобытия = НСтр("ru = 'Ошибка сохранения данных в безопасном хранилище.'");
				ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);	
			КонецЕсли;
	КонецЕсли;
			
	Возврат СтруктураДанныхАвторизации;
	
КонецФункции

// Функция возвращает HTTPЗапрос запрос для обновления ключей доступа к сервису для организации.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - ссылка на организацию, для которой запрашиваются ключи.
//
// Возвращаемое значение:
//  HTTPЗапрос  - HTTPЗапрос - HTTPЗапрос для получения ключей.
//
Функция ЗапросОбновитьТокеныДоступа(Организация) Экспорт
	
	ДанныеПриложения = ДанныеПриложения();		

	СтруктураДанныхАвторизации = ТекущиеДанныеАвторизации(Организация);
	
	Если СтруктураДанныхАвторизации <> Неопределено Тогда
		refresh_token = СтруктураДанныхАвторизации.refresh_token;	
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");	

	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить("grant_type=refresh_token");
	ПараметрыURL.Добавить("refresh_token" + refresh_token);
	ПараметрыURL.Добавить("client_id=" + ДанныеПриложения.IDПриложения);
	ПараметрыURL.Добавить("client_secret=" + ДанныеПриложения.ПарольПриложения);
	
	Адрес = "/token?"; 
	HTTPЗапрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Тело = СтрСоединить(ПараметрыURL, "&");
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,"windows-1251");
	
	Возврат HTTPЗапрос;
	
КонецФункции

// Функция возвращает имя сервера авторизации для обновления ключей доступа к сервису.
//
// Возвращаемое значение:
//  Сервер  - Строка - имя сервера сервиса
//
Функция СерверАвторизации() Экспорт
	
	Сервер = "oauth.yandex.ru";	
	
	Возврат  Сервер;
	
КонецФункции

// Функция возвращает имя сервера партнерского API.
//
// Возвращаемое значение:
//  Сервер  - Строка - имя сервера сервиса
//
Функция СерверПартнерскогоAPI() Экспорт
	
	Сервер = "api.partner.market.yandex.ru/v2/campaigns";	
	
	Возврат  Сервер;
	
КонецФункции

// Функция возвращает данные для авторизации приложения.
//
// Возвращаемое значение:
//  ДанныеПриложения - Структура - данные для авторизации приложения
//
Функция ДанныеПриложения()
	
	ДанныеПриложения = Новый Структура("IDПриложения,ПарольПриложения");
	ДанныеПриложения.IDПриложения = "cc9b7be075074e6caaff515a3c5ef0e5";
	ДанныеПриложения.ПарольПриложения = "dc807379134444cca2a27e21c9bf9d7d";
	
	Возврат ДанныеПриложения;
	
КонецФункции

// Функция возвращает url авторизации.
//
// Возвращаемое значение:
//  Сервер  - строка - 
//
Функция АдресАвторизации() Экспорт
	
	ДанныеПриложения = ДанныеПриложения();
	Адрес = "https://oauth.yandex.ru/authorize?response_type=code&client_id=" + ДанныеПриложения.IDПриложения + "&client_secret=" + ДанныеПриложения.ПарольПриложения+ "&redirect_uri=" + "https://oauth.yandex.ru/verification_code";		
	
	Возврат  Адрес;
	
КонецФункции

Функция ЗапросПолучитьТокеныПоКоду(ВременныйКод) Экспорт
	
	ДанныеПриложения = ДанныеПриложения();	
    Заголовки = Новый Соответствие;
    Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");	

	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить("grant_type=authorization_code");
	ПараметрыURL.Добавить("code=" + ВременныйКод);
    ПараметрыURL.Добавить("client_id=" + ДанныеПриложения.IDПриложения);    
    ПараметрыURL.Добавить("client_secret=" + ДанныеПриложения.ПарольПриложения);
	
	Адрес = "/token?"; 
    HTTPЗапрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Тело = СтрСоединить(ПараметрыURL, "&");
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,"windows-1251");
    
	Возврат HTTPЗапрос;
	
КонецФункции

Функция ПолучитьКороткийНомерМагазина(НомерМагазина)
	
	КороткийНомерМагазина = НомерМагазина;
	
	ПозицияИскомогоСимвола = СтрНайти(НомерМагазина,"-");
	Если ПозицияИскомогоСимвола > 0 Тогда
		КороткийНомерМагазина = Прав(НомерМагазина,СтрДлина(НомерМагазина)- ПозицияИскомогоСимвола);
	КонецЕсли;
	
	Возврат КороткийНомерМагазина;
	
КонецФункции

Функция УстановитьНастройкиАвторизации(ДанныеАвторизации, Организация, НомерМагазина) Экспорт
		
	ИдентификаторОрганизации = Строка(Организация.УникальныйИдентификатор());
	КороткийНомерМагазина = ПолучитьКороткийНомерМагазина(НомерМагазина);
	
	Если ИдентификаторОрганизации <> Неопределено И 
		 ДанныеАвторизации.Свойство("access_token") И
		 ДанныеАвторизации.Свойство("access_token_expires") И 
		 ДанныеАвторизации.Свойство("refresh_token") Тогда
		 	//сохранение данных организации
			ВладелецИмяСервиса = "ЯндексМаркетВитринаПлюсФулфилмент";
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ВладелецИмяСервиса, Организация, "organization_id");
			//сохранение данных ключей и идентификатора магазина
			Владелец = ИдентификаторОрганизации + "/ЯндексМаркетВитринаПлюсФулфилмент";
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ДанныеАвторизации.access_token, "access_token");
		    ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ДанныеАвторизации.access_token_expires, "access_token_expires");	
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ДанныеАвторизации.refresh_token, "refresh_token");
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, КороткийНомерМагазина, "campaign_id");
			НастройкиУстановлены = Истина;
	Иначе
		НастройкиУстановлены = Ложь;	
	КонецЕсли;
	
	Если Не НастройкиУстановлены Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось сохранить данные авторизации в безопасном хранилище, владелец = .'" +Владелец+ "; en = 'Failed to save data, owner = '" + Владелец);		
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка сохранения данных в безопасном хранилище.'");
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		
	КонецЕсли;
	
	Возврат НастройкиУстановлены;
	
КонецФункции

Функция ТекущиеДанныеАвторизации(Организация) Экспорт
	
	ИдентификаторОрганизации = Строка(Организация.УникальныйИдентификатор());
	Владелец = ИдентификаторОрганизации + "/ЯндексМаркетВитринаПлюсФулфилмент";
	ДанныеАвторизации = "access_token, access_token_expires, refresh_token, campaign_id";
	
	ТекущиеДанные =
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации, Ложь);

	Возврат ТекущиеДанные;
КонецФункции

Функция ТекущиеДанныеАвторизацииОрганизация() Экспорт
	
	Владелец = "ЯндексМаркетВитринаПлюсФулфилмент";
	ДанныеАвторизации = "organization_id";
	
	ТекущиеДанные =
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации, Ложь);

	Возврат ТекущиеДанные;
КонецФункции

Процедура УдалитьДанныеАвторизации(Организация) Экспорт
	
	ИдентификаторОрганизации = Строка(Организация.УникальныйИдентификатор());
	Владелец = ИдентификаторОрганизации + "/ЯндексМаркетВитринаПлюсФулфилмент";
	ДанныеАвторизации = "access_token, access_token_expires, refresh_token";
	
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации);
	
	ВладелецИмяСервиса = "ЯндексМаркетВитринаПлюсФулфилмент";
	ДанныеАвторизацииОрганизации = "organization_id";
	
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ВладелецИмяСервиса, ДанныеАвторизацииОрганизации);
	
КонецПроцедуры

Функция СтруктураПараметровСпособаЗаданияЦены() Экспорт

	СтруктураПараметровСпособаЗаданияЦены = Новый Структура("ИмяПараметра, СписокВыбора, ЗначениеПараметра");
	СтруктураПараметровСпособаЗаданияЦены.ИмяПараметра = Нстр("ru = 'Тип цены Яндекс.Маркет'");
	СтруктураПараметровСпособаЗаданияЦены.СписокВыбора = "Минимальная цена продажи на Маркете;Рекомендованная Маркетом;Минимальная среди всех предложений товара на Маркете;Максимальная без скидки;Максимальная для показов на Маркете";

	Возврат СтруктураПараметровСпособаЗаданияЦены;
	
КонецФункции

//Фоновые задания
Процедура ПолучитьРекомендацииПоСклейкеТовараЯндексМаркет(ShopSKU = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеРекомендацийПоСклейкеТовараЯндексМаркет);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Попытка
		ПолучитьРекомендации(ShopSKU);
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка вызова API Яндекс.Маркет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

Процедура ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурнала , ИмяСобытия, 
		Знач КомментарийСПараметрами , ИнформацияОбОшибке = "") Экспорт
	
	// Определение уровня журнала регистрации на основе типа переданного сообщения об ошибке.
	Если ТипЗнч(УровеньЖурнала) <> Тип("УровеньЖурналаРегистрации") Тогда
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Если КомментарийСПараметрами = "" Тогда
			ТекстСообщенияПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Иначе
			ТекстСообщенияПользователю = КомментарийСПараметрами + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") И ИнформацияОбОшибке <> "" Тогда
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ИнформацияОбОшибке;
		КонецЕсли;
		ТекстСообщенияПользователю = КомментарийСПараметрами;
	КонецЕсли;
	
	// Журнал регистрации 
	УстановитьПривилегированныйРежим(Истина);
	ГруппаСобытий = ПараметрыЖурнала.ГруппаСобытий + ?(ИмяСобытия = "", "", "."+ ИмяСобытия);
	ЗаписьЖурналаРегистрации(
		ГруппаСобытий, 
		УровеньЖурнала, 
		,
		,
		КомментарийСПараметрами);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка ИЛИ УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение Тогда
		Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка Тогда
			ПараметрыЖурнала.Вставить("БылиОшибки", Истина);
		Иначе
			ПараметрыЖурнала.Вставить("БылиПредупреждения", Истина);
		КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СокрЛП(ТекстСообщенияПользователю); //  + Символы.ПС + Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.'")
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьРекомендации(ShopSKU = Неопределено)   
	
	Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();
	
	Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);
	КонецЕсли;
	
	ДанныеПриложения = ДанныеПриложения();
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPI();
	ИмяМетода = "/offer-mapping-entries/suggestions.json";	
	campaign_id = ДанныеАвторизации.campaign_id;
	Адрес ="/" + campaign_id + ИмяМетода;	

	Запрос = Новый Запрос();
	Если ShopSKU = Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 200
		|	   СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК shopSku,
		|	   СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара КАК name,
		|	   СтатусыПубликацииТоваровЯндексМаркет.ТоварнаяКатегория КАК category,
		|	   ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Марка.Наименование,"""") КАК vendor,
		|	   ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул,"""") КАК vendorCode
		|	   ИЗ
		|	   РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.Новый) ИЛИ 
		|   СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.СозданиеНового)";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	   СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК shopSku,
		|	   СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара КАК name,
		|	   СтатусыПубликацииТоваровЯндексМаркет.ТоварнаяКатегория КАК category,
		|	   ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Марка.Наименование,"""") КАК vendor,
		|	   ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул,"""") КАК vendorCode
		|	   ИЗ
		|	   РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	(СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.Новый) ИЛИ 
		|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.СозданиеНового))
		|	И СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации = &shopSku";
		Запрос.Параметры.Вставить("shopSku",ShopSKU);
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	СтруктураДляJSON = Неопределено;
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		СтруктураПредложения = Новый Структура("shopSku, name, category, vendor, vendorCode");
		СтруктураДляJSON = Неопределено;
		ЗаполнитьЗначенияСвойств(СтруктураПредложения,РезультатЗапроса);					
		offers = Новый Массив();
		offers.Добавить(СтруктураПредложения);	
		СтруктураДляJSON = Новый Структура();
		СтруктураДляJSON.Вставить("offers",offers);
		
		Если СтруктураДляJSON<>Неопределено Тогда
			ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON(СтруктураДляJSON);
			
			Попытка	  
				ИнтернетПрокси = Неопределено;
				Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
					МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
					ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
				КонецЕсли;
				СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
				HTTPСоединение = Новый HTTPСоединение(Сервер,,,,ИнтернетПрокси,200,СоединениеOpenSSL);
			Исключение
				ТекстОписанияСобытия = НСтр("ru = 'Отсутствует соединение с сервером '");
				ТекстОшибки = НСтр("ru = 'Отсутствует соединение с сервером " + Сервер +";'");		
				ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			КонецПопытки;
			
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Content-Type", "application/json");
			Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
			
			HTTPЗапрос = Новый HTTPЗапрос(Адрес,Заголовки);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
			СтруктураОтвета = Новый Структура();
			
			Попытка
				HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
				СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
				СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
				КодСостояния = HTTPОтвет.КодСостояния;	
			Исключение 
            	ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
				ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса: '" + КодСостояния + "; "+ HTTPОтвет.ПолучитьТелоКакСтроку()+";'");
				ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			КонецПопытки;	
			
			Если КодСостояния= 200 И СтруктураОтвета.status = "OK" Тогда
				ОбновитьСтатусыПубликации(СтруктураОтвета.result);
			Иначе
				Если СтруктураОтвета.Свойство("status") И СтруктураОтвета.status = "ERROR" Тогда
					ОбработатьОшибкиПриОтправкеСтатусов(РезультатЗапроса.ShopSKU,СтруктураОтвета.errors);
				Иначе
					ОбработатьОшибкиПриОтправкеСтатусов(РезультатЗапроса.ShopSKU);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузкаУстановленныхЦенВСервисЯндексМаркет(ПараметрыВыполнения = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВыгрузкаУстановленныхЦенВСервисЯндексМаркет);
	
	Если ПустаяСтрока(ИмяПользователя())
		ИЛИ (ПараметрыВыполнения<>Неопределено И ПараметрыВыполнения.НемедленноеОбновление) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	Если (ТипЗнч(ПараметрыВыполнения) = Тип("Структура") И ПараметрыВыполнения.НемедленноеОбновление) Тогда 
		ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе   
		ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по инициативе пользователя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;   	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Попытка     
    	ВыгрузитьУстановленныеЦены();
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка вызова API Яндекс.Маркет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())); 
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь); 
	КонецЕсли;

КонецПроцедуры     

Процедура ВыгрузкаОстатковТоваровЯндексМаркет(ПараметрыВыполнения = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВыгрузкаУстановленныхЦенВСервисЯндексМаркет);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Попытка     
    	ВыгрузитьОстаткиТоваров();
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка вызова API Яндекс.Маркет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())); 
	
	УстановитьПривилегированныйРежим(Ложь); 

КонецПроцедуры   

Функция ПолучитьРезультатСУчетомУпаковки(РезультатЗапроса)   
	
	ТабРез = Новый ТаблицаЗначений();
	ТабРез.Колонки.Добавить("sku",Новый ОписаниеТипов("Строка"));
	ТабРез.Колонки.Добавить("warehouseId",Новый ОписаниеТипов("Число"));
	ТабРез.Колонки.Добавить("count",Новый ОписаниеТипов("Число")); 
	ТабРез.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабРез.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТабРез.Колонки.Добавить("Упаковка",Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Для каждого Стр Из РезультатЗапроса Цикл  
		ОстатокПоПозиции = Стр.Остаток;
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Номенклатура",Стр.Номенклатура);  
		Запрос.Параметры.Вставить("Характеристика",Стр.Характеристика);
		Запрос.Параметры.Вставить("Склад",Стр.Склад);
		Запрос.Параметры.Вставить("ТекущаяДата",ТекущаяДатаСеанса());
		Запрос.Текст = "ВЫБРАТЬ  
					|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура, 
					|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
					|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
					|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК ИдентификаторПубликации,
					|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса
					|ИЗ
					|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет,
					|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
					|ГДЕ
					|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
					|	И РАЗНОСТЬДАТ(СтатусыПубликацииТоваровЯндексМаркет.ДатаУстановкиЦены, &ТекущаяДата, ДЕНЬ) < 30
					|	И СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
					|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
					|	И ВЫРАЗИТЬ(СоответствияОбъектовМаркетплейсов.Объект1С КАК Справочник.Склады) = &Склад
					|	И СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = &Номенклатура
					|	И СтатусыПубликацииТоваровЯндексМаркет.Характеристика = &Характеристика";
		
		Результат = Запрос.Выполнить().Выгрузить();
		Для каждого Стр Из Результат Цикл   
			
			СтрНов = ТабРез.Добавить();  
			СтрНов.sku = Стр.ИдентификаторПубликации;
			СтрНов.warehouseId = Стр.ИдентификаторОбъектаМаркетплейса;
			КоэффициентУпаковки  = 1;
			Если ЗначениеЗаполнено(Стр.Упаковка) Тогда
				КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Стр.Упаковка,Стр.Номенклатура); 
			КонецЕсли;
			
			СтрНов.count = ОстатокПоПозиции/КоэффициентУпаковки; 
			СтрНов.Номенклатура = Стр.Номенклатура; 
			СтрНов.Характеристика = Стр.Характеристика;
			СтрНов.Упаковка = Стр.Упаковка;
			ОстатокПоПозиции = ОстатокПоПозиции - СтрНов.count; 
		КонецЦикла;

	КонецЦикла;  
	
	Возврат ТабРез;
	
КонецФункции

Процедура ВыгрузитьОстаткиТоваров() 
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Параметры.Вставить("ТекущаяДата",ТекущаяДатаСеанса());
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 2000
		 |	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		 |	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		 |	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		 |	ВЫРАЗИТЬ(СоответствияОбъектовМаркетплейсов.Объект1С КАК Справочник.Склады) КАК Склад
		 |ПОМЕСТИТЬ ВтТовары
		 |ИЗ
		 |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		 |		ЛЕВОЕ СОЕДИНЕНИЕ 
		 |		РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		 |			ПО ИСТИНА
		 |ГДЕ 
		 |  СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
		 |  И НЕ СтатусыПубликацииТоваровЯндексМаркет.ЦенаПродажи=0 
		 |	И СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
		 |	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)";
	Результат = Запрос.Выполнить();    
	
	РезультатЗапроса = ПолучитьРазницуОстатковТовараДляВыгрузки(МенеджерВТ); 
	
	РезультатСУчетомУпаковки = ПолучитьРезультатСУчетомУпаковки(РезультатЗапроса); 
 
	Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();
	
	Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда   
		ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);  
	КонецЕсли;
	
	ДанныеПриложения = ДанныеПриложения();
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPI();
	ИмяМетода = "/offers/stocks.json";	
	campaign_id = ДанныеАвторизации.campaign_id;
	Адрес ="/" + campaign_id + ИмяМетода;	
	
	skus = Новый Массив();	
	
	Для каждого Стр Из РезультатСУчетомУпаковки  Цикл
		
		СтруктураОстатков = Новый Структура("sku, warehouseId, items");
		СтруктураОстатков.sku = Стр.sku;  
		СтруктураОстатков.warehouseId = Стр.warehouseId; 
		items = Новый Массив();
		СтруктураПозиции = Новый Структура("type,count,updatedAt"); 
		СтруктураПозиции.type = "FIT";  
		СтруктураПозиции.count = Стр.count;   
		СтруктураПозиции.updatedAt = ЗаписатьДатуJSON(ТекущаяДатаСеанса(), ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата);
		items.Добавить(СтруктураПозиции);
		СтруктураОстатков.items = items;
		skus.Добавить(СтруктураОстатков);
		
	КонецЦикла;	    
	
	СтруктураДляJSON = Новый Структура();
	СтруктураДляJSON.Вставить("skus",skus);	
	
	Если СтруктураДляJSON<>Неопределено Тогда
		ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON(СтруктураДляJSON);
		
		Попытка	
			ИнтернетПрокси = Неопределено;
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
				МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
				ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
			КонецЕсли;
			СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
			HTTPСоединение = Новый HTTPСоединение(Сервер,,,,ИнтернетПрокси,200,СоединениеOpenSSL);
		Исключение 
			ТекстОписанияСобытия = НСтр("ru = 'Отсутствует соединение с сервером '");
			ТекстОшибки = НСтр("ru = 'Отсутствует соединение с сервером " + Сервер +";'");		
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		HTTPЗапрос = Новый HTTPЗапрос(Адрес,Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		СтруктураОтвета = Новый Структура();
		
		Попытка
			HTTPОтвет = HTTPСоединение.Записать(HTTPЗапрос);  
			СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
			КодСостояния = HTTPОтвет.КодСостояния;		
		Исключение 
			ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
			ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса: '"+КодСостояния+"; "+ HTTPОтвет.ПолучитьТелоКакСтроку()+";'");
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;	
		
		Если КодСостояния= 200 И СтруктураОтвета.status = "OK" Тогда
			ОбновитьДанныеОбОстатках(РезультатЗапроса, РезультатСУчетомУпаковки);
		Иначе
			Если СтруктураОтвета.Свойство("status") И СтруктураОтвета.status = "ERROR" Тогда
				ОписаниеОшибок = ТекстОшибки(СтруктураОтвета.errors);	
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли; 	
			ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");
			ТекстОшибки = НСтр("ru = 'Ошибка вызова API Яндекс.Маркет: " + КодСостояния + "; "+ HTTPОтвет.ПолучитьТелоКакСтроку() + "; " + ОписаниеОшибок + ";'");
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры    

Функция УчетнаяЗаписьЯндексМаркет() Экспорт  
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчетныеЗаписиМаркетплейсов.Ссылка КАК УчетнаяЗапись
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
		|ГДЕ
		|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
		|	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления";  
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() Тогда    
		УчетнаяЗапись = Результат[0].УчетнаяЗапись;
	Иначе		
		НоваяУчетнаяЗапись = Справочники.УчетныеЗаписиМаркетплейсов.СоздатьЭлемент(); 
		НоваяУчетнаяЗапись.Наименование = "Магазин на Яндекс.Маркет";
		НоваяУчетнаяЗапись.ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет;
		НоваяСтрокаВидовЦен = НоваяУчетнаяЗапись.ВидыЦен.Добавить();
		НоваяСтрокаВидовЦен.ИмяНастройки = НСтр("ru = 'Цена продажи'");
		НоваяУчетнаяЗапись.Записать();  
		УчетнаяЗапись = НоваяУчетнаяЗапись.Ссылка;	
	КонецЕсли;
	
	Возврат УчетнаяЗапись;
	
КонецФункции

Функция ДанныеУчетнойЗаписиЯндексМаркет() Экспорт
	
	ДанныеУчетнойЗаписи = Новый Структура("УчетнаяЗапись,ЦенаПродажи,ИсточникКатегории");
	Запрос = Новый Запрос();     
	ИмяНастройки = НСтр("ru = 'Цена продажи'");
	Запрос.Параметры.Вставить("ИмяНастройки",ИмяНастройки);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетныеЗаписиМаркетплейсов.Ссылка КАК УчетнаяЗапись,
	|	УчетныеЗаписиМаркетплейсов.ИсточникКатегории КАК ИсточникКатегории,
	|	ЕСТЬNULL(ВидыЦенМаркетплейсов.ВидЦены,ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ЦенаПродажи
	|ИЗ
	|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов.ВидыЦен КАК ВидыЦенМаркетплейсов
	|		ПО  (УчетныеЗаписиМаркетплейсов.Ссылка = ВидыЦенМаркетплейсов.Ссылка
	|			И ВидыЦенМаркетплейсов.ИмяНастройки = &ИмяНастройки)
	|ГДЕ
	|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
	|	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления"; 
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() Тогда    
		ДанныеУчетнойЗаписи.УчетнаяЗапись = Результат[0].УчетнаяЗапись;
		ДанныеУчетнойЗаписи.ЦенаПродажи = Результат[0].ЦенаПродажи;
		ДанныеУчетнойЗаписи.ИсточникКатегории = Результат[0].ИсточникКатегории;	
	Иначе		
		НоваяУчетнаяЗапись = Справочники.УчетныеЗаписиМаркетплейсов.СоздатьЭлемент(); 
		НоваяУчетнаяЗапись.Наименование = "Магазин на Яндекс.Маркет";
		НоваяУчетнаяЗапись.ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет;
		НоваяСтрокаВидовЦен = НоваяУчетнаяЗапись.ВидыЦен.Добавить();
		НоваяСтрокаВидовЦен.ИмяНастройки = НСтр("ru = 'Цена продажи'");
		НоваяУчетнаяЗапись.Записать();  
		ДанныеУчетнойЗаписи.УчетнаяЗапись = НоваяУчетнаяЗапись.Ссылка;	
		ДанныеУчетнойЗаписи.ЦенаПродажи = Справочники.ВидыЦен.ПустаяСсылка();
		ДанныеУчетнойЗаписи.ИсточникКатегории = Перечисления.ИсточникиКатегорийДляМаркетплейса.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ДанныеУчетнойЗаписи;
		
КонецФункции

Процедура ОбновитьДанныеОбОстатках(РезультатЗапроса, РезультатСУчетомУпаковки)  
	
	УчетнаяЗапись = УчетнаяЗаписьЯндексМаркет(); 
	
	Для каждого Стр Из РезультатЗапроса Цикл
		Набор = РегистрыСведений.ОстаткиТоваровМаркетплейсов.СоздатьНаборЗаписей(); 
		Набор.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗапись);
		Набор.Отбор.Склад.Установить(Стр.Склад);
		Набор.Отбор.Номенклатура.Установить(Стр.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Стр.Характеристика);
		Набор.Прочитать();
		Если Набор.Количество() Тогда
			Запись = Набор[0];
			Запись.Количество = Стр.Остаток; 
			Запись.ДатаВыгрузкиОстатков = ТекущаяДатаСеанса();
		Иначе
			Запись = Набор.Добавить();  
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись; 
			Запись.Склад = Стр.Склад;
			Запись.Номенклатура = Стр.Номенклатура;  
			Запись.Характеристика = Стр.Характеристика;
			Запись.Количество = Стр.Остаток;
			Запись.ДатаВыгрузкиОстатков = ТекущаяДатаСеанса();	
		КонецЕсли;
		Набор.Записать();
	КонецЦикла; 	
	
	РезультатСУчетомУпаковки.Свернуть("sku,Номенклатура,Характеристика,Упаковка","count");
	
	Для каждого Стр Из РезультатСУчетомУпаковки Цикл	
		НаборПубликаций = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		НаборПубликаций.Отбор.Номенклатура.Установить(Стр.Номенклатура);
		НаборПубликаций.Отбор.Характеристика.Установить(Стр.Характеристика);
		НаборПубликаций.Отбор.Упаковка.Установить(Стр.Упаковка);
		НаборПубликаций.Прочитать();
		Если НаборПубликаций.Количество() Тогда
			Запись = НаборПубликаций[0];
			Запись.ОстатокВУпаковках = Стр.count;
			НаборПубликаций.Записать();
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтруктуруИзмеренийПоИдентификаторуПлощадки(ИдентификаторПлощадки) 
	
	Структура = Новый Структура("Номенклатура, Характеристика, Упаковка");
	Запрос = Новый Запрос();  
	Запрос.Параметры.Вставить("ИдентификаторПлощадки",ИдентификаторПлощадки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
	               |	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
	               |	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка
	               |ИЗ
	               |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	               |ГДЕ
	               |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки = &ИдентификаторПлощадки";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Структура,Результат);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Процедура ВыгрузитьУстановленныеЦены()  
	
	Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();
	
	Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);
	КонецЕсли;
	
	ДанныеПриложения = ДанныеПриложения();
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPI();
	ИмяМетода = "/offer-prices/updates.json";	
	campaign_id = ДанныеАвторизации.campaign_id;
	Адрес ="/" + campaign_id + ИмяМетода;	
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(); 
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьХарактеристикиНоменклатурыДляЦенообразования = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатурыДляЦенообразования");
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьУпаковкиНоменклатурыДляЦенообразования = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатурыДляЦенообразования");

	ВидЦен = ИнтеграцияСЯндексМаркетСервер.ДанныеУчетнойЗаписиЯндексМаркет().ЦенаПродажи; 
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ВидЦен",ВидЦен);  
	Запрос.Параметры.Вставить("ТекущаяДата",ТекущаяДатаСеанса()); 
	
	Если ИспользуетсяЦенообразование25 Тогда
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000 РАЗЛИЧНЫЕ 
		               |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
					   |	ЦеныНоменклатуры25СрезПоследних.Цена КАК Цена,
					   |	ЦеныНоменклатуры25СрезПоследних.Период КАК Период
		               |ИЗ
		               |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
					   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
					   |		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = СправочникНоменклатура.Ссылка
					   |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
					   |			ПО СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка 
		               |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних КАК ЦеныНоменклатуры25СрезПоследних
		               |					ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура 
					   |					И &УсловиеПоХарактеристике
					   |					И &УсловиеПоУпаковке
		               |ГДЕ
					   |	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
					   |	И  (ЦеныНоменклатуры25СрезПоследних.Номенклатура IS NOT NULL)  
		               |	И ЦеныНоменклатуры25СрезПоследних.ВидЦены = &ВидЦен
		               |	И (СтатусыПубликацииТоваровЯндексМаркет.ЦенаПродажи <> ЦеныНоменклатуры25СрезПоследних.Цена
		               |		ИЛИ РАЗНОСТЬДАТ(СтатусыПубликацииТоваровЯндексМаркет.ДатаУстановкиЦены,&ТекущаяДата,ДЕНЬ) > 30)";


		
		Если ИспользоватьХарактеристикиНоменклатуры И ИспользоватьХарактеристикиНоменклатурыДляЦенообразования Тогда
			УсловиеПоХарактеристике = "((СтатусыПубликацииТоваровЯндексМаркет.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = ЦеныНоменклатуры25СрезПоследних.ХарактеристикаЦО
						|			   И НЕ (ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)))
						|			   ИЛИ ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать))";
		Иначе  
			УсловиеПоХарактеристике = "ИСТИНА";
		КонецЕсли;  	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеПоХарактеристике",УсловиеПоХарактеристике);
		
		Если ИспользоватьУпаковкиНоменклатуры И ИспользоватьУпаковкиНоменклатурыДляЦенообразования Тогда
			УсловиеПоУпаковке = "((СтатусыПубликацииТоваровЯндексМаркет.Упаковка = ЦеныНоменклатуры25СрезПоследних.УпаковкаЦО
			|			   И НЕ (ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)))
			|			   ИЛИ ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать))";
		Иначе  
			УсловиеПоУпаковке = "ИСТИНА";
		КонецЕсли; 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеПоУпаковке",УсловиеПоУпаковке);
		Запрос.Текст = ТекстЗапроса; 	
	Иначе 
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000 РАЗЛИЧНЫЕ 
		               |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
					   |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
					   |	ЦеныНоменклатурыСрезПоследних.Период КАК Период
		               |ИЗ
		               |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
					   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
					   |		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = СправочникНоменклатура.Ссылка
					   |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
					   |			ПО СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка 
		               |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		               |					ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура 
					   |					И &УсловиеПоХарактеристике
					   |					И &УсловиеПоУпаковке
		               |ГДЕ
					   |	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
					   |	И  (ЦеныНоменклатурыСрезПоследних.Номенклатура IS NOT NULL)  
		               |	И ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦен
		               |	И (СтатусыПубликацииТоваровЯндексМаркет.ЦенаПродажи <> ЦеныНоменклатурыСрезПоследних.Цена
		               |		ИЛИ РАЗНОСТЬДАТ(СтатусыПубликацииТоваровЯндексМаркет.ДатаУстановкиЦены,&ТекущаяДата,ДЕНЬ) > 30)";
		
		Если ИспользоватьХарактеристикиНоменклатуры  Тогда
			УсловиеПоХарактеристике = "((СтатусыПубликацииТоваровЯндексМаркет.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
						|			   И НЕ (ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)))
						|			   ИЛИ ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать))";
		Иначе  
			УсловиеПоХарактеристике = "ИСТИНА";
		КонецЕсли;  	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеПоХарактеристике",УсловиеПоХарактеристике);
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			УсловиеПоУпаковке = "((СтатусыПубликацииТоваровЯндексМаркет.Упаковка = ЦеныНоменклатурыСрезПоследних.Упаковка
			|			   И НЕ (ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)))
			|			   ИЛИ ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать))";
		Иначе  
			УсловиеПоУпаковке = "ИСТИНА";
		КонецЕсли; 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеПоУпаковке",УсловиеПоУпаковке);
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;    
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	offers = Новый Массив();	
	
	Для каждого Стр Из РезультатЗапроса Цикл
		
		СтруктураПредложения = Новый Структура("marketSku, price");
		СтруктураПредложения.marketSku = Стр.ИдентификаторТовараПлощадки;  
	    СтруктураЦены = Новый Структура("currencyId,value"); 
		СтруктураЦены.currencyId = "RUR";  
		СтруктураЦены.value = СтрЗаменить(Формат(Стр.Цена,"ЧДЦ=2; ЧРД=."),Символ(160),"");    
		СтруктураПредложения.price = СтруктураЦены;
		offers.Добавить(СтруктураПредложения);
		
	КонецЦикла;	    
	
	СтруктураДляJSON = Новый Структура();
	СтруктураДляJSON.Вставить("offers",offers);	
	
	Если РезультатЗапроса.Количество()>0 Тогда
		ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON(СтруктураДляJSON);
		
		Попытка	
			ИнтернетПрокси = Неопределено;
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
				МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
				ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
			КонецЕсли;
			СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
			HTTPСоединение = Новый HTTPСоединение(Сервер,,,,ИнтернетПрокси,200,СоединениеOpenSSL);		
		Исключение
			ТекстОписанияСобытия = НСтр("ru = 'Отсутствует соединение с сервером '");
			ТекстОшибки = НСтр("ru = 'Отсутствует соединение с сервером " + Сервер +";'");		
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		HTTPЗапрос = Новый HTTPЗапрос(Адрес,Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		СтруктураОтвета = Новый Структура();
		
		Попытка
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
			СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
			КодСостояния = HTTPОтвет.КодСостояния;	
		Исключение 
        	ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
			ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса: '" + КодСостояния + "; "+ HTTPОтвет.ПолучитьТелоКакСтроку()+";'");
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;	
		
		Если КодСостояния= 200 И СтруктураОтвета.status = "OK" Тогда
			ОбновитьДатуУстановкиЦены(РезультатЗапроса);
		Иначе
			Если СтруктураОтвета.Свойство("status") И СтруктураОтвета.status = "ERROR" Тогда
				ОписаниеОшибок = ТекстОшибки(СтруктураОтвета.errors);	
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли; 	
			ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");
			ТекстОшибки = НСтр("ru = 'Ошибка вызова API Яндекс.Маркет: " + КодСостояния + "; "+ HTTPОтвет.ПолучитьТелоКакСтроку() + "; " + ОписаниеОшибок + ";'");
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  

Процедура ОбновитьДатуУстановкиЦены(ТаблицаДатУстановкиЦен)
	
	Для каждого Стр Из ТаблицаДатУстановкиЦен Цикл 
			Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
			СтруктураИзмерений = ПолучитьСтруктуруИзмеренийПоИдентификаторуПлощадки(Стр.ИдентификаторТовараПлощадки);
			Набор.Отбор.Номенклатура.Установить(СтруктураИзмерений.Номенклатура);
			Набор.Отбор.Характеристика.Установить(СтруктураИзмерений.Характеристика);
			Набор.Отбор.Упаковка.Установить(СтруктураИзмерений.Упаковка);
			Набор.Прочитать();
			Если Набор.Количество() Тогда
				Запись = Набор[0];
				Запись.ДатаУстановкиЦены = ТекущаяДатаСеанса();
				Запись.ЦенаПродажи = Стр.Цена;
				Набор.Записать();
			КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьРекомендованныеЦеныЯндексМаркет(ПараметрыВыполнения = Неопределено, ПараметрыОбновленияЦен = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузитьРекомендованныеЦеныЯндексМаркет); 
	
	Если ТипЗнч(ПараметрыВыполнения) = Тип("Структура") И ПараметрыВыполнения.Свойство("ТаблицаВидовЦен") Тогда 
		ТаблицаВидовЦен = ПараметрыВыполнения.ТаблицаВидовЦен;
	ИначеЕсли ТипЗнч(ПараметрыВыполнения) = Тип("ТаблицаЗначений") Тогда
		ТаблицаВидовЦен = ПараметрыВыполнения.Скопировать();	
	Иначе 
		ТаблицаВидовЦен = Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПользователя()) 
		ИЛИ (ТипЗнч(ПараметрыВыполнения) = Тип("Структура") И ПараметрыВыполнения.НемедленноеОбновление) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	Если (ТипЗнч(ПараметрыВыполнения) = Тип("Структура") И ПараметрыВыполнения.НемедленноеОбновление) Тогда 
		ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе   
		ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по инициативе пользователя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;   
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Попытка   
		СписокОбработанных = Новый СписокЗначений();  
		СписокИдентификаторовПубликаций = СписокИдентификаторовПубликаций(ТаблицаВидовЦен,СписокОбработанных);  
		Пока СписокИдентификаторовПубликаций.Количество()>0 Цикл    
			ПолучитьРекомендованныеЦены(СписокИдентификаторовПубликаций, ТаблицаВидовЦен); 
			Для каждого ЭлементСписка Из СписокИдентификаторовПубликаций Цикл
				СписокОбработанных.Добавить(ЭлементСписка.Значение);
			КонецЦикла;
			СписокИдентификаторовПубликаций = СписокИдентификаторовПубликаций(ТаблицаВидовЦен,СписокОбработанных);  
		КонецЦикла;
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка вызова API Яндекс.Маркет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь); 
	КонецЕсли;
	
КонецПроцедуры   

Функция СписокИдентификаторовПубликаций(ТаблицаВидовЦен,СписокОбработанных) 
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();   
	
	СписокИдентификаторовПубликаций = Новый СписокЗначений();
	Если ТаблицаВидовЦен<>Неопределено И  ТаблицаВидовЦен.Количество()  Тогда
		СписокЗагружаемыхЦен = ТаблицаВидовЦен.ВыгрузитьКолонку("ВидЦены"); 
	Иначе
		СписокЗагружаемыхЦен = ПолучитьМассивРекомендованныхЦен();	
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ТекущаяДата",НачалоДня(ТекущаяДата()));
	Запрос.Параметры.Вставить("СписокЗагружаемыхЦен",СписокЗагружаемыхЦен);
	Запрос.Параметры.Вставить("СписокОбработанных",СписокОбработанных);
	
	Если ИспользуетсяЦенообразование25 Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1000 РАЗЛИЧНЫЕ
		               |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки
		               |ИЗ
		               |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет 
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних КАК ЦеныНоменклатуры25СрезПоследних
		               |		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура=ЦеныНоменклатуры25СрезПоследних.Номенклатура
		               |ГДЕ
					   |	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
					   |	И НЕ СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки В(&СписокОбработанных) 
					   |	И 
					   |    (
					   |	(ЦеныНоменклатуры25СрезПоследних.Номенклатура IS NULL) ИЛИ 
		               |	(ЦеныНоменклатуры25СрезПоследних.ВидЦены В(&СписокЗагружаемыхЦен)
		               |	И ЦеныНоменклатуры25СрезПоследних.Период < &ТекущаяДата)
					   |	И НЕ ЦеныНоменклатуры25СрезПоследних.ВидЦены.ПометкаУдаления
					   |	)";
	Иначе 
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1000 РАЗЛИЧНЫЕ
		               |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки
		               |ИЗ
		               |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет 
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		               |		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура=ЦеныНоменклатурыСрезПоследних.Номенклатура
		               |ГДЕ
					   |	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)   
					   |	И НЕ СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки В(&СписокОбработанных) 
					   |	И 
					   |    (
					   |	(ЦеныНоменклатурыСрезПоследних.Номенклатура IS NULL) ИЛИ 
		               |	(ЦеныНоменклатурыСрезПоследних.ВидЦены В(&СписокЗагружаемыхЦен)
		               |	И ЦеныНоменклатурыСрезПоследних.Период < &ТекущаяДата)
					   |	И НЕ ЦеныНоменклатурыСрезПоследних.ВидЦены.ПометкаУдаления
					   |	)";
	КонецЕсли; 
	
	СписокИдентификаторовПубликаций.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторТовараПлощадки")); 
	
	Возврат СписокИдентификаторовПубликаций; 
	
КонецФункции

Процедура ПолучитьРекомендованныеЦены(СписокИдентификаторовПубликаций, ТаблицаВидовЦен)   
	
	Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();
	
	Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда   
		ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);  
	КонецЕсли;
	
	ДанныеПриложения = ДанныеПриложения();
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPI();
	ИмяМетода = "/offer-prices/suggestions.json";	
	campaign_id = ДанныеАвторизации.campaign_id;
	Адрес ="/" + campaign_id + ИмяМетода;	
	
	СтруктураДляJSON = Неопределено;
	
	
	offers = Новый Массив();
	СтруктураДляJSON = Неопределено;
	Для каждого Элемент Из СписокИдентификаторовПубликаций Цикл
		СтруктураПредложения = Новый Структура("marketSku");
		СтруктураПредложения.Вставить("marketSku", Элемент.Значение);
		offers.Добавить(СтруктураПредложения);		
	КонецЦикла;
	
	СтруктураДляJSON = Новый Структура();
	СтруктураДляJSON.Вставить("offers",offers);
	
	Если СтруктураДляJSON<>Неопределено Тогда
		ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON(СтруктураДляJSON);
		
		Попытка	
			ИнтернетПрокси = Неопределено;
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
				МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
				ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
			КонецЕсли;
			СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
			HTTPСоединение = Новый HTTPСоединение(Сервер,,,,ИнтернетПрокси,200,СоединениеOpenSSL);		
		Исключение
			ТекстОписанияСобытия = НСтр("ru = 'Отсутствует соединение с сервером '");
			ТекстОшибки = НСтр("ru = 'Отсутствует соединение с сервером " + Сервер +";'");		
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		HTTPЗапрос = Новый HTTPЗапрос(Адрес,Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		СтруктураОтвета = Новый Структура();
		
		Попытка
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
			СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
			КодСостояния = HTTPОтвет.КодСостояния;		
		Исключение 
       		ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
			ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса: '" + КодСостояния + "; "+ HTTPОтвет.ПолучитьТелоКакСтроку()+";'");
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;	
		
		Если КодСостояния = 200 И СтруктураОтвета.status = "OK" Тогда
			ОбновитьРекомендованныеЦены(СтруктураОтвета.result, ТаблицаВидовЦен);
		Иначе
			Если СтруктураОтвета.Свойство("status") И СтруктураОтвета.status = "ERROR" Тогда
				ОписаниеОшибок = ТекстОшибки(СтруктураОтвета.errors);	
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли; 	
			ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");
			ТекстОшибки = НСтр("ru = 'Ошибка вызова API Яндекс.Маркет: " + КодСостояния + "; "+ HTTPОтвет.ПолучитьТелоКакСтроку() + "; " + ОписаниеОшибок + ";'");
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СоответствиеИдентификаторов()
	
	СоответствиеИдентификаторов = Новый Соответствие();
	СоответствиеИдентификаторов.Вставить("BUYBOX","Минимальная цена продажи на Маркете");
	СоответствиеИдентификаторов.Вставить("DEFAULT_OFFER","Рекомендованная Маркетом");
	СоответствиеИдентификаторов.Вставить("MIN_PRICE_MARKET","Минимальная среди всех предложений товара на Маркете");
	СоответствиеИдентификаторов.Вставить("MAX_DISCOUNT_BASE","Максимальная без скидки");
	СоответствиеИдентификаторов.Вставить("MARKET_OUTLIER_PRICE","Максимальная для показов на Маркете");
	
	Возврат СоответствиеИдентификаторов; 

КонецФункции 

// Возврращает массив рекомендованных цен
// 
// Возвращаемое значение:
//    Массив из СправочникСсылка.ВидыЦен - массив рекомендованных цен 
Функция ПолучитьМассивРекомендованныхЦен() Экспорт  
	
	МассивЦен = Новый Массив();
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыЦен.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВидыЦен КАК ВидыЦен
	               |ГДЕ
	               |	НЕ ПометкаУдаления
	               |	И ВидыЦен.СпособЗаданияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияЦен.ЗагружаетсяИзЯндексМаркет)";
	МассивЦен = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивЦен;
	
КонецФункции  

Функция ВидыЦенПоИмениПоля(ИмяПоля, МассивРекомендованныхЦен)   
	
	ВидыЦенПоИмениПоля = Новый Массив();
	
	СоответствиеИдентификаторов = СоответствиеИдентификаторов(); 
	ИмяТипа = СоответствиеИдентификаторов.Получить(ИмяПоля);  
	
	Если ИмяТипа = Неопределено Тогда 
		//залогировать, что на стороне сервиса появился
		//не поддерживаемый в текущей конфигурации вид цены
	Иначе	
		Для каждого ЭлементМассива Из МассивРекомендованныхЦен Цикл 
			ЗначениеИзХранилища = ЭлементМассива.ХранилищеНастроекПараметровСпособаЗаданияЦены.Получить();
			Если ЗначениеИзХранилища.ЗначениеПараметра = ИмяТипа Тогда    
				ВидыЦенПоИмениПоля.Добавить(ЭлементМассива);	
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат ВидыЦенПоИмениПоля;
	
КонецФункции

Процедура ОбновитьРекомендованныеЦены(Рекомендации, ТаблицаВидовЦен) 

	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();   
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьХарактеристикиНоменклатурыДляЦенообразования = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатурыДляЦенообразования");
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьУпаковкиНоменклатурыДляЦенообразования = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатурыДляЦенообразования");
	
	СтруктураУстановкиЦен = Новый Структура();
	СтруктураУстановкиЦен.Вставить("Дата",ТекущаяДата());   
	СтруктураУстановкиЦен.Вставить("ИспользуетсяЦенообразование25",ИспользуетсяЦенообразование25); 
	
	ВидыВсехРекомендованныхЦен = ПолучитьМассивРекомендованныхЦен();    
	
	ВидыЦен = Новый Массив();  
	Если НЕ ТаблицаВидовЦен.Количество() Тогда
		ВидыРекомендованныхЦен = ВидыВсехРекомендованныхЦен; 
	Иначе  
		ВидыРекомендованныхЦен = ТаблицаВидовЦен.ВыгрузитьКолонку("ВидЦены");
	КонецЕсли;
	Для каждого ЭлементМассива Из ВидыРекомендованныхЦен Цикл
		ВыбранныеЦены = Новый Структура();
		ВыбранныеЦены.Вставить("Выбрана",Истина);
		ВыбранныеЦены.Вставить("Влияет",Ложь); 
		ВыбранныеЦены.Вставить("Ссылка",ЭлементМассива);  
		ВыбранныеЦены.Вставить("ВидЦены",ЭлементМассива);
		ВидыЦен.Добавить(ВыбранныеЦены);
	КонецЦикла;
	СтруктураУстановкиЦен.Вставить("ВыбранныеЦены",ВидыЦен);	 
	
	ТаблицаЦен = Новый ТаблицаЗначений();
	ТаблицаЦен.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));  
	Если ИспользуетсяЦенообразование25 Тогда
		ТаблицаЦен.Колонки.Добавить("ХарактеристикаЦО", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования"));
		ТаблицаЦен.Колонки.Добавить("УпаковкаЦО", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения")); 
	Иначе
		ТаблицаЦен.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаЦен.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения")); 
	КонецЕсли;
	ТаблицаЦен.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));  
	ТаблицаЦен.Колонки.Добавить("Цена",ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный));  
	ТаблицаЦен.Колонки.Добавить("ЦенаИзмененаВручную", Новый ОписаниеТипов("Булево"));
	ТаблицаЦен.Колонки.Добавить("Валюта",  Новый ОписаниеТипов("СправочникСсылка.Валюты")); 
	СтруктураУстановкиЦен.Вставить("КодФормы","");
	СтруктураУстановкиЦен.Вставить("Модифицированность","");   
	
	Для каждого СтруктураПредложения Из Рекомендации.offers Цикл     
		
		Если СтруктураПредложения.Свойство("marketSku") И СтруктураПредложения.Свойство("priceSuggestion") Тогда 
			
			Запрос = Новый Запрос();  
			Запрос.Параметры.Вставить("ИдентификаторТовараПлощадки",СтрЗаменить(Строка(СтруктураПредложения.marketSku),Символ(160),"")); 
		    Запрос.Текст = "ВЫБРАТЬ
		                   |	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		                   |	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		                   |	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		                   |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
		                   |	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьХарактеристики,ЛОЖЬ) КАК ИспользоватьХарактеристики,
		                   |	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьУпаковки,ЛОЖЬ) КАК ИспользоватьУпаковки
		                   |ИЗ
		                   |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		                   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		                   |		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
		                   |ГДЕ
		                   |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки = &ИдентификаторТовараПлощадки";   
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл 			
				Для каждого ЭлементМассива Из СтруктураПредложения.priceSuggestion Цикл 
					
					ВидыЦенПоИмениПоля = ВидыЦенПоИмениПоля(ЭлементМассива.type, ВидыВсехРекомендованныхЦен);
					Для  каждого ВидЦены Из ВидыЦенПоИмениПоля Цикл
						Если ВидыРекомендованныхЦен.Найти(ВидЦены)<>Неопределено Тогда
							СтрНов = ТаблицаЦен.Добавить();    
							Если ИспользуетсяЦенообразование25 Тогда
								СтрНов.Номенклатура = Результат.Номенклатура;  
								Если ИспользоватьХарактеристикиНоменклатурыДляЦенообразования 
									И Результат.ИспользоватьХарактеристики Тогда
									ХарактеристикаЦО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Характеристика,"ХарактеристикаНоменклатурыДляЦенообразования");
									СтрНов.ХарактеристикаЦО = ХарактеристикаЦО; 
								КонецЕсли; 
								Если ИспользоватьУпаковкиНоменклатуры 
									И Результат.ИспользоватьУпаковки Тогда
									СтрНов.УпаковкаЦО = Результат.Упаковка; 
								КонецЕсли;
							Иначе                                            
								СтрокаСвойств = "Номенклатура";
								Если ИспользоватьХарактеристикиНоменклатуры 
									И Результат.ИспользоватьХарактеристики Тогда 
									СтрокаСвойств = СтрокаСвойств + ",Характеристика";	
								КонецЕсли;    
								Если ИспользоватьУпаковкиНоменклатуры 
									И Результат.ИспользоватьУпаковки Тогда
									СтрокаСвойств = СтрокаСвойств + ",Упаковка";	 
								КонецЕсли;
								ЗаполнитьЗначенияСвойств(СтрНов, Результат, СтрокаСвойств);  
							КонецЕсли;
							СтрНов.Цена = ЭлементМассива.price;   
							СтрНов.Валюта = Справочники.Валюты.НайтиПоКоду("643");
							СтрНов.ВидЦены = ВидЦены;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;	 
			
		КонецЕсли;
		
	КонецЦикла;     
	
	СтруктураУстановкиЦен.Вставить("ТаблицаЦен", ТаблицаЦен);  
	
	МассивДокументов = Документы.УстановкаЦенНоменклатуры.ЗаписатьИзмененияЦенНаСервере(СтруктураУстановкиЦен);
	
	Для каждого Документ Из МассивДокументов Цикл 
		
		Попытка 
			ДокументОбъект = Документ.УстановкаЦенНоменклатуры.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение			
		КонецПопытки; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОшибкиПриОтправкеСтатусов(shopSku,МассивОшибок = Неопределено)
	
	Для каждого СтруктураОшибки Из МассивОшибок Цикл
			Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
			СтруктураИзмерений = ПолучитьСтруктуруИзмерений(shopSku);
			Набор.Отбор.Номенклатура.Установить(СтруктураИзмерений.Номенклатура);
			Набор.Отбор.Характеристика.Установить(СтруктураИзмерений.Характеристика);
			Набор.Отбор.Упаковка.Установить(СтруктураИзмерений.Упаковка);
			Набор.Прочитать();
			Если Набор.Количество() Тогда
				Запись = Набор[0];
				Запись.КодОшибки = СтруктураОшибки.code; 
				Запись.ОписаниеОшибки = СтруктураОшибки.message;
				Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОшибкаПриОтправкеНаМодерацию;
				Набор.Записать();
			КонецЕсли;
			
	КонецЦикла;

	
КонецПроцедуры

Функция ТекстОшибки(МассивОшибок)  
	
	ТекстОшибки = "";
	
		Для каждого СтруктураОшибки Из МассивОшибок Цикл
			ТекстОшибки = ТекстОшибки + " "+СтруктураОшибки.message + " Код ошибки - " + СтруктураОшибки.code+"; ";
		КонецЦикла;
		
	Возврат ТекстОшибки; 
	
КонецФункции

Функция ПолучитьСтруктуруИзмерений(ИдентификаторПубликации) Экспорт
	
	Структура = Новый Структура("Номенклатура, Характеристика, Упаковка");
	Запрос = Новый Запрос();  
	Запрос.Параметры.Вставить("ИдентификаторПубликации",ИдентификаторПубликации);
	Запрос.Текст = "ВЫБРАТЬ
	                |	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
	                |	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
	                |	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка
	                |ИЗ
	                |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	                |ГДЕ
	                |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации = &ИдентификаторПубликации";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Структура,Результат);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Процедура ОбновитьСтатусыПубликации(Рекомендации)
	
	Для каждого СтруктураПредложения Из Рекомендации.offers Цикл
		Если СтруктураПредложения.Свойство("shopSku") Тогда
			Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
			СтруктураИзмерений = ПолучитьСтруктуруИзмерений(СтруктураПредложения.shopSku);
			Набор.Отбор.Номенклатура.Установить(СтруктураИзмерений.Номенклатура);
			Набор.Отбор.Характеристика.Установить(СтруктураИзмерений.Характеристика);
			Набор.Отбор.Упаковка.Установить(СтруктураИзмерений.Упаковка);
			Набор.Прочитать();
			Если Набор.Количество() Тогда
				Запись = Набор[0];
				Если СтруктураПредложения.Свойство("marketSku") Тогда
					marketSku = СокрЛП(СтрЗаменить(СтруктураПредложения.marketSku,Символ(160),""));  
					Запись.ИдентификаторТовараПлощадки = marketSku; 
					Запись.ЕстьИдентификаторПлощадки = Истина;
				КонецЕсли;
				Если СтруктураПредложения.Свойство("marketSkuName") Тогда 
					Запись.НаименованиеТовараПлощадки = СтруктураПредложения.marketSkuName;
					Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ПолученаРекомендация;
				Иначе
					Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.РекомендацияНеНайдена;
					Запись.ОписаниеОшибки = "Для товара с указанными свойствами не была подобрана рекомендованная карточка товара на Яндекс.Маркет. 
					|Для получения рекомендации укажите в запросе как можно больше информации о товаре (категорию, бренд (марку),штрих-коды товара, ориентировочную цену товара). После заполненения данных отправьте повторно публикацию на получение рекомендации (кнопка ""Получить рекомендацию"").
					|Попробуйте найти товар в поиске по разделу «Покупки» на Маркете. 
					|Если товар найдется, SKU на Яндексе можно взять из URL его страницы. 
					|Например, если URL страницы товара — https://pokupki.market.yandex.ru/product/7715752, то его SKU на Яндексе — 7715752.
					|Если вы смогли самостоятельно подобрать SKU на Яндексе - заполните его и отправьте товар на модерацию (кнопка ""Отправить на модерацию"").
					|Если SKU не удалось подобрать - наиболее подробно опишите товар и отправьте запрос без указания SKU (кнопка ""Отправить на модерацию"") - сотрудники Маркета могут подобрать или создать карточки для ваших товаров в личном кабинете, если товар еще не продается на Маркете."; 
				КонецЕсли;
				Если СтруктураПредложения.Свойство("marketCategoryName") Тогда 
					Запись.НаименованиеКатегорииПлощадки = СтруктураПредложения.marketCategoryName;
				КонецЕсли;
				Если СтруктураПредложения.Свойство("marketModelName") Тогда 
					Запись.НаименованиеМоделиПлощадки = СтруктураПредложения.marketModelName;
				КонецЕсли;
				Набор.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьНаМодерациюСвязиТоваровЯндексМаркет() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаНаМодерациюСвязейТоваровЯндексМаркет);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
	Попытка
		ОтправитьСвязиТоваровНаМодерацию();	
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка вызова API Яндекс.Маркет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтправитьСвязиТоваровНаМодерацию() 
	
	Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();
	
	Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);
	КонецЕсли;
	
	ДанныеПриложения = ДанныеПриложения();
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPI();
	ИмяМетода = "/offer-mapping-entries/updates.json";	
	campaign_id = ДанныеАвторизации.campaign_id;
	Адрес ="/" + campaign_id + ИмяМетода;
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 200
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Ссылка КАК Номенклатура,
	|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика.Ссылка КАК Характеристика, 
	|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка, 
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК shopSku,
	|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Марка.Наименование,"""") КАК vendor,
	|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул,"""") КАК vendorCode,
	|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование,"""") КАК manufacturer,
	|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.СтранаПроисхождения.Наименование,"""") КАК manufacturerCountry,
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК marketSku,
	|	СтатусыПубликацииТоваровЯндексМаркет.НаименованиеТовараПлощадки КАК name,
	|	СтатусыПубликацииТоваровЯндексМаркет.НаименованиеКатегорииПлощадки КАК category
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	|ГДЕ
	|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.УтвержденаРекомендация)";
	
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
    СтруктураДляJSON = Неопределено;
	
	Пока РезультатЗапроса.Следующий() Цикл
 
		
		СтруктураОписанияТовара = Новый Структура("shopSku,name,category,manufacturer,manufacturerCountries,weightDimensions,urls,barcodes,vendor,vendorCode");
		ЗаполнитьЗначенияСвойств(СтруктураОписанияТовара,РезультатЗапроса);			
			
	    urls = Новый Массив;
		urls.Добавить("https://pokupki.market.yandex.ru/product/"+СокрЛП(СтрЗаменить(РезультатЗапроса.marketSku,Символ(160),"")));
		СтруктураОписанияТовара.urls = urls;
		
		barcodes = ПолучитьШрихКоды(РезультатЗапроса.Номенклатура, РезультатЗапроса.Характеристика);
		СтруктураОписанияТовара.Вставить("barcodes", barcodes);
		СтруктураОписанияТовара.barcodes = barcodes; 
		
		manufacturerCountries = Новый Массив;
		manufacturerCountries.Добавить(РезультатЗапроса.manufacturerCountry);
		СтруктураОписанияТовара.manufacturerCountries = manufacturerCountries;
		
		СтруктураВесогабаритов = ПолучитьВесогабариты(РезультатЗапроса.Упаковка);
		СтруктураОписанияТовара.weightDimensions = СтруктураВесогабаритов;
		
		СтруктураСвязи = Новый Структура("offer,mapping");
		СтруктураСвязи.mapping = Новый Структура("marketSku",РезультатЗапроса.marketSku);
		СтруктураСвязи.offer = СтруктураОписанияТовара; 
		
		offerMappingEntries = Новый Массив();
		offerMappingEntries.Добавить(СтруктураСвязи);
		
		СтруктураДляJSON = Новый Структура();
		СтруктураДляJSON.Вставить("offerMappingEntries",offerMappingEntries);		
		
		ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON(СтруктураДляJSON);
		
		Попытка	
			ИнтернетПрокси = Неопределено;
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
				МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
				ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
			КонецЕсли;
			СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
			HTTPСоединение = Новый HTTPСоединение(Сервер,,,,ИнтернетПрокси,200,СоединениеOpenSSL);		
		Исключение
			ТекстОписанияСобытия = НСтр("ru = 'Отсутствует соединение с сервером '");
			ТекстОшибки = НСтр("ru = 'Отсутствует соединение с сервером " + Сервер +";'");		
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		HTTPЗапрос = Новый HTTPЗапрос(Адрес,Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		СтруктураОтвета = Новый Структура();
		
		Попытка
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
			СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
			КодСостояния = HTTPОтвет.КодСостояния;
			
		Исключение 
		    ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
			ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса: '" + КодСостояния + "; "+ HTTPОтвет.ПолучитьТелоКакСтроку()+";'");
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);	
		КонецПопытки;	
		
		Если КодСостояния= 200 И СтруктураОтвета.status = "OK" Тогда
			offerMappingEntries = СтруктураДляJSON.offerMappingEntries;
			shopSku = offerMappingEntries[0].offer.shopSku;
			ЗаписатьСтатусНаМодерации(shopSku);
		Иначе	
			Если СтруктураОтвета.Свойство("status") И СтруктураОтвета.status = "ERROR" Тогда
				ОбработатьОшибкиПриОтправкеСтатусов(СтруктураДляJSON.offerMappingEntries[0].offer.shopSku,СтруктураОтвета.errors);
			Иначе
				ОбработатьОшибкиПриОтправкеСтатусов(СтруктураДляJSON.offerMappingEntries[0].offer.shopSku);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьШрихКоды(Номенклатура, Характеристика)
	
	Запрос = Новый Запрос ();
	Запрос.Параметры.Вставить("Номенклатура",Номенклатура);
	Запрос.Параметры.Вставить("Характеристика",Характеристика);
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК barcode,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ШтрихКоды = новый Массив;
	
	Если Результат.Количество()>0 Тогда
		ШтрихКоды = Результат.ВыгрузитьКолонку("barcode");
	КонецЕсли;	
	
	Возврат ШтрихКоды;
КонецФункции
 
Функция ПолучитьВесогабариты(Упаковка) Экспорт
	
	СтруктураВесогабаритов = Новый Структура("length,width,height,weight");
	
	СтруктураВесогабаритов.length = 0; 
	СтруктураВесогабаритов.width = 0; 
	СтруктураВесогабаритов.height = 0; 
	СтруктураВесогабаритов.weight = 0;
		
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("УпаковкаЕдиницаИзмерения",Упаковка);  
	Запрос.Текст = "ВЫБРАТЬ
	               |	УпаковкиЕдиницыИзмерения.Вес КАК Вес,
	               |	УпаковкиЕдиницыИзмерения.Высота КАК Высота,
	               |	УпаковкиЕдиницыИзмерения.Глубина КАК Глубина,
	               |	УпаковкиЕдиницыИзмерения.Ширина КАК Ширина,
	               |	УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения КАК ВесЕдиницаИзмерения,
	               |	УпаковкиЕдиницыИзмерения.ГлубинаЕдиницаИзмерения КАК ГлубинаЕдиницаИзмерения,
	               |	УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения КАК ШиринаЕдиницаИзмерения,
	               |	УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения КАК ВысотаЕдиницаИзмерения
	               |ИЗ
	               |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	               |ГДЕ
	               |	УпаковкиЕдиницыИзмерения.Ссылка = &УпаковкаЕдиницаИзмерения
	               |	И УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл   
		СокращенияЕдИзмГлубина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ГлубинаЕдиницаИзмерения,"МеждународноеСокращение");
		Если СокращенияЕдИзмГлубина = "MTR" Тогда //м 
			Глубина = Формат(Результат.Глубина*100,"ЧДЦ=2; ЧРД=.");  
		ИначеЕсли СокращенияЕдИзмГлубина = "KMT" Тогда //км 
			Глубина = Формат(Результат.Глубина*100000,"ЧДЦ=2; ЧРД=.");
		ИначеЕсли СокращенияЕдИзмГлубина = "CMT" Тогда //см
			Глубина = Формат(Результат.Глубина,"ЧДЦ=2; ЧРД=.");  
		Иначе
			Глубина = ""; 
		КонецЕсли;
		
		СокращенияЕдИзмШирина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ШиринаЕдиницаИзмерения,"МеждународноеСокращение");
		Если СокращенияЕдИзмШирина = "MTR" Тогда //м 
			Ширина = Формат(Результат.Ширина*100,"ЧДЦ=2; ЧРД=.");  
		ИначеЕсли СокращенияЕдИзмШирина = "KMT" Тогда //км 
			Ширина = Формат(Результат.Ширина*100000,"ЧДЦ=2; ЧРД=.");
		ИначеЕсли СокращенияЕдИзмШирина = "CMT" Тогда //см
			Ширина = Формат(Результат.Ширина,"ЧДЦ=2; ЧРД=."); 
		Иначе
			Ширина = "";
		КонецЕсли;   
		
		СокращенияЕдИзмВысота = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ВысотаЕдиницаИзмерения,"МеждународноеСокращение");
		Если СокращенияЕдИзмВысота = "MTR" Тогда //м 
			Высота = Формат(Результат.Высота*100,"ЧДЦ=2; ЧРД=.");  
		ИначеЕсли СокращенияЕдИзмВысота = "KMT" Тогда //км 
			Высота = Формат(Результат.Высота*100000,"ЧДЦ=2; ЧРД=.");
		ИначеЕсли СокращенияЕдИзмВысота = "CMT" Тогда //см
			Высота = Формат(Результат.Высота,"ЧДЦ=2; ЧРД=.");
		Иначе
			Высота = "";						
		КонецЕсли;
		
		СокращенияЕдИзмВес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ВесЕдиницаИзмерения,"МеждународноеСокращение");
		Если СокращенияЕдИзмВес = "GRM" Тогда //г 
			Вес = Формат(Результат.Вес/1000,"ЧДЦ=2; ЧРД=.");  
		ИначеЕсли СокращенияЕдИзмВес = "CTM" Тогда //кар 
			Вес = Формат(Результат.Вес/5000,"ЧДЦ=2; ЧРД=.");
		ИначеЕсли СокращенияЕдИзмВес = "KGM" Тогда //кг
			Вес = Формат(Результат.Вес,"ЧДЦ=2; ЧРД=.");   
		ИначеЕсли СокращенияЕдИзмВес = "TNE" Тогда //т
			Вес = Формат(Результат.Вес*1000,"ЧДЦ=2; ЧРД=.");
		Иначе 
			Вес = "";	
		КонецЕсли;

		СтруктураВесогабаритов.length = Глубина; 
		СтруктураВесогабаритов.width = Ширина; 
		СтруктураВесогабаритов.height = Высота; 
		СтруктураВесогабаритов.weight = Вес;
		
	КонецЦикла;   
	
	Возврат СтруктураВесогабаритов;
	
КонецФункции

Процедура ЗаписатьСтатусНаМодерации(shopSku)
	
	Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
	СтруктураИзмерений = ПолучитьСтруктуруИзмерений(shopSku);
	Набор.Отбор.Номенклатура.Установить(СтруктураИзмерений.Номенклатура);
	Набор.Отбор.Характеристика.Установить(СтруктураИзмерений.Характеристика);
	Набор.Отбор.Упаковка.Установить(СтруктураИзмерений.Упаковка);
	Набор.Прочитать();
	Если Набор.Количество() Тогда
		Запись = Набор[0];
		Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСтатусПубликации(shopSku)
	
	Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();
	
	Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);
	КонецЕсли;
	
	ДанныеПриложения = ДанныеПриложения();	
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPI();
	ИмяМетода = "/offer-mapping-entries.json";	
	campaign_id = ДанныеАвторизации.campaign_id;
	Адрес ="/" + campaign_id + ИмяМетода +"?";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
	
	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить("shop_sku=" + shopSku);
	
	Попытка	
		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,,ИнтернетПрокси,200,СоединениеOpenSSL);
	Исключение
		ТекстОписанияСобытия = НСтр("ru = 'Отсутствует соединение с сервером '");
		ТекстОшибки = НСтр("ru = 'Отсутствует соединение с сервером " + Сервер +";'");		
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
	КонецПопытки;
	
	ТелоЗапроса = СтрСоединить(ПараметрыURL, "&");
	Адрес = Адрес+ТелоЗапроса;
	
	HTTPЗапрос = Новый HTTPЗапрос(Адрес, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
	СтруктураОтвета = Новый Структура();
		
	Попытка
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);  
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
		КодСостояния = HTTPОтвет.КодСостояния;	
	Исключение 
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса: '"+КодСостояния+"; "+ HTTPОтвет.ПолучитьТелоКакСтроку()+";'");
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);	
	КонецПопытки;	
	
	Если КодСостояния= 200 И СтруктураОтвета.status = "OK" Тогда
		ОбновитьСтатусыНаМодерации(СтруктураОтвета.result,shopSku);
	Иначе
		Если СтруктураОтвета.Свойство("status") И СтруктураОтвета.status = "ERROR" Тогда
			ОписаниеОшибок = ТекстОшибки(СтруктураОтвета.errors);	
		Иначе
			ОписаниеОшибок = ""; 
		КонецЕсли; 	
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");
		ТекстОшибки = НСтр("ru = 'Ошибка вызова API Яндекс.Маркет: " + КодСостояния + "; "+ HTTPОтвет.ПолучитьТелоКакСтроку() + "; " + ОписаниеОшибок + ";'");
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСатусМодерацииСОписанием(status, ТекущийСтатус ,notes = Неопределено)
	
	Структура = Новый Структура("Статус,ОписаниеОшибки");
	
	Если status = "IN_WORK" Тогда
		Если  ТекущийСтатус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации Тогда			
			
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
		
		ИначеЕсли  ТекущийСтатус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОжидаетМодерации Тогда
			
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
			
		КонецЕсли;
		
	ИначеЕсли status = "READY" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена; 
		
	ИначеЕсли status = "NEED_CONTENT" Тогда
		
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
			
			Структура.ОписаниеОшибки = "Для товара не указан SKU на Яндексе, и сотрудники Маркета не смогли привязать его к карточке. Найдите карточку товара самостоятельно в поиске по разделу «Покупки» или создайте ее, если товар еще не продается на Маркете.";
		
	ИначеЕсли status = "NEED_INFO" Тогда
			
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
			СтрокаКомментария = "Вы указали для товара неверную или недостаточную информацию. Уточните входные данные запроса и отправьте связь на модерацию повторно.";
			Если notes <> "Неопределено" и ТипЗнч(notes) = Тип("Строка") Тогда 
				СтрокаКомментария  = СтрокаКомментария + notes; 
			КонецЕсли;	
			
			Структура.ОписаниеОшибки = СтрокаКомментария;
		
	ИначеЕсли status = "SUSPENDED" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОжидаетМодерации;
		Структура.ОписаниеОшибки = "Маркет пока не размещает товары данной категории, но начнет в ближайшее время. После этого товар автоматически отправится на модерацию, и статус изменится на IN_WORK. Чтобы уточнить сроки появления категорий товаров на Маркете, обратитесь в службу поддержки."
		
	ИначеЕсли status = "REJECTED" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = "В ближайшее время Маркет не планирует размещать товары данной категории. Если у вас есть вопросы по категориям товаров, размещаемым на Маркете, обратитесь в службу поддержки.";
		
	ИначеЕсли status = "OTHER" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена; 
		Структура.ОписаниеОшибки = "Товар не прошел модерацию по неуточненной причине. Обратитесь в службу поддержки или к вашему менеджеру.";
		
	КонецЕсли;
	
	Возврат Структура;
КонецФункции

Процедура ОбновитьСтатусыНаМодерации(result,shopSku)
	
	offerMappingEntries = result.offerMappingEntries;
	offer = offerMappingEntries[0].offer;
	processingState = offer.processingState;
	Если shopSku = offer.shopSku Тогда
		Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		СтруктураИзмерений = ПолучитьСтруктуруИзмерений(shopSku);
		Набор.Отбор.Номенклатура.Установить(СтруктураИзмерений.Номенклатура);
		Набор.Отбор.Характеристика.Установить(СтруктураИзмерений.Характеристика);
		Набор.Отбор.Упаковка.Установить(СтруктураИзмерений.Упаковка);
		Набор.Прочитать();
		Если Набор.Количество() Тогда
			Запись = Набор[0];
			Если processingState.Свойство("notes") Тогда 
				СтатусСОписанием = ПолучитьСатусМодерацииСОписанием(processingState.status, Запись.Статус, processingState.notes);
			Иначе
				СтатусСОписанием = ПолучитьСатусМодерацииСОписанием(processingState.status, Запись.Статус);
			КонецЕсли;
			Если offerMappingEntries[0].Свойство("mapping") Тогда
				marketSku = СокрЛП(СтрЗаменить(offerMappingEntries[0].mapping.marketSku,Символ(160),"")); 
				Запись.ИдентификаторТовараПлощадки = marketSku;
			КонецЕсли;
			Запись.Статус = СтатусСОписанием.Статус;
			Запись.ОписаниеОшибки = СтатусСОписанием.ОписаниеОшибки;
			Набор.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ПолучитьСтатусыМодерации()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	                |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК ИдентификаторПубликации
	                |ИЗ
	                |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
					|ГДЕ 
					|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации)";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		ПолучитьСтатусПубликации(Результат.ИдентификаторПубликации);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСтатусыМодерацииТоваровЯндексМаркет() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеСтатусовМодерацииТоваровЯндексМаркет);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	//ПараметрыЖурнала.Метаданные    = Сегмент.Метаданные();
	//ПараметрыЖурнала.Данные        = Сегмент;
	
	//ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Попытка
		ПолучитьСтатусыМодерации();
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка вызова API Яндекс.Маркет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
	//ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

Функция ПолучитьРазницуОстатковТовараДляВыгрузки(МенеджерВТ) 
	
	ЭтоПроизводительныйРежим = РаспределениеЗапасов.ЭтоПроизводительныйРежим();  
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ЭтоПроизводительныйРежим",ЭтоПроизводительныйРежим); 
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 2000
       |	Запасы.Номенклатура КАК Номенклатура,
       |	Запасы.Характеристика КАК Характеристика,
       |	Запасы.Склад КАК Склад,
       |	Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток - Запасы.РезервироватьПоМереПоступленияОстаток КАК Остаток,
	   |	ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество,0) КАК ОстатокВыгруженный
       |ИЗ
       |	РегистрНакопления.ЗапасыИПотребности.Остатки(
       |			,
       |			(Номенклатура, Характеристика, Склад, Назначение) В
       |				(ВЫБРАТЬ
       |					Фильтр.Номенклатура КАК Номенклатура,
       |					Фильтр.Характеристика КАК Характеристика,
       |					Фильтр.Склад КАК Склад,
       |					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение
       |				ИЗ
       |					ВтТовары КАК Фильтр)) КАК Запасы
	   |					ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ОстаткиТоваровМаркетплейсов КАК ОстаткиТоваровМаркетплейсов
	   |					ПО Запасы.Номенклатура = ОстаткиТоваровМаркетплейсов.Номенклатура
       |						И Запасы.Характеристика = ОстаткиТоваровМаркетплейсов.Характеристика
       |						И Запасы.Склад = ОстаткиТоваровМаркетплейсов.Склад  
       |
       |ГДЕ
       |	&ЭтоПроизводительныйРежим 
	   |	И ((Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток - Запасы.РезервироватьПоМереПоступленияОстаток)<>
	   |	ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество,0))		
       |
       |ОБЪЕДИНИТЬ ВСЕ
       |
 	   |ВЫБРАТЬ
	   |	Товары.Номенклатура,
	   |	Товары.Характеристика,
	   |	Товары.Склад,
	   |	СУММА(ЕСТЬNULL(ОстаткиНаСкладе.Свободно,0)),
	   |    СУММА(ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество,0))
	   |ИЗ
	   |	ВтТовары КАК Товары
	   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК ОстаткиНаСкладе
	   |		ПО Товары.Номенклатура = ОстаткиНаСкладе.Номенклатура
	   |			И Товары.Характеристика = ОстаткиНаСкладе.Характеристика
	   |			И Товары.Склад = ОстаткиНаСкладе.Склад
	   |			И ОстаткиНаСкладе.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	   |			И ОстаткиНаСкладе.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	   |				ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ОстаткиТоваровМаркетплейсов КАК ОстаткиТоваровМаркетплейсов
	   |				ПО  Товары.Номенклатура = ОстаткиТоваровМаркетплейсов.Номенклатура
	   |					И Товары.Характеристика = ОстаткиТоваровМаркетплейсов.Характеристика
	   |					И Товары.Склад = ОстаткиТоваровМаркетплейсов.Склад
	   |					
	   |ГДЕ
	   |	НЕ &ЭтоПроизводительныйРежим
	   |
	   |СГРУППИРОВАТЬ ПО
	   |	Товары.Номенклатура,
	   |	Товары.Характеристика,
	   |	Товары.Склад
	   |ИМЕЮЩИЕ СУММА(ЕСТЬNULL(ОстаткиНаСкладе.Свободно,0))<>СУММА(ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество,0))
	   |;
	   |////////////////////////////////////////////////////////////////////////////////
	   |УНИЧТОЖИТЬ ВтТовары";  
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат; 
	
КонецФункции

#КонецОбласти

Функция ВJSON(Структура)Экспорт

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();	
	ЗаписьJSON.ПроверятьСтруктуру = Истина;
	ЗаписатьJSON(ЗаписьJSON, Структура);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция ИзJSON(Строка,СтрДат="",ФлСоответствие=Ложь)Экспорт

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	ЗапросСтруктура = ПрочитатьJSON(ЧтениеJSON,ФлСоответствие,СтрДат);
	
	Возврат ЗапросСтруктура;

КонецФункции


