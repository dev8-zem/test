#Область ПрограммныйИнтерфейс

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ЗаполнитьРеквизитыИзПотребителя.
//
Процедура ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, СсылкаНаПотребитель) Экспорт
	
	Если СсылкаНаПотребитель.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если ТипЗнч(ОбъектXDTO) = Тип("Строка") Или ОбъектXDTO = Неопределено Тогда
		ЗаполнитьПеречислениеXDTOИзПотребителя(ОбъектXDTO, СсылкаНаПотребитель, Настройки);
		
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		ЗаполнитьСсылочныйОбъектXDTOИзПотребителя(Прокси, ОбъектXDTO, СсылкаНаПотребитель, Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает правило интеграции с 1С:Документооборотом.
//
// Параметры:
//   ТипОбъектаИС - Строка - тип объекта ИС.
//   ТипОбъектаДО - Строка - тип объекта Документооборота.
//   ВидДокумента - ОбъектXDTO - вид документа Документооборота.
//   Папка - ОбъектXDTO - папка документа Документооборота.
//
// Возвращаемое значение:
//   Структура:
//     * Ссылка - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - правило.
//     * ТипОбъектаИС - Строка - тип объекта ИС.
//     * ТипОбъектаДО - Строка - тип объекта ДО.
//     * ПредставлениеОбъектаИС - Строка - представление объекта ИС.
//     * ПредставлениеОбъектаДО - Строка - представление объекта ДО.
//     * ИдентификаторВидаДокумента - Строка - идентификатор вида документа ДО.
//     * ТипВидаДокумента - Строка - тип вида документа ДО.
//
Функция СоздатьПравилоИнтеграции(ТипОбъектаИС, ТипОбъектаДО, ВидДокумента, Папка) Экспорт
	
	Правило = Справочники.ПравилаИнтеграцииС1СДокументооборотом.СоздатьЭлемент();
	Правило.Заполнить(Неопределено);
	Правило.ТипОбъектаИС = ТипОбъектаИС;
	Правило.ТипОбъектаДО = ТипОбъектаДО;
	Правило.Комментарий = НСтр("ru = 'Создано автоматически'");
	
	ПравилаИнтеграцииМенеджер = Справочники.ПравилаИнтеграцииС1СДокументооборотом;
	
	// Вид документа.
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение,
		"documentType",
		ВидДокумента,
		Ложь,
		Истина);
	
	// Папка.
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение,
		"folder",
		Папка,
		Ложь);
	
	ЗаполнитьОбщиеРеквизиты(ПравилаИнтеграцииМенеджер, ТипОбъектаИС, Правило);
	ЗаполнитьЧастныеРеквизиты(ПравилаИнтеграцииМенеджер, ТипОбъектаИС, Правило);
	
	Правило.Записать();
	
	ИдентификаторВидаДокумента = ВидДокумента.objectID.id; // Строка
	ТипВидаДокумента = ВидДокумента.objectID.type; // Строка
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", Правило.Ссылка);
	Результат.Вставить("ТипОбъектаИС", ТипОбъектаИС);
	Результат.Вставить("ТипОбъектаДО", ТипОбъектаДО);
	Результат.Вставить("ПредставлениеОбъектаИС", ТипОбъектаИС);
	Результат.Вставить("ПредставлениеОбъектаДО", ТипОбъектаДО);
	Результат.Вставить("ИдентификаторВидаДокумента", ИдентификаторВидаДокумента);
	Результат.Вставить("ТипВидаДокумента", ТипВидаДокумента);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита, описывающего состояние согласования объекта УП, соответствующее
// переданному значению состояния согласования в 1С:Документооборот.
//
// Параметры:
//   ТипРеквизита - Булево
//                - ПеречислениеСсылка - тип реквизита объекта УП.
//   ИмяРеквизита - Строка - имя реквизита объекта УП.
//   ТипОбъекта - СправочникОбъект
//              - ДокументОбъект - тип объекта УП.
//   СостояниеДО - ПеречислениеСсылка.СостоянияСогласованияВДокументообороте - состояния согласования в ДО.
//
// Возвращаемое значение:
//   Булево
//   ПеречислениеСсылка
//
Функция СостояниеСогласованияУП(ТипРеквизита, ИмяРеквизита, ТипОбъекта, СостояниеДО) Экспорт
	
	Результат = Неопределено;
	
	// Установка реквизита "Согласован" согласно состоянию согласования ДО.
	Если ТипРеквизита = Тип("Булево") И ИмяРеквизита = "Согласован"
			И (ТипОбъекта = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту")
				Или ТипОбъекта = Тип("ДокументОбъект.ЗаказКлиента")
				Или ТипОбъекта = Тип("ДокументОбъект.ЗаказПоставщику")
				Или ТипОбъекта = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента")
				Или ТипОбъекта = Тип("ДокументОбъект.УстановкаЦенНоменклатуры")
				Или ТипОбъекта = Тип("СправочникОбъект.ДоговорыКонтрагентов")
				Или ТипОбъекта = Тип("СправочникОбъект.СоглашенияСКлиентами")
				Или ТипОбъекта = Тип("СправочникОбъект.СоглашенияСПоставщиками")) Тогда
		Если СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
			Результат = Истина;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
			Результат = Ложь;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
			Результат = Ложь;
		КонецЕсли;
		
	// Выбор значений перечислений-статусов согласования согласно состоянию согласования ДО.
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыКоммерческихПредложенийКлиентам") Тогда
		Если СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
			Результат = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
			Результат = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
			Результат = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыДоговоровКонтрагентов") Тогда
		Если СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
			Результат = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
			Результат = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
			Результат = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыСоглашенийСКлиентами") Тогда
		Если СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
			Результат = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
			Результат = Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
			Результат = Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыСоглашенийСПоставщиками") Тогда
		Если СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
			Результат = Перечисления.СтатусыСоглашенийСПоставщиками.Действует;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
			Результат = Перечисления.СтатусыСоглашенийСПоставщиками.НеСогласовано;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
			Результат = Перечисления.СтатусыСоглашенийСПоставщиками.НеСогласовано;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыЗаказовКлиентов") Тогда
		Если СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
			Результат = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
			Результат = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
			Результат = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыЗаказовПоставщикам") Тогда
		Если СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
			Результат = Перечисления.СтатусыЗаказовПоставщикам.Согласован;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
			Результат = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
			Результат = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыАктаОРасхождениях") Тогда
		Если СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
			Результат = Перечисления.СтатусыАктаОРасхождениях.Согласовано;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
			Результат = Перечисления.СтатусыАктаОРасхождениях.НеСогласовано;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
			Результат = Перечисления.СтатусыАктаОРасхождениях.НеСогласовано;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыЗаявокНаВозвратТоваровОтКлиентов") Тогда
		Если СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
			Результат = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
			Результат = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
			Результат = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыЗаявокНаРасходованиеДенежныхСредств") Тогда
		Если СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
			Результат = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
			Результат = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
			Результат = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыРаспоряженийНаПеремещениеДенежныхСредств") Тогда
		Если СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
			Результат = Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.Согласовано;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
			Результат = Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.Отклонено;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
			Результат = Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.НеСогласовано;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыУстановокЦенНоменклатуры") Тогда
		Если СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
			Результат = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
			Результат = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован;
		ИначеЕсли СостояниеДО = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
			Результат = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация


//-- Локализация

Процедура ЗаполнитьОбщиеРеквизиты(ПравилаИнтеграцииМенеджер, ТипОбъектаИС, Правило)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ГрифДоступа = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMAccessLevel");
	ГрифДоступа.externalObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьExternalObject(Прокси);
	ГрифДоступа.objectId = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси);
	ГрифДоступа.name = НСтр("ru = 'Общий'");
	
	ВопросДеятельности = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMActivityMatter");
	ВопросДеятельности.externalObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьExternalObject(Прокси);
	ВопросДеятельности.objectId = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси);
	ВопросДеятельности.name = НСтр("ru = 'Основная деятельность'");
	
	Документ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMInternalDocument");
	Документ.objectId = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		"",
		"DMInternalDocument");
	Документ.name = НСтр("ru = 'Временный'");
	Документ.accessLevel = ГрифДоступа;
	Документ.activityMatter = ВопросДеятельности;
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMCreateRequest");
	Запрос.object = Документ;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	
	РазрешеноБезПерепроведения = Неопределено;
	РазрешеноСПерепроведением = Неопределено;
	ЧастиТипа = СтрРазделить(ТипОбъектаИС, ".", Ложь);
	Если НРег(ЧастиТипа[0]) = "документ" Тогда
		РазрешеноБезПерепроведения =
			Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноБезПерепроведения;
		РазрешеноСПерепроведением =
			Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением;
	КонецЕсли;
	
	Правило.НеСоздаватьСвязиПоСсылкам = Истина;
	
	//////////////////////////////////////////////////////
	// Правила выгрузки (Передача в 1С:Документооборот)
	
	// заголовок
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"title",
		"Представление");
	
	// гриф доступа
	
	// Получим гриф доступа
	ГрифДоступа = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.НайтиОбъектВДОПоИмени(
		"DMAccessLevel",
		НСтр("ru = 'Общий'"));
	// Установим правило
	Если ГрифДоступа <> Неопределено Тогда
		ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
			Правило,
			Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение,
			"accessLevel",
			ГрифДоступа,
			Ложь);
	КонецЕсли;
	
	// вопрос деятельности
	
	// Получим вопрос деятельности
	ВопросДеятельности = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.НайтиОбъектВДОПоИмени(
		"DMActivityMatter",
		НСтр("ru = 'Основная деятельность'"));
	// Установим правило
	Если ВопросДеятельности <> Неопределено Тогда
		ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
			Правило,
			Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение,
			"activityMatter",
			ВопросДеятельности,
			Ложь);
	КонецЕсли;
	
	//////////////////////////////////////////////////////
	// Правила загрузки (Получение из 1С:Документооборота)
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"Статус",
		"statusApproval",,,
		РазрешеноСПерепроведением);
	
	//////////////////////////////////////////////////////
	// Парные правила
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Организация",
		"organization",,,
		РазрешеноСПерепроведением);
	Если (ТипОбъектаИС <> "Документ.ЗаявкаНаРасходованиеДенежныхСредств")
			Или (Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("2.1.28.12.CORP")) Тогда
		ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
			Правило,
			"Контрагент",
			"correspondent",,,
			РазрешеноСПерепроведением);
	КонецЕсли;
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Комментарий",
		"comment",,,
		РазрешеноБезПерепроведения);
	
КонецПроцедуры

Процедура ЗаполнитьПеречислениеXDTOИзПотребителя(ОбъектXDTO, СсылкаНаПотребитель, Настройки)
	
	Если Настройки.ИспользоватьИнтеграциюДО3 = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаПотребитель) = Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") Тогда
		
		Если СсылкаНаПотребитель = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ОбъектXDTO = "LglPerson";
			
		ИначеЕсли СсылкаНаПотребитель = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ОбъектXDTO = "Individ";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СсылкаНаПотребитель) = Тип("ПеречислениеСсылка.ЮрФизЛицо") Тогда
		
		Если СсылкаНаПотребитель = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			ОбъектXDTO = "LglPerson";
			
		ИначеЕсли СсылкаНаПотребитель = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			ОбъектXDTO = "Individ";
			
		ИначеЕсли СсылкаНаПотребитель = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
			ОбъектXDTO = "LglPersonNonResident";
			
		ИначеЕсли СсылкаНаПотребитель = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			ОбъектXDTO = "IndividualEntrepreneur";
			
		КонецЕсли;

	ИначеЕсли ТипЗнч(СсылкаНаПотребитель) = Тип("ПеречислениеСсылка.КомпанияЧастноеЛицо") Тогда
		
		Если СсылкаНаПотребитель = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			ОбъектXDTO = "LglPerson";
			
		ИначеЕсли СсылкаНаПотребитель = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
			ОбъектXDTO = "Individ";
			
		КонецЕсли;
		
	//++ Локализация
	ИначеЕсли ТипЗнч(СсылкаНаПотребитель) = Тип("ПеречислениеСсылка.СтавкиНДС") Тогда
		
		Если СсылкаНаПотребитель = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбъектXDTO = "WithoutVAT";
			
		ИначеЕсли СсылкаНаПотребитель = Перечисления.СтавкиНДС.НДС0 Тогда
			ОбъектXDTO = "VAT0";
			
		ИначеЕсли СсылкаНаПотребитель = Перечисления.СтавкиНДС.НДС10
				Или СсылкаНаПотребитель = Перечисления.СтавкиНДС.НДС10_110 Тогда
			ОбъектXDTO = "VAT10";
			
		ИначеЕсли СсылкаНаПотребитель = Перечисления.СтавкиНДС.НДС18
				Или СсылкаНаПотребитель = Перечисления.СтавкиНДС.НДС18_118 Тогда
			ОбъектXDTO = "VAT18";
			
		ИначеЕсли СсылкаНаПотребитель = Перечисления.СтавкиНДС.НДС20
				Или СсылкаНаПотребитель = Перечисления.СтавкиНДС.НДС20_120 Тогда
			ОбъектXDTO = "VAT20";
			
		КонецЕсли;
	//-- Локализация
		
	ИначеЕсли ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.СтавкиНДС") Тогда
		
		Если СсылкаНаПотребитель = Справочники.СтавкиНДС.БезНДС Тогда
			ОбъектXDTO = "WithoutVAT";
			
		Иначе
			Ставка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаПотребитель, "Ставка");
			Если Ставка = 0 Тогда
				ОбъектXDTO = "VAT0";
				
			ИначеЕсли Ставка = 10 Тогда
				ОбъектXDTO = "VAT10";
				
			ИначеЕсли Ставка = 18 Тогда
				ОбъектXDTO = "VAT18";
				
			ИначеЕсли Ставка = 20 Тогда
				ОбъектXDTO = "VAT20";
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСсылочныйОбъектXDTOИзПотребителя(Прокси, ОбъектXDTO, СсылкаНаПотребитель, Настройки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СсылкаНаПотребитель) = Тип("ПеречислениеСсылка.ЮрФизЛицо") Тогда
		
		Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
			ЮрФизЛицоID = "";
			Если СсылкаНаПотребитель = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				ЮрФизЛицоID = "ФизЛицо"; //@NON-NLS-1
			ИначеЕсли СсылкаНаПотребитель = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				ЮрФизЛицоID = "ЮрЛицо"; //@NON-NLS-1
			ИначеЕсли СсылкаНаПотребитель = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
				ЮрФизЛицоID = "ЮрЛицоНеРезидент"; //@NON-NLS-1
			ИначеЕсли СсылкаНаПотребитель = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
				ЮрФизЛицоID = "ИндивидуальныйПредприниматель"; //@NON-NLS-1
			КонецЕсли;
			ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMLegalPrivatePerson");
			ОбъектXDTO.name = Строка(СсылкаНаПотребитель);
			ОбъектXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				ЮрФизЛицоID,
				"DMLegalPrivatePerson");
		ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
			ЗаполнитьПеречислениеXDTOИзПотребителя(ОбъектXDTO, СсылкаНаПотребитель, Настройки);
		КонецЕсли;
		
	ИначеЕсли (ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMCorrespondent")
				И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Контрагенты"))
			Или (ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMOrganization")
				И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Организации")) Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель,
			"ИНН, КПП, ЮрФизЛицо, КодПоОКПО, НаименованиеПолное");
		
		Если ЗначениеЗаполнено(Реквизиты.ИНН) Тогда
			ОбъектXDTO.inn = Реквизиты.ИНН;
		КонецЕсли;
		Если ЗначениеЗаполнено(Реквизиты.КПП) Тогда
			ОбъектXDTO.kpp = Реквизиты.КПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(Реквизиты.КодПоОКПО) Тогда
			ОбъектXDTO.okpo = Реквизиты.КодПоОКПО;
		КонецЕсли;
		Если ЗначениеЗаполнено(Реквизиты.НаименованиеПолное) Тогда
			ОбъектXDTO.fullName = Реквизиты.НаименованиеПолное;
		КонецЕсли;
		
		ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO.legalPrivatePerson, Реквизиты.ЮрФизЛицо);
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMContactPerson")
			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КонтактныеЛицаПартнеров.ДолжностьПоВизитке КАК Должность,
			|	КонтактныеЛицаПартнеров.Комментарий КАК Комментарий,
			|	КонтактныеЛицаПартнеров.Владелец КАК Партнер
			|ПОМЕСТИТЬ ДанныеКонтактногоЛица
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|ГДЕ
			|	КонтактныеЛицаПартнеров.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК Контрагент,
			|	ДанныеКонтактногоЛица.Должность КАК Должность,
			|	ДанныеКонтактногоЛица.Комментарий КАК Комментарий
			|ИЗ
			|	ДанныеКонтактногоЛица КАК ДанныеКонтактногоЛица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО ДанныеКонтактногоЛица.Партнер = Контрагенты.Партнер
			|ГДЕ
			|	НЕ Контрагенты.ПометкаУдаления");
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаПотребитель);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			
			ОбъектXDTO.position = Выборка.Должность;
			ОбъектXDTO.comment = Выборка.Комментарий;
			ОбъектXDTO.correspondent = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMCorrespondent",
				Выборка.Контрагент);
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMPrivatePerson")
			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		СпосокРеквизитов = Новый Массив;
		СпосокРеквизитов.Добавить("ДатаРождения");
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, СтрСоединить(СпосокРеквизитов, ","));
		
		ОбъектXDTO.birthDay = Реквизиты.ДатаРождения;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMBankAccount")
			И (ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов")
				Или ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций")) Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "Владелец, Банк, НомерСчета");
		
		ОбъектXDTO.number = Реквизиты.НомерСчета;
		
		Если ЗначениеЗаполнено(Реквизиты.Владелец) Тогда
			Если ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
				ИмяТипаXDTO = "DMCorrespondent";
			ИначеЕсли ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ИмяТипаXDTO = "DMPrivatePerson";
			ИначеЕсли ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка.Организации") Тогда
				ИмяТипаXDTO = "DMOrganization";
			КонецЕсли;
			ОбъектXDTO.owner = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				ИмяТипаXDTO,
				Реквизиты.Владелец);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты.Банк) Тогда
			ОбъектXDTO.bank = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMBank",
				Реквизиты.Банк);
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMSubdivision") Тогда
		
		Руководитель = Неопределено;
		
		//++ Локализация
		
		
		//-- Локализация
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			Руководитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаПотребитель, "ТекущийРуководитель");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Руководитель) Тогда
			
			Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
				ИмяТипаXDTO = "DMUser";
			ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
				ИмяТипаXDTO = "DMEmployee";
			КонецЕсли;
			
			ОбъектXDTO.head = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				ИмяТипаXDTO,
				Руководитель,
				Ложь);
			
			ОбъектXDTO.head.subdivision = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMSubdivision",
				СсылкаНаПотребитель,
				Ложь);
			
			Если ТипЗнч(Руководитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ОбъектXDTO.head.privatePerson = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMPrivatePerson",
					Руководитель,
					Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMUser") Тогда
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Пользователи") Тогда
			Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаПотребитель, "Подразделение");
			Если ЗначениеЗаполнено(Подразделение) Тогда
				ОбъектXDTO.subdivision = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMSubdivision",
					Подразделение);
			КонецЕсли;
		КонецЕсли;
		
		//++ Локализация
		
		
		//-- Локализация
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Пользователи.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо
				|	И НЕ Пользователи.ПометкаУдаления");
			Запрос.УстановитьПараметр("ФизическоеЛицо", СсылкаНаПотребитель);
			
			ВыборкаПользователи = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаПользователи.Количество() = 1 Тогда
				ВыборкаПользователи.Следующий();
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитыИзПотребителя(
					Прокси,
					ОбъектXDTO,
					ВыборкаПользователи.Ссылка);
				
			Иначе
				ОбъектXDTO.privatePerson = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMPrivatePerson",
					СсылкаНаПотребитель);
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMEmployee") Тогда
		
		//++ Локализация
		
		
		//-- Локализация
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Пользователи") Тогда
			ЗапросПользователь = Новый Запрос(
				"ВЫБРАТЬ
				|	Пользователи.ФизическоеЛицо.Наименование КАК ФизическоеЛицоНаименование,
				|	Пользователи.Подразделение КАК Подразделение
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.Ссылка = &Пользователь");
			ЗапросПользователь.УстановитьПараметр("Пользователь", СсылкаНаПотребитель);
			
			ВыборкаПользователь = ЗапросПользователь.Выполнить().Выбрать();
			Если ВыборкаПользователь.Следующий() Тогда
				
				Если ЗначениеЗаполнено(ВыборкаПользователь.ФизическоеЛицоНаименование) Тогда
					ОбъектXDTO.name = ВыборкаПользователь.ФизическоеЛицоНаименование;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПользователь.Подразделение) Тогда
					ОбъектXDTO.subdivision = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
						Прокси,
						"DMSubdivision",
						ВыборкаПользователь.Подразделение);
				КонецЕсли;
				
			КонецЕсли;
			
			//++ Локализация
			
			
			//-- Локализация
			
		КонецЕсли;
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ЗапросПользователь = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Пользователи.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо
				|	И НЕ Пользователи.ПометкаУдаления");
			ЗапросПользователь.УстановитьПараметр("ФизическоеЛицо", СсылкаНаПотребитель);
			
			ВыборкаПользователи = ЗапросПользователь.Выполнить().Выбрать();
			
			Если ВыборкаПользователи.Количество() = 1 Тогда
				ВыборкаПользователи.Следующий();
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитыИзПотребителя(
					Прокси,
					ОбъектXDTO,
					ВыборкаПользователи.Ссылка);
				
			Иначе
				ОбъектXDTO.privatePerson = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMPrivatePerson",
					СсылкаНаПотребитель);
				
			КонецЕсли;
			
			//++ Локализация
			
			
			//-- Локализация
			
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMParty") Тогда
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Контрагенты") Тогда
			ОбъектXDTO.correspondent = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMCorrespondent",
				СсылкаНаПотребитель);
			
		ИначеЕсли ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Организации") Тогда
			ОбъектXDTO.organization = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMOrganization",
				СсылкаНаПотребитель);
			
		ИначеЕсли ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Пользователи")
				Или ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
				ОбъектXDTO.user = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMUser",
					СсылкаНаПотребитель);
			ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
				ОбъектXDTO.employee = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMEmployee",
					СсылкаНаПотребитель);
			КонецЕсли;
			
		//++ Локализация
		
			
			//-- Локализация
			
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMPartyRowContact") Тогда
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ОбъектXDTO.contactPerson = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMContactPerson",
				СсылкаНаПотребитель);
			
		ИначеЕсли ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Пользователи")
				Или ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
				ОбъектXDTO.user = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMUser",
					СсылкаНаПотребитель);
			ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
				ОбъектXDTO.employee = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMEmployee",
					СсылкаНаПотребитель);
			КонецЕсли;
			
		//++ Локализация
		
			
			//-- Локализация
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьЧастныеРеквизиты(ПравилаИнтеграцииМенеджер, ТипОбъектаИС, Правило)
	
	Если ТипОбъектаИС = "Справочник.СоглашенияСКлиентами" Тогда
		ДополнитьПравилоИнтеграцииСоглашенияСКлиентами(ПравилаИнтеграцииМенеджер, Правило);
		
	ИначеЕсли ТипОбъектаИС = "Справочник.ДоговорыКонтрагентов" Тогда
		ДополнитьПравилоИнтеграцииДоговорыКонтрагентов(ПравилаИнтеграцииМенеджер, Правило);
		
	ИначеЕсли ТипОбъектаИС = "Документ.КоммерческоеПредложениеКлиенту" Тогда
		ДополнитьПравилоИнтеграцииКоммерческоеПредложениеКлиенту(ПравилаИнтеграцииМенеджер, Правило);
		
	ИначеЕсли ТипОбъектаИС = "Документ.ЗаказКлиента" Тогда
		ДополнитьПравилоИнтеграцииЗаказКлиента(ПравилаИнтеграцииМенеджер, Правило);
		
	ИначеЕсли ТипОбъектаИС = "Документ.ЗаказПоставщику" Тогда
		ДополнитьПравилоИнтеграцииЗаказПоставщику(ПравилаИнтеграцииМенеджер, Правило);
		
	ИначеЕсли ТипОбъектаИС = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		ДополнитьПравилоИнтеграцииЗаявкаНаВозвратТоваровОтКлиента(ПравилаИнтеграцииМенеджер, Правило);
		
	ИначеЕсли ТипОбъектаИС = "Документ.ЗаявкаНаРасходованиеДенежныхСредств" Тогда
		ДополнитьПравилоИнтеграцииЗаявкаНаРасходованиеДенежныхСредств(ПравилаИнтеграцииМенеджер, Правило);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПравилоИнтеграцииСоглашенияСКлиентами(ПравилаИнтеграцииМенеджер, Правило)
	
	//////////////////////////////////////////////////////
	// Правила выгрузки (Передача в 1С:Документооборот)
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"author",
		"Менеджер");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"openEnded",
		"Параметры.Результат = Не ЗначениеЗаполнено(Параметры.Источник.ДатаОкончанияДействия);");
	
	// Таблица Стороны
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("2.1.28.12.CORP") Тогда
		ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
			Правило,
			Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
			"partyRows.rows",
			"Параметры.Результат = Новый ТаблицаЗначений;
			|Параметры.Результат.Колонки.Добавить(""Комментарий"");
			|Параметры.Результат.Колонки.Добавить(""КонтактноеЛицо"");
			|Параметры.Результат.Колонки.Добавить(""Наименование"");
			|Параметры.Результат.Колонки.Добавить(""НаименованиеID"");
			|Параметры.Результат.Колонки.Добавить(""НаименованиеТип"");
			|Параметры.Результат.Колонки.Добавить(""Сторона"");
			|Параметры.Результат.Колонки.Добавить(""Установил"");
			|Параметры.Результат.Колонки.Добавить(""ДатаПодписи"");
			|Параметры.Результат.Колонки.Добавить(""Подписан"");
			|Параметры.Результат.Колонки.Добавить(""Подписал"");
			|
			|НоваяСтрока = Параметры.Результат.Добавить();
			|НоваяСтрока.Сторона = Параметры.Источник.Организация;
			|НаименованиеПродавецXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредопределенноеЗначениеДО(
			|	""DMPartyName"", ""Продавец"");
			|НоваяСтрока.Наименование = НаименованиеПродавецXDTO.name;
			|НоваяСтрока.НаименованиеID = НаименованиеПродавецXDTO.objectID.id;
			|НоваяСтрока.НаименованиеТип = НаименованиеПродавецXDTO.objectID.type;
			|
			|НоваяСтрока = Параметры.Результат.Добавить();
			|НоваяСтрока.Сторона = Параметры.Источник.Контрагент;
			|НаименованиеПокупательXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредопределенноеЗначениеДО(
			|	""DMPartyName"", ""Покупатель"");
			|НоваяСтрока.Наименование = НаименованиеПокупательXDTO.name;
			|НоваяСтрока.НаименованиеID = НаименованиеПокупательXDTO.objectID.id;
			|НоваяСтрока.НаименованиеТип = НаименованиеПокупательXDTO.objectID.type;
			|Если ЗначениеЗаполнено(Параметры.Источник.КонтактноеЛицо) Тогда
			|	НоваяСтрока.КонтактноеЛицо = Параметры.Источник.КонтактноеЛицо;
			|КонецЕсли;");
	КонецЕсли;
	
	//////////////////////////////////////////////////////
	// Правила загрузки (Получение из 1С:Документооборота)
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"Наименование",
		"title");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"Номер",
		"regNumber");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"Дата",
		"regDate");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"Согласован",
		"statusApproval");
	
	//////////////////////////////////////////////////////
	// Парные правила
	
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"СуммаДокумента",
		"sum");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Валюта",
		"currency");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Менеджер",
		"responsible");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"КонтактноеЛицо",
		"contactPerson");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"ДатаНачалаДействия",
		"beginDate");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"ДатаОкончанияДействия",
		"endDate");
	
КонецПроцедуры

Процедура ДополнитьПравилоИнтеграцииДоговорыКонтрагентов(ПравилаИнтеграцииМенеджер, Правило)
	
	//////////////////////////////////////////////////////
	// Правила выгрузки (Передача в 1С:Документооборот)
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"author",
		"Менеджер");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"VAT",
		"Параметры.Результат = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
		|	Параметры.Источник.Сумма,
		|	Параметры.Источник.СтавкаНДС);");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"openEnded",
		"Параметры.Результат = Не ЗначениеЗаполнено(Параметры.Источник.ДатаОкончанияДействия);");
	
	// Таблица Стороны
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("2.1.28.12.CORP") Тогда
		ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
			Правило,
			Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
			"partyRows.rows",
			"Параметры.Результат = Новый ТаблицаЗначений;
			|Параметры.Результат.Колонки.Добавить(""Комментарий"");
			|Параметры.Результат.Колонки.Добавить(""КонтактноеЛицо"");
			|Параметры.Результат.Колонки.Добавить(""Наименование"");
			|Параметры.Результат.Колонки.Добавить(""НаименованиеID"");
			|Параметры.Результат.Колонки.Добавить(""НаименованиеТип"");
			|Параметры.Результат.Колонки.Добавить(""Сторона"");
			|Параметры.Результат.Колонки.Добавить(""Установил"");
			|Параметры.Результат.Колонки.Добавить(""ДатаПодписи"");
			|Параметры.Результат.Колонки.Добавить(""Подписан"");
			|Параметры.Результат.Колонки.Добавить(""Подписал"");
			|
			|НоваяСтрока = Параметры.Результат.Добавить();
			|НоваяСтрока.Сторона = Параметры.Источник.Организация;
			|НаименованиеЗаказчикXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредопределенноеЗначениеДО(
			|	""DMPartyName"", ""Заказчик"");
			|НоваяСтрока.Наименование = НаименованиеЗаказчикXDTO.name;
			|НоваяСтрока.НаименованиеID = НаименованиеЗаказчикXDTO.objectID.id;
			|НоваяСтрока.НаименованиеТип = НаименованиеЗаказчикXDTO.objectID.type;
			|
			|НоваяСтрока = Параметры.Результат.Добавить();
			|НоваяСтрока.Сторона = Параметры.Источник.Контрагент;
			|НаименованиеИсполнительXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредопределенноеЗначениеДО(
			|	""DMPartyName"", ""Исполнитель"");
			|НоваяСтрока.Наименование = НаименованиеИсполнительXDTO.name;
			|НоваяСтрока.НаименованиеID = НаименованиеИсполнительXDTO.objectID.id;
			|НоваяСтрока.НаименованиеТип = НаименованиеИсполнительXDTO.objectID.type;
			|Если ЗначениеЗаполнено(Параметры.Источник.КонтактноеЛицо) Тогда
			|	НоваяСтрока.КонтактноеЛицо = Параметры.Источник.КонтактноеЛицо;
			|КонецЕсли;");
	КонецЕсли;
	
	//////////////////////////////////////////////////////
	// Правила загрузки (Получение из 1С:Документооборота)
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"Наименование",
		"title");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"Номер",
		"regNumber");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"Дата",
		"regDate");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"Согласован",
		"statusApproval");
	
	//////////////////////////////////////////////////////
	// Парные правила
	
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Сумма",
		"sum");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"ВалютаВзаиморасчетов",
		"currency");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Менеджер",
		"responsible");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Подразделение",
		"subdivision");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"КонтактноеЛицо",
		"contactPerson");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"ДатаНачалаДействия",
		"beginDate");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"ДатаОкончанияДействия",
		"endDate");
	
КонецПроцедуры

Процедура ДополнитьПравилоИнтеграцииКоммерческоеПредложениеКлиенту(ПравилаИнтеграцииМенеджер, Правило)
	
	//////////////////////////////////////////////////////
	// Правила выгрузки (Передача в 1С:Документооборот)
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"author",
		"Менеджер");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"sum",
		"Если Параметры.Источник.ЦенаВключаетНДС Тогда
		|	Параметры.Результат = Параметры.Источник.СуммаДокумента;
		|Иначе
		|	Параметры.Результат = Параметры.Источник.СуммаДокумента - Параметры.Источник.Товары.Итог(""СуммаНДС"");
		|КонецЕсли;");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"VAT",
		"Параметры.Результат = Параметры.Источник.Товары.Итог(""СуммаНДС"");");
	
	// Таблица Стороны
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("2.1.28.12.CORP") Тогда
		ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
			Правило,
			Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
			"partyRows.rows",
			"Параметры.Результат = Новый ТаблицаЗначений;
			|Параметры.Результат.Колонки.Добавить(""Комментарий"");
			|Параметры.Результат.Колонки.Добавить(""КонтактноеЛицо"");
			|Параметры.Результат.Колонки.Добавить(""Наименование"");
			|Параметры.Результат.Колонки.Добавить(""НаименованиеID"");
			|Параметры.Результат.Колонки.Добавить(""НаименованиеТип"");
			|Параметры.Результат.Колонки.Добавить(""Сторона"");
			|Параметры.Результат.Колонки.Добавить(""Установил"");
			|Параметры.Результат.Колонки.Добавить(""ДатаПодписи"");
			|Параметры.Результат.Колонки.Добавить(""Подписан"");
			|Параметры.Результат.Колонки.Добавить(""Подписал"");
			|
			|НоваяСтрока = Параметры.Результат.Добавить();
			|НоваяСтрока.Сторона = Параметры.Источник.Организация;
			|НаименованиеПродавецXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредопределенноеЗначениеДО(
			|	""DMPartyName"", ""Продавец"");
			|НоваяСтрока.Наименование = НаименованиеПродавецXDTO.name;
			|НоваяСтрока.НаименованиеID = НаименованиеПродавецXDTO.objectID.id;
			|НоваяСтрока.НаименованиеТип = НаименованиеПродавецXDTO.objectID.type;
			|
			|НоваяСтрока = Параметры.Результат.Добавить();
			|НоваяСтрока.Сторона = Параметры.Источник.Контрагент;
			|НаименованиеПокупательXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредопределенноеЗначениеДО(
			|	""DMPartyName"", ""Покупатель"");
			|НоваяСтрока.Наименование = НаименованиеПокупательXDTO.name;
			|НоваяСтрока.НаименованиеID = НаименованиеПокупательXDTO.objectID.id;
			|НоваяСтрока.НаименованиеТип = НаименованиеПокупательXDTO.objectID.type;
			|Если ЗначениеЗаполнено(Параметры.Источник.КонтактноеЛицо) Тогда
			|	НоваяСтрока.КонтактноеЛицо = Параметры.Источник.КонтактноеЛицо;
			|КонецЕсли;");
	КонецЕсли;
	
	//////////////////////////////////////////////////////
	// Правила загрузки (Получение из 1С:Документооборота)
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"СуммаДокумента",
		"sum",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение,
		"ЦенаВключаетНДС",
		Истина,
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.Запрещено);
	
	//////////////////////////////////////////////////////
	// Парные правила
	
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Валюта",
		"currency",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Менеджер",
		"responsible",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноБезПерепроведения);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"КонтактноеЛицо",
		"contactPerson",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноБезПерепроведения);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"СрокДействия",
		"performanceDate",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	
	// Таблица "Товары и услуги" - "Товары"
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Товары",
		"productRows.rows",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Номенклатура",
		"product",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Цена",
		"price",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Количество",
		"quantity",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"ЕдиницаИзмерения",
		"measurementUnit",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"СуммаНДС",
		"VAT",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Сумма",
		"total",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	
	// Ставка НДС в загрузке и выгрузке будет заполняться по-разному
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"VATRate",
		"Товары.СтавкаНДС",
		Истина,,
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение,
		"СтавкаНДС",
		Справочники.СтавкиНДС.БезНДС,
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары");
	
	//////////////////////////////////////////////////////
	// Печатные формы
	НоваяСтрока = Правило.ПрисоединяемыеПечатныеФормы.Добавить();
	НоваяСтрока.ИмяКоманды = "КоммерческоеПредложениеКлиенту";
	НоваяСтрока.МенеджерПечати = "Документ.КоммерческоеПредложениеКлиенту";
	НоваяСтрока.Обновлять = Истина;
	НоваяСтрока.ПредставлениеКоманды = НСтр("ru = 'Коммерческое предложение клиенту (со скидками)'");
	
КонецПроцедуры

Процедура ДополнитьПравилоИнтеграцииЗаказКлиента(ПравилаИнтеграцииМенеджер, Правило)
	
	//////////////////////////////////////////////////////
	// Правила выгрузки (Передача в 1С:Документооборот)
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"author",
		"Менеджер");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"sum",
		"Если Параметры.Источник.ЦенаВключаетНДС Тогда
		|	Параметры.Результат = Параметры.Источник.СуммаДокумента;
		|Иначе
		|	Параметры.Результат = Параметры.Источник.СуммаДокумента - Параметры.Источник.Товары.Итог(""СуммаНДС"");
		|КонецЕсли;");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"VAT",
		"Параметры.Результат = Параметры.Источник.Товары.Итог(""СуммаНДС"");");
	
	//////////////////////////////////////////////////////
	// Правила загрузки (Получение из 1С:Документооборота)
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"СуммаДокумента",
		"sum",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение,
		"ЦенаВключаетНДС",
		Истина,
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.Запрещено);
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"Согласован",
		"statusApproval",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	
	//////////////////////////////////////////////////////
	// Парные правила
	
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Валюта",
		"currency",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Менеджер",
		"responsible",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноБезПерепроведения);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Подразделение",
		"subdivision",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"КонтактноеЛицо",
		"contactPerson",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноБезПерепроведения);
	
	// Таблица "Товары и услуги" - "Товары"
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Товары",
		"productRows.rows",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Номенклатура",
		"product",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Цена",
		"price",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Количество",
		"quantity",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"СуммаНДС",
		"VAT",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Сумма",
		"total",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	
	// Ставка НДС в загрузке и выгрузке будет заполняться по-разному
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"VATRate",
		"Товары.СтавкаНДС",
		Истина,,
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение,
		"СтавкаНДС",
		Справочники.СтавкиНДС.БезНДС,
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары");
	
	// Также нужно заполнить Количество упаковок
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"КоличествоУпаковок",
		"productRows.rows.quantity",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары");
	
	//////////////////////////////////////////////////////
	// Печатные формы
	НоваяСтрока = Правило.ПрисоединяемыеПечатныеФормы.Добавить();
	НоваяСтрока.ИмяКоманды = "ЗаказКлиента";
	НоваяСтрока.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
	НоваяСтрока.Обновлять = Истина;
	НоваяСтрока.ПредставлениеКоманды = НСтр("ru = 'Заказ клиента'");
	
КонецПроцедуры

Процедура ДополнитьПравилоИнтеграцииЗаказПоставщику(ПравилаИнтеграцииМенеджер, Правило)
	
	//////////////////////////////////////////////////////
	// Правила выгрузки (Передача в 1С:Документооборот)
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"author",
		"Менеджер");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"sum",
		"Если Параметры.Источник.ЦенаВключаетНДС Тогда
		|	Параметры.Результат = Параметры.Источник.СуммаДокумента;
		|Иначе
		|	Параметры.Результат = Параметры.Источник.СуммаДокумента - Параметры.Источник.Товары.Итог(""СуммаНДС"");
		|КонецЕсли;");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"VAT",
		"Параметры.Результат = Параметры.Источник.Товары.Итог(""СуммаНДС"");");
	
	//////////////////////////////////////////////////////
	// Правила загрузки (Получение из 1С:Документооборота)
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"СуммаДокумента",
		"sum",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение,
		"ЦенаВключаетНДС",
		Истина,
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.Запрещено);
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"Согласован",
		"statusApproval",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	
	//////////////////////////////////////////////////////
	// Парные правила
	
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Валюта",
		"currency",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Менеджер",
		"responsible",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноБезПерепроведения);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Подразделение",
		"subdivision",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"КонтактноеЛицо",
		"contactPerson",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноБезПерепроведения);
	
	// Таблица "Товары и услуги" - "Товары"
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Товары",
		"productRows.rows",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Номенклатура",
		"product",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Цена",
		"price",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Количество",
		"quantity",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"СуммаНДС",
		"VAT",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Сумма",
		"total",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары",
		"productRows.rows");
	
	// Ставка НДС в загрузке и выгрузке будет заполняться по-разному
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"VATRate",
		"Товары.СтавкаНДС",
		Истина,,
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение,
		"СтавкаНДС",
		Справочники.СтавкиНДС.БезНДС,
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары");
	
	// Также нужно заполнить Количество упаковок
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"КоличествоУпаковок",
		"productRows.rows.quantity",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"Товары");
	
	//////////////////////////////////////////////////////
	// Печатные формы
	НоваяСтрока = Правило.ПрисоединяемыеПечатныеФормы.Добавить();
	НоваяСтрока.ИмяКоманды = "ЗаказПоставщику";
	НоваяСтрока.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
	НоваяСтрока.Обновлять = Истина;
	НоваяСтрока.ПредставлениеКоманды = НСтр("ru = 'Заказ поставщику'");
	
КонецПроцедуры

Процедура ДополнитьПравилоИнтеграцииЗаявкаНаВозвратТоваровОтКлиента(ПравилаИнтеграцииМенеджер, Правило)
	
	//////////////////////////////////////////////////////
	// Правила выгрузки (Передача в 1С:Документооборот)
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"author",
		"Менеджер");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"sum",
		"Если Параметры.Источник.ЦенаВключаетНДС Тогда
		|	Параметры.Результат = Параметры.Источник.СуммаДокумента;
		|Иначе
		|	Параметры.Результат = Параметры.Источник.СуммаДокумента - Параметры.Источник.ВозвращаемыеТовары.Итог(""СуммаНДС"");
		|КонецЕсли;");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"VAT",
		"Параметры.Результат = Параметры.Источник.ВозвращаемыеТовары.Итог(""СуммаНДС"");");
	
	//////////////////////////////////////////////////////
	// Правила загрузки (Получение из 1С:Документооборота)
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"СуммаДокумента",
		"sum",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение,
		"ЦенаВключаетНДС",
		Истина,
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.Запрещено);
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"Согласован",
		"statusApproval",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	
	//////////////////////////////////////////////////////
	// Парные правила
	
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Валюта",
		"currency",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Менеджер",
		"responsible",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноБезПерепроведения);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Подразделение",
		"subdivision",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"КонтактноеЛицо",
		"contactPerson",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноБезПерепроведения);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"ЖелаемаяДатаПоступления",
		"performanceDate",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	
	// Таблица "Товары и услуги" - "Возвращаемые товары"
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"ВозвращаемыеТовары",
		"productRows.rows",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Номенклатура",
		"product",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"ВозвращаемыеТовары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Цена",
		"price",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"ВозвращаемыеТовары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Количество",
		"quantity",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"ВозвращаемыеТовары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"СуммаНДС",
		"VAT",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"ВозвращаемыеТовары",
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Сумма",
		"total",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"ВозвращаемыеТовары",
		"productRows.rows");
	
	// Ставка НДС в загрузке и выгрузке будет заполняться по-разному
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"VATRate",
		"ВозвращаемыеТовары.СтавкаНДС",
		Истина,,
		"productRows.rows");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение,
		"СтавкаНДС",
		Справочники.СтавкиНДС.БезНДС,
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"ВозвращаемыеТовары");
	
	// Также нужно заполнить Количество упаковок
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"КоличествоУпаковок",
		"productRows.rows.quantity",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"ВозвращаемыеТовары");
	
	//////////////////////////////////////////////////////
	// Печатные формы
	НоваяСтрока = Правило.ПрисоединяемыеПечатныеФормы.Добавить();
	НоваяСтрока.ИмяКоманды = "ЗаявкаНаВозврат";
	НоваяСтрока.МенеджерПечати = "Документ.ЗаявкаНаВозвратТоваровОтКлиента";
	НоваяСтрока.Обновлять = Истина;
	НоваяСтрока.ПредставлениеКоманды = НСтр("ru = 'Заявка на возврат'");
	
КонецПроцедуры

Процедура ДополнитьПравилоИнтеграцииЗаявкаНаРасходованиеДенежныхСредств(ПравилаИнтеграцииМенеджер, Правило)
	
	//////////////////////////////////////////////////////
	// Правила выгрузки (Передача в 1С:Документооборот)
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"author",
		"КтоЗаявил");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"VAT",
		"Параметры.Результат = Параметры.Источник.РасшифровкаПлатежа.Итог(""СуммаНДС"");");
	
	// Таблица Статьи ДДС
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"cashFlowRows.rows",
		"Параметры.Результат = Новый ТаблицаЗначений;
		|Параметры.Результат.Колонки.Добавить(""СтатьяДДС"");
		|Параметры.Результат.Колонки.Добавить(""Сумма"");
		|Параметры.Результат.Колонки.Добавить(""СуммаНДС"");
		|Для Каждого Строка Из Параметры.Источник.РасшифровкаПлатежа Цикл
		|	НоваяСтрока = Параметры.Результат.Добавить();
		|	НоваяСтрока.СтатьяДДС = Строка.СтатьяДвиженияДенежныхСредств;
		|	НоваяСтрока.Сумма = Строка.Сумма;
		|	НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
		|КонецЦикла;
		|Параметры.Результат.Свернуть(""СтатьяДДС"", ""Сумма, СуммаНДС"")");
	
	//////////////////////////////////////////////////////
	// правила загрузки (Получение из 1С:Документооборота)
	
	// Таблица "Статьи движения денежных средств" - "Расшифровка платежа"
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"РасшифровкаПлатежа",
		"cashFlowRows.rows",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"СтатьяДвиженияДенежныхСредств",
		"cashFlowRows.rows.item",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"РасшифровкаПлатежа");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"Сумма",
		"cashFlowRows.rows.total",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"РасшифровкаПлатежа");
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"СуммаНДС",
		"cashFlowRows.rows.VAT",
		Ложь,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением,
		"РасшифровкаПлатежа");
	
	//////////////////////////////////////////////////////
	// Парные правила
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("2.1.28.12.CORP") Тогда
		ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
			Правило,
			"Контрагент",
			"recipient",,,
			Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	КонецЕсли;
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"СуммаДокумента",
		"sum",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Валюта",
		"currency",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"КтоЗаявил",
		"responsible",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноБезПерепроведения);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"Подразделение",
		"subdivision",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(
		Правило,
		"ЖелательнаяДатаПлатежа",
		"performanceDate",,,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
	
КонецПроцедуры

#КонецОбласти
