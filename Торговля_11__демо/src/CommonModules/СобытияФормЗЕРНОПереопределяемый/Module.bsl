#Область ПрограммныйИнтерфейс

#Область Локализация

// Переопределение параметров интеграции ЗЕРНО (расположения форматированной строки)
//
// Параметры:
//   Форма            - ФормаКлиентскогоПриложения - прикладная форма для встраивания форматированной строки
//   ПараметрыНадписи - см. СобытияФормИС.ПараметрыИнтеграцииДляДокументаОснования
Процедура ПриОпределенииПараметровИнтеграцииЗЕРНО(Форма, ПараметрыНадписи) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры


Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Серверная переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Заполняет табличную часть подобранными товарами.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой производится подбор,
//  ВыбранноеЗначение - Произвольный - данные, содержащие подобранную пользователем номенклатуру,
//  ПараметрыЗаполнения - Структура - дополнительные параметры заполнения
//  ПараметрыЗаполнения - Структура - параметры заполнения,
//  КэшированныеЗначения - Неопределено, Структура - сохраненные значения параметров, используемых при обработке,
//  ДобавленныеСтроки - Неопределено, Массив из ДанныеФормыЭлементКоллекции - массив добавленных строк таблицы товаров
Процедура ОбработкаРезультатаПодбораНоменклатуры(
	Форма, ВыбранноеЗначение, ПараметрыЗаполнения,
	КэшированныеЗначения = Неопределено, ДобавленныеСтроки = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	Если КэшированныеЗначения = Неопределено Тогда 
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	ИспользуютсяУпаковки = Истина;
	Если ПараметрыЗаполнения.Свойство("ИспользуютсяУпаковки") Тогда
		ИспользуютсяУпаковки = ПараметрыЗаполнения.ИспользуютсяУпаковки;
	КонецЕсли;
	
	ПараметрыУказанияСерий = Неопределено;
	ПараметрыЗаполнения.Свойство("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	
	ИмяТабличнойЧасти = Неопределено;
	Если НЕ ПараметрыЗаполнения.Свойство("ИмяТабличнойЧасти", ИмяТабличнойЧасти) Тогда
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;
	
	ТекущаяСтрока     = Неопределено;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Если Не ИспользуютсяУпаковки Тогда
			СтрокаТовара.КоличествоУпаковок = СтрокаТовара.Количество;
			СтрокаТовара.Упаковка = Неопределено;
		КонецЕсли;
		
		ТекущаяСтрока = Форма.Объект[ИмяТабличнойЧасти].Добавить();
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		ТаблицаОКПД2ТНВЭД = РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО.ДанныеТНВЭДПоОКПД2(ТекущаяСтрока.ОКПД2);
		ИнтеграцияЗЕРНО.ОбновитьКэшВидовСельхозКультур(Форма, ТаблицаОКПД2ТНВЭД);
		ИнтеграцияЗЕРНО.ЗаполнитьТНВЭДПоВидуСельхозКультур(ТекущаяСтрока.КодТНВЭД, ТекущаяСтрока.ОКПД2, ТаблицаОКПД2ТНВЭД);
	
		Если ДобавленныеСтроки <> Неопределено Тогда
			ДобавленныеСтроки.Добавить(ТекущаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении номенклатуры в строке табличной части.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - редактируемая строка таблицы,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - Структура - (См. ИнтеграцияИС.ПараметрыУказанияСерий).
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	
	СтруктураДействий = Новый Структура;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Характеристика") Тогда
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
			ТекущаяСтрока.Характеристика);
			
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Серия")
			И ПараметрыУказанияСерий <> Неопределено Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ТипНоменклатуры"));
			
		ИсточникЗначенийВФорме = Форма;
		ПараметрыУказанияСерийКопия = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыУказанияСерий, Ложь);
			
		ИмяТЧ = "Товары";
		Если ПараметрыУказанияСерий <> Неопределено Тогда
			
			Если ПараметрыУказанияСерийКопия.Свойство("Сырье") Тогда
				ПараметрыУказанияСерийКопия = ПараметрыУказанияСерийКопия.Сырье;
			КонецЕсли;
			
			Если ПараметрыУказанияСерийКопия.ИмяИсточникаЗначенийВФормеОбъекта = "ТекущиеДанные" Тогда
				ИсточникЗначенийВФорме = ТекущаяСтрока;
			ИначеЕсли ЗначениеЗаполнено(ПараметрыУказанияСерийКопия.ИмяИсточникаЗначенийВФормеОбъекта) Тогда
				ИсточникЗначенийВФорме = Форма[ПараметрыУказанияСерийКопия.ИмяИсточникаЗначенийВФормеОбъекта];
			КонецЕсли;
		КонецЕсли;
	
		Склад = Неопределено;
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерийКопия, Склад));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ОКПД2") Тогда
		СтруктураДействий.Вставить("ЗаполнитьКодОКПД2", Новый Структура("Номенклатура", "ОКПД2"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ЕдиницаИзмерения") Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КодТНВЭД") Тогда
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоЗЕРНО")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Количество")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕдиницаИзмеренияКилограмм") Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницПоЗЕРНО",
			Новый Структура("Упаковка", Форма.ЕдиницаИзмеренияКилограмм));
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#Область РаботаСАдресами

// Предназначена для получения текста запроса с контактной информацией, содержащей	ссылки на элементы и их адреса.
// Для автоподбора требуется предоставить пользователю первые 10 удовлетворяющих отбору записей.
// 
// Параметры:
//  ОписаниеТипов - ОписаниеТипов - Описание типов, для которых необходимо получить контактную информацию.
//   Возможные значения: Организации, Партнеры, Контрагенты, Склады.
//  ТекстЗапроса - Строка - Текст запроса.
//   Адрес должен содержать текст, указанный в параметре запроса СтрокаПоиска.
//   Возможен поиск по Наименованию, ИНН и другим полям справочников. 
//   Результат запроса должен содержать поля:
//    ВладелецАдреса               - Ссылка на элемент справочника - владельца адреса.
//    ПредставлениеВладельцаАдреса - Строка - строковое представление владельца адреса.
//    Адрес                        - Строка - контактная информация во внутреннем формате JSON или XML.
//    ПредставлениеАдреса          - Строка - строкое представление адреса.
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы.
//   Если указано, тогда результат запроса должен быть помещен во временную таблицу с указанным именем.
//   Если не указано, тогда результат запроса во временную таблицу не помещается.
// 
Процедура ТекстЗапросаАдресаДляАвтоподбора(ОписаниеТипов, ТекстЗапроса, ИмяВременнойТаблицы = "") Экспорт
	
	//++ НЕ ГОСИС
	Если ИмяВременнойТаблицы = "" Тогда
		ТекстПоместить = "";
	Иначе
		ТекстПоместить = СтрШаблон("ПОМЕСТИТЬ %1", ИмяВременнойТаблицы);
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	|	Таблица.ВладелецАдреса               КАК ВладелецАдреса,
	|	Таблица.ПредставлениеВладельцаАдреса КАК ПредставлениеВладельцаАдреса,
	|	Таблица.Адрес                        КАК Адрес,
	|	Таблица.ПредставлениеАдреса          КАК ПредставлениеАдреса
	|%1
	|ИЗ
	|	(",
	ТекстПоместить);
	
	ТекстРазделителя = "
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	Типы = ОписаниеТипов.Типы();
	
	ВложенныйЗапросПустой = Истина;
	Для Каждого Тип Из Типы Цикл
		
		ВидКИ = Новый Массив;
		Если Тип = Тип("СправочникСсылка.Организации") Тогда
			ВидКИ.Добавить("ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)");
			ВидКИ.Добавить("ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации)");
		ИначеЕсли Тип = Тип("СправочникСсылка.Партнеры") Тогда
			ВидКИ.Добавить("ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПартнера)");
		ИначеЕсли Тип = Тип("СправочникСсылка.Контрагенты") Тогда
			ВидКИ.Добавить("ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)");
			ВидКИ.Добавить("ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)");
		ИначеЕсли Тип = Тип("СправочникСсылка.Склады") Тогда
			ВидКИ.Добавить("ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)");
		КонецЕсли;
		
		Если Тип = Тип("СправочникСсылка.Организации")
			Или Тип = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ТекстПодзапроса = СтрШаблон("
			|ВЫБРАТЬ ПЕРВЫЕ 10
			|	ТаблицаСправочника.Ссылка КАК ВладелецАдреса,
			|	ТаблицаСправочника.Наименование КАК ПредставлениеВладельцаАдреса,
			|	ЕСТЬNULL(ТаблицаКонтактнойИнформации.Значение, """") КАК Адрес,
			|	ЕСТЬNULL(ТаблицаКонтактнойИнформации.Представление, """") КАК ПредставлениеАдреса,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаКонтактнойИнформации.Представление, """") <> """"
			|			ТОГДА ТаблицаКонтактнойИнформации.Представление
			|		ИНАЧЕ ТаблицаСправочника.Наименование
			|	КОНЕЦ КАК ПолеСортировки
			|ИЗ
			|	Справочник.%1 КАК ТаблицаСправочника
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.%1.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|			(ВЫБРАТЬ
			|				ТаблицаКонтактнойИнформации.Ссылка КАК Ссылка,
			|				ТаблицаКонтактнойИнформации.Вид КАК Вид,
			|				МАКСИМУМ(ТаблицаКонтактнойИнформации.ДействуетС) КАК ДействуетС
			|			ИЗ
			|				Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|			ГДЕ
			|				ТаблицаКонтактнойИнформации.Вид В (%2)
			|			СГРУППИРОВАТЬ ПО
			|				ТаблицаКонтактнойИнформации.Ссылка,
			|				ТаблицаКонтактнойИнформации.Вид
			|			) КАК ВложеннаяТаблицаКонтактнойИнформации
			|		ПО ТаблицаКонтактнойИнформации.Ссылка = ВложеннаяТаблицаКонтактнойИнформации.Ссылка
			|			И ТаблицаКонтактнойИнформации.Вид = ВложеннаяТаблицаКонтактнойИнформации.Вид
			|			И ТаблицаКонтактнойИнформации.ДействуетС = ВложеннаяТаблицаКонтактнойИнформации.ДействуетС
			|		ПО ТаблицаСправочника.Ссылка = ТаблицаКонтактнойИнформации.Ссылка
			|ГДЕ
			|	НЕ ТаблицаСправочника.ПометкаУдаления
			|	И (ТаблицаСправочника.Наименование ПОДОБНО &СтрокаПоиска
			|	ИЛИ ЕСТЬNULL(ТаблицаКонтактнойИнформации.Представление, """") ПОДОБНО &СтрокаПоиска)",
			Метаданные.НайтиПоТипу(Тип).Имя,
			СтрСоединить(ВидКИ, ","));
			
		ИначеЕсли Тип = Тип("СправочникСсылка.Партнеры")
			Или Тип = Тип("СправочникСсылка.Склады") Тогда
			
			Если Тип = Тип("СправочникСсылка.Склады") Тогда
				УсловиеОтбора = "И НЕ ТаблицаСправочника.ЭтоГруппа";
			Иначе
				УсловиеОтбора = "";
			КонецЕсли;
			
			ТекстПодзапроса = СтрШаблон("
			|ВЫБРАТЬ ПЕРВЫЕ 10
			|	ТаблицаСправочника.Ссылка КАК ВладелецАдреса,
			|	ТаблицаСправочника.Наименование КАК ПредставлениеВладельцаАдреса,
			|	ЕСТЬNULL(ТаблицаКонтактнойИнформации.Значение, """") КАК Адрес,
			|	ЕСТЬNULL(ТаблицаКонтактнойИнформации.Представление, """") КАК ПредставлениеАдреса,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаКонтактнойИнформации.Представление, """") <> """"
			|			ТОГДА ТаблицаКонтактнойИнформации.Представление
			|		ИНАЧЕ ТаблицаСправочника.Наименование
			|	КОНЕЦ КАК ПолеСортировки
			|ИЗ
			|	Справочник.%1 КАК ТаблицаСправочника
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.%1.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|		ПО ТаблицаСправочника.Ссылка = ТаблицаКонтактнойИнформации.Ссылка
			|		И ТаблицаКонтактнойИнформации.Вид В (%2)
			|ГДЕ
			|	НЕ ТаблицаСправочника.ПометкаУдаления
			|	%3
			|	И (ТаблицаСправочника.Наименование ПОДОБНО &СтрокаПоиска
			|	ИЛИ ЕСТЬNULL(ТаблицаКонтактнойИнформации.Представление, """") ПОДОБНО &СтрокаПоиска)",
			Метаданные.НайтиПоТипу(Тип).Имя,
			СтрСоединить(ВидКИ, ","),
			УсловиеОтбора);
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ВложенныйЗапросПустой Тогда
			ВложенныйЗапросПустой = Ложь;
		Иначе
			ТекстЗапроса = ТекстЗапроса + ТекстРазделителя;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстПодзапроса;
		
	КонецЦикла;
	
	Если ВложенныйЗапросПустой Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	НЕОПРЕДЕЛЕНО КАК ВладелецАдреса,
		|	"""" КАК ПредставлениеВладельцаАдреса,
		|	"""" КАК Адрес,
		|	"""" КАК ПредставлениеАдреса,
		|	"""" КАК ПолеСортировки";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	ПолеСортировки) КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеСортировки";
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Предназначена для получения данных адреса объекта хранения зерна.
// 
// Параметры:
//  ДанныеАдреса - Структура - содержит данные адреса, которые необходимо заполнить  
//   ВладелецАдреса               - СправочникСсылка - ссылка на элемент справочника, адрес которого необходимо заполнить.
//   Адрес                        - Строка - контактная информация во внутреннем формате JSON или XML.
//   ПредставлениеАдреса          - Строка - строкое представление адреса.
//
Процедура ДанныеАдресаОбъекта(ДанныеАдреса) Экспорт

	//++ НЕ ГОСИС
	ТипВладельцаАдреса = ТипЗнч(ДанныеАдреса.ВладелецАдреса);
	Если ТипВладельцаАдреса = Тип("СправочникСсылка.Организации")
		Или ТипВладельцаАдреса = Тип("СправочникСсылка.Партнеры")
		Или ТипВладельцаАдреса = Тип("СправочникСсылка.Контрагенты")
		Или ТипВладельцаАдреса = Тип("СправочникСсылка.Склады") Тогда
		КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ДанныеАдреса.ВладелецАдреса, Перечисления.ТипыКонтактнойИнформации.Адрес, ТекущаяДатаСеанса(), Ложь);
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			ДанныеАдреса.Адрес               = КонтактнаяИнформация[0].Значение;
			ДанныеАдреса.ПредставлениеАдреса = КонтактнаяИнформация[0].Представление;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
