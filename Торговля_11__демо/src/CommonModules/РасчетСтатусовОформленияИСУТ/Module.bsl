// Механизм расчета статусов оформления документов ГосИС
//

#Область ПрограммныйИнтерфейс

#Область ВЕТИС

// Позволяет переопределить имена реквизитов документа-основания для документа ВЕТИС.
//   см. РасчетСтатусовОформленияВЕТИСПереопределяемый.ПриОпределенииИменРеквизитовДокументаДляРасчетаСтатусаОформленияДокументаВЕТИС.
//
Процедура ПриОпределенииРеквизитовОснованияДляВЕТИС(МетаданныеДокументаОснования, МетаданныеДокументаВЕТИС, Реквизиты) Экспорт
	
	// Зададим имена реквизитов по умолчанию.
	Реквизиты.Контрагент                        = "Организация";
	Реквизиты.ТорговыйИлиПроизводственныйОбъект = "Склад";
	
	// Определим имя реквизита "Ответственный".
	Если МетаданныеДокументаОснования.Реквизиты.Найти("Менеджер") <> Неопределено Тогда
		Реквизиты.Ответственный = "Менеджер";
	Иначе
		Реквизиты.Ответственный = "Ответственный";
	КонецЕсли;
	
	// Уточним имена реквизитов для конкретных документов.
	Если МетаданныеДокументаОснования = Метаданные.Документы.ВнутреннееПотребление Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			
			Реквизиты.Контрагент = "Организация";
			
		ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			
			Реквизиты.Контрагент = "ОрганизацияПолучатель";
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВыкупПринятыхНаХранениеТоваров Тогда
		
		Реквизиты.ТорговыйИлиПроизводственныйОбъект = "Товары.Склад, Товары.Подразделение";
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОприходованиеИзлишковТоваров Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			
			Реквизиты.Контрагент = "Организация";
			
		ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			
			Реквизиты.Контрагент = "ОрганизацияПолучатель";
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПеремещениеТоваров Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			
			Реквизиты.Контрагент = "Организация";
			Реквизиты.ТорговыйИлиПроизводственныйОбъект = "СкладОтправитель";
			
		ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			
			Реквизиты.Контрагент = "ОрганизацияПолучатель";
			Реквизиты.ТорговыйИлиПроизводственныйОбъект = "СкладПолучатель";
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПересортицаТоваров Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПорчаТоваров Тогда
		
		Реквизиты.Ответственный = "Ответственный";
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.РеализацияТоваровУслуг Тогда
		
		Реквизиты.Ответственный = "Менеджер";
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СборкаТоваров Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СписаниеНедостачТоваров Тогда
		
		Реквизиты.Ответственный = "Ответственный";
	
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить текст запроса выборки данных из документов-основания для расчета статуса оформления.
//   см. РасчетСтатусовОформленияВЕТИСПереопределяемый.ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокументаВЕТИС
//
Процедура ПриОпределенииЗапросаДляВЕТИС(
			МетаданныеДокументаОснования, МетаданныеДокументаВЕТИС, ТекстЗапроса, ДополнительныеПараметрыЗапроса) Экспорт
	
	ТоварыПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
	ТоварыРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента();
	ТабличныеЧастиДокумента = Новый Массив;
	ОтборНоменклатуры =
		"(СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
		|		ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС))";
	Если МетаданныеДокументаОснования = Метаданные.Документы.ВнутреннееПотребление Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
		

	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			// не формируем - будет получен через обмен
		ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВыкупПринятыхНаХранениеТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровОтКлиента Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			
			ТоварыПриход.ИмяПоляНоменклатураТЧТовары   = "ВЫБОР КОГДА ТаблицаТовары.НоменклатураОприходование = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА ТаблицаТовары.Номенклатура ИНАЧЕ ТаблицаТовары.НоменклатураОприходование КОНЕЦ";
			ТоварыПриход.ИмяПоляХарактеристикаТЧТовары = "ВЫБОР КОГДА ТаблицаТовары.НоменклатураОприходование = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА ТаблицаТовары.Характеристика ИНАЧЕ ТаблицаТовары.ХарактеристикаОприходование КОНЕЦ";
			
			ТоварыПриход.ИмяПоляНоменклатураТЧСерии   = "ВЫБОР КОГДА ТаблицаСерии.НоменклатураОприходование = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА ТаблицаСерии.Номенклатура ИНАЧЕ ТаблицаСерии.НоменклатураОприходование КОНЕЦ";
			ТоварыПриход.ИмяПоляХарактеристикаТЧСерии = "ВЫБОР КОГДА ТаблицаСерии.НоменклатураОприходование = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА ТаблицаСерии.Характеристика ИНАЧЕ ТаблицаСерии.ХарактеристикаОприходование КОНЕЦ";;
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровПоставщику Тогда
		
		ТоварыРасход.ДопОтборы_Общие =
			СтрШаблон("И Не %1", КонтрагентФизЛицо());
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОприходованиеИзлишковТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОтгрузкаТоваровСХранения Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
		КонецЕсли;


	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			// не формируем - будет получен через обмен
		ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПеремещениеТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			// не формируем - будет получен через обмен
		ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			ДоработатьУсловиеБезПеремещенияВЕТИС(ТоварыРасход, МетаданныеДокументаОснования);
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПересортицаТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
			
			// Товары - приход и расход в одной ТЧ
			ТоварыПриход.ИмяПоляНоменклатураТЧТовары   = "ТаблицаТовары.НоменклатураОприходование";
			ТоварыПриход.ИмяПоляХарактеристикаТЧТовары = "ТаблицаТовары.ХарактеристикаОприходование";
			ТоварыПриход.ИмяПоляСерияТЧТовары          = "ТаблицаТовары.СерияОприходование";
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыПриход);
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПорчаТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
			// Товары - приход и расход в одной ТЧ
			ТоварыПриход.ИмяПоляНоменклатураТЧТовары   = "ТаблицаТовары.НоменклатураОприходование";
			ТоварыПриход.ИмяПоляХарактеристикаТЧТовары = "ТаблицаТовары.ХарактеристикаОприходование";
			ТоварыПриход.ИмяПоляСерияТЧТовары          = "ТаблицаТовары.Серия";
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыПриход);
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			
		КонецЕсли;
		


	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПриемкаТоваровНаХранение Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПриобретениеТоваровУслуг Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			
			ТоварыПриход.ДопОтборы_Общие = ТоварыПриход.ДопОтборы_Общие + "
			|И ТаблицаДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)";
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПрочееОприходованиеТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
			ТоварыПриход.ДопОтборы_Общие = "И ТаблицаДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеИзПроизводства)";
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
		КонецЕсли;
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
			ТоварыПриход.ДопОтборы_Общие = "И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеИзПроизводства)";
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.РеализацияТоваровУслуг Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			
			ТоварыРасход.ДопОтборы_Общие = СтрШаблон(
				"И ТаблицаДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
				|И Не %1", КонтрагентФизЛицо());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СборкаТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
			
			// Номенклатура в шапке при сборке (приход)
			НоменклатураПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента("", "Серии");
			НоменклатураПриход.ПостфиксВременнойТаблицы = "Приход";
			НоменклатураПриход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)";
			
			// Номенклатура в шапке при разборке (расход)
			НоменклатураРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента("", "Серии");
			НоменклатураРасход.ПостфиксВременнойТаблицы = "Расход";
			НоменклатураРасход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)";
			
			// Товары при разборке (приход)
			ТоварыПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента("Товары", "Серии");
			ТоварыПриход.ПостфиксВременнойТаблицы = "Приход";
			ТоварыПриход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)";
		
			// Товары при сборке (расход)
			ТоварыРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента("Товары", "Серии");
			ТоварыРасход.ПостфиксВременнойТаблицы = "Расход";
			ТоварыРасход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)";
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(НоменклатураПриход);
			ТабличныеЧастиДокумента.Добавить(НоменклатураРасход);
			ТабличныеЧастиДокумента.Добавить(ТоварыПриход);
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СписаниеНедостачТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИСМП

//Позволяет переопределить имена реквизитов документа-основания для документа ИСМП.
//   См. РасчетСтатусовОформленияИСМППереопределяемый.ПриОпределенииИменРеквизитовДляРасчетаСтатусаОформления
//
Процедура ПриОпределенииРеквизитовОснованияДляИСМП(МетаданныеДокументаОснования, МетаданныеДокументаИСМП, Реквизиты) Экспорт
	
	// Зададим имена реквизитов по умолчанию.
	Если МетаданныеДокументаОснования = Метаданные.Документы.ПересчетТоваров Тогда
		Реквизиты.Контрагент = "";
	КонецЕсли;
	
	// Определим имя реквизита "Ответственный".
	Если МетаданныеДокументаОснования.Реквизиты.Найти("Менеджер") <> Неопределено Тогда
		Реквизиты.Ответственный = "Менеджер";
	ИначеЕсли МетаданныеДокументаОснования.Реквизиты.Найти("Кассир") <> Неопределено Тогда
		Реквизиты.Ответственный = "Кассир";
	Иначе
		Реквизиты.Ответственный = "Ответственный";
	КонецЕсли;
	
КонецПроцедуры

//Позволяет переопределить текст запроса выборки данных из документов-оснований для расчета статуса оформления.
//   См. РасчетСтатусовОформленияИСМППереопределяемый.ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокумента
//
Процедура ПриОпределенииЗапросаДляИСМП(
			МетаданныеДокументаОснования, МетаданныеДокументаИСМП, ТекстЗапроса, ДополнительныеПараметрыЗапроса) Экспорт
	
	ТоварыПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
	
	УчитываемыеВидыПродукции = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	ПродукцияИзНатуральногоМехаИспользуетсяВОтгрузке = Ложь;
	
	ЭлементыОтборНоменклатуры = Новый Массив;
	ЭлементыОтборНоменклатуры.Добавить("
		|ЛОЖЬ");
	Для Каждого ВидПродукцииИСМП Из УчитываемыеВидыПродукции Цикл
		Если ВидПродукцииИСМП = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
			ПродукцияИзНатуральногоМехаИспользуетсяВОтгрузке = Истина;
		КонецЕсли;
		ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИСМП);
		ЭлементыОтборНоменклатуры.Добавить(
			СтрШаблон("
				|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.%1)", XMLСтрока(ОсобенностьУчета)));
	КонецЦикла;
	ЭлементыОтборНоменклатуры.Добавить("
		|ЛОЖЬ");
	
	ОтборНоменклатуры = СтрШаблон(
		"СправочникНоменклатура.ОсобенностьУчета В(%1)",
		СтрСоединить(ЭлементыОтборНоменклатуры, ","));
	
	ОтборНоменклатуры = СтрЗаменить(ОтборНоменклатуры, "ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха),", "");
	
	ОтборНоменклатурыНеВЕТИС = СтрЗаменить(ОтборНоменклатуры, "ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС),", "");
	
	ОтборНоменклатурыДляВыводаИзОборота = ОтборНоменклатуры;
	
	ОтборНоменклатурыДляОтгрузки = "ЛОЖЬ";
	//Отгрузка, ЕАЭС, 5 товарных групп. Прочая отгрузка выключена (кроме шуб).
	Если МетаданныеДокументаОснования = Метаданные.Документы.РеализацияТоваровУслуг
		Или МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровПоставщику Тогда
		
		ЭлементыОтборНоменклатуры.Очистить();
		ЭлементыОтборНоменклатуры.Добавить("
			|ЛОЖЬ");
		Для Каждого ВидПродукцииИСМП Из УчитываемыеВидыПродукции Цикл
			Если ВидПродукцииИСМП = Перечисления.ВидыПродукцииИС.Обувь
					Или ВидПродукцииИСМП = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность
					Или ВидПродукцииИСМП = Перечисления.ВидыПродукцииИС.Шины
					Или ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукцииИСМП) Тогда
				ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИСМП);
				ЭлементыОтборНоменклатуры.Добавить(СтрШаблон("
				|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.%1)", XMLСтрока(ОсобенностьУчета)));
			КонецЕсли;
		КонецЦикла;
		ОтборНоменклатурыДляОтгрузкиЕАЭС = СтрШаблон(
			"СправочникНоменклатура.ОсобенностьУчета В(%1)",
			СтрСоединить(ЭлементыОтборНоменклатуры, ","));
		ОтборНоменклатурыДляОтгрузки = СтрШаблон("
		|ВЫБОР
		|	КОГДА ТаблицаДокумента.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
		|		ТОГДА %1
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ", ОтборНоменклатурыДляОтгрузкиЕАЭС);
		
		ЭлементыОтборНоменклатуры.Очистить();
		ЭлементыОтборНоменклатуры.Добавить("
			|ЛОЖЬ");
		Для Каждого ВидПродукцииИСМП Из УчитываемыеВидыПродукции Цикл
			Если ВидПродукцииИСМП <> Перечисления.ВидыПродукцииИС.Обувь
					И ВидПродукцииИСМП <> Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность
					И ВидПродукцииИСМП <> Перечисления.ВидыПродукцииИС.Шины
					И Не ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукцииИСМП) Тогда
				ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИСМП);
				ЭлементыОтборНоменклатуры.Добавить(СтрШаблон("
				|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.%1)", XMLСтрока(ОсобенностьУчета)));
			КонецЕсли;
		КонецЦикла;
		ОтборНоменклатурыДляВыводаИзОборотаЕАЭС = СтрШаблон(
			"СправочникНоменклатура.ОсобенностьУчета В(%1)",
			СтрСоединить(ЭлементыОтборНоменклатуры, ","));
		ОтборНоменклатурыДляВыводаИзОборота = СтрШаблон("ВЫБОР
		|	КОГДА ТаблицаДокумента.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
		|			И ТаблицаДокумента.Контрагент.СтранаРегистрации.УчастникЕАЭС
		|		ТОГДА %1
		|		ИНАЧЕ %2
		|	КОНЕЦ", ОтборНоменклатурыДляВыводаИзОборотаЕАЭС, ОтборНоменклатуры);
	КонецЕсли;
	
	// Перемаркировка
	ЭлементыОтборНоменклатуры.Очистить();
	ЭлементыОтборНоменклатуры.Добавить("
		|ЛОЖЬ");
	Для Каждого ВидПродукцииИСМП Из УчитываемыеВидыПродукции Цикл
		Если ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитПеремаркировке(ВидПродукцииИСМП) Тогда
			ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИСМП);
			ЭлементыОтборНоменклатуры.Добавить(СтрШаблон("
			|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.%1)", XMLСтрока(ОсобенностьУчета)));
		КонецЕсли;
	КонецЦикла;
	ОтборНоменклатурыДляПеремаркировки = СтрШаблон(
		"СправочникНоменклатура.ОсобенностьУчета В(%1)",
		СтрСоединить(ЭлементыОтборНоменклатуры, ","));
	
	// Возврат в оборот
	ЭлементыОтборНоменклатуры.Очистить();
	ЭлементыОтборНоменклатуры.Добавить("
		|ЛОЖЬ");
	Для Каждого ВидПродукцииИСМП Из УчитываемыеВидыПродукции Цикл
		Если ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитВозвратуВОборот(ВидПродукцииИСМП) Тогда
			ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИСМП);
			ЭлементыОтборНоменклатуры.Добавить(СтрШаблон("
			|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.%1)", XMLСтрока(ОсобенностьУчета)));
		КонецЕсли;
	КонецЦикла;
	ОтборНоменклатурыВозвратаВОборот = СтрШаблон(
		"СправочникНоменклатура.ОсобенностьУчета В(%1)",
		СтрСоединить(ЭлементыОтборНоменклатуры, ","));
	
	ТабличныеЧастиДокумента = Новый Массив;
	
	Если МетаданныеДокументаОснования = Метаданные.Документы.ЗаказПоставщику Тогда
		
		// Товары - нет серий
		ТоварыПриход.ИмяПоляСерияТЧТовары = "Неопределено";
		ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1 И %2", ХозяйственнаяОперацияИмпорт(), ДокументПроведен());
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ Тогда
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыНеВЕТИС);
			ЗаменитьФасованнуюПродукциюКоличествомКодов(ТекстЗапроса);
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ЗаказНаСборку Тогда
		
		Сборка = "
		|ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)";
		
		ТоварыПриход.ИмяТабличнойЧастиТовары = "";
		ТоварыПриход.ИмяПоляСерияТЧТовары    = "Неопределено";
		ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1 И %2", ДокументПроведен(), Сборка);
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ Тогда
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыНеВЕТИС);
			ЗаменитьФасованнуюПродукциюКоличествомКодов(ТекстЗапроса);
		КонецЕсли;
	


	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПрочееОприходованиеТоваров Тогда
		Если МетаданныеДокументаИСМП = Метаданные.Документы.МаркировкаТоваровИСМП Тогда
			
			ДопСоединения = ДопСоединениеДокументЭтоАгрегацияНаборов("Документ.ПрочееОприходованиеТоваров.Товары");
			
			ТоварыПриход.ДопСоединения_Общие = ДопСоединения;
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1 И Не %2", ДокументПроведен(), Набор());
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыНеВЕТИС);
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СборкаТоваров Тогда
		
		Сборка = "
		|ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)";
		Разборка = "
		|ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)";
		
		ДопСоединения = ДопСоединениеДокументЭтоАгрегацияНаборов("Документ.СборкаТоваров");
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.МаркировкаТоваровИСМП Тогда
			
			// Номенклатура в шапке при сборке
			НоменклатураШапка = ШаблонОписанияПриходнойТабличнойЧастиДокумента("", "Серии");
			НоменклатураШапка.ДопСоединения_Общие = ДопСоединения;
			НоменклатураШапка.ПостфиксВременнойТаблицы = "Шапка";
			НоменклатураШапка.ДопОтборы_Общие = СтрШаблон("И %1 И %2 И Не %3",
				ДокументПроведен(), Сборка, Набор());
			
			// Номенклатура в табличной части при разборке или формировании набора
			НоменклатураТовары = ШаблонОписанияПриходнойТабличнойЧастиДокумента("Товары", "Серии");
			НоменклатураТовары.ДопСоединения_Общие = ДопСоединения;
			НоменклатураТовары.ПостфиксВременнойТаблицы = "Товары";
			НоменклатураТовары.ДопОтборы_Общие = СтрШаблон("И %1 И ((%2 И Не %3) Или (%4 И %3))",
				ДокументПроведен(), Разборка, Набор(), Сборка);
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(НоменклатураШапка);
			ТабличныеЧастиДокумента.Добавить(НоменклатураТовары);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатурыНеВЕТИС);
			
		КонецЕсли;
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ВыводИзОборотаИСМП Тогда
			
			// Номенклатура в шапке при разборке (кроме разборки набора)
			НоменклатураШапка = ШаблонОписанияПриходнойТабличнойЧастиДокумента("", "Серии");
			НоменклатураШапка.ДопСоединения_Общие = ДопСоединения;
			НоменклатураШапка.ПостфиксВременнойТаблицы = "Шапка";
			НоменклатураШапка.ДопОтборы_Общие = СтрШаблон("И %1 И %2 И Не %3",
				ДокументПроведен(), Разборка, Набор());
			
			// Номенклатура в табличной части при сборке (кроме формирования набора)
			НоменклатураТовары = ШаблонОписанияПриходнойТабличнойЧастиДокумента("Товары", "Серии");
			НоменклатураТовары.ДопСоединения_Общие = ДопСоединения;
			НоменклатураТовары.ПостфиксВременнойТаблицы = "Товары";
			НоменклатураТовары.ДопОтборы_Общие = СтрШаблон("И %1 И %2 И Не %3",
				ДокументПроведен(), Сборка, Набор());
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(НоменклатураШапка);
			ТабличныеЧастиДокумента.Добавить(НоменклатураТовары);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПриобретениеТоваровУслуг Тогда
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.МаркировкаТоваровИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И (%1 ИЛИ %2) И %3",
				ХозяйственнаяОперацияИмпорт(),
				КонтрагентФизЛицо(),
				ДокументПроведен());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыНеВЕТИС);
			
		ИначеЕсли МетаданныеДокументаИСМП = Метаданные.Документы.ПриемкаТоваровИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1", ДокументПроведен()) + "
			|И (ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА 
			|	ИЗ Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП ГДЕ ПриемкаТоваровИСМП.ДокументОснование = ТаблицаДокумента.Ссылка))";
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ЧекККМ Тогда
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ВыводИзОборотаИСМП Тогда
			
			ТоварыПриход.ИмяПоляНазначениеТЧТовары = "ТаблицаТовары.Помещение";
			ТоварыПриход.ИмяПоляНазначениеТЧСерии  = "Помещение";
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1", ДокументПроведен()) + "
			|И ТаблицаДокумента.КассаККМ В(ВЫБРАТЬ Касса Из РегистрСведений.КассыНеПередающиеДанныеВИСМП)";
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОтчетОРозничныхПродажах Тогда
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ВыводИзОборотаИСМП Тогда
			
			ТоварыПриход.ИмяПоляНазначениеТЧТовары = "ТаблицаТовары.Помещение";
			ТоварыПриход.ИмяПоляНазначениеТЧСерии  = "Помещение";
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1", ДокументПроведен()) + "
			|И ТаблицаДокумента.КассаККМ В(ВЫБРАТЬ Касса Из РегистрСведений.КассыНеПередающиеДанныеВИСМП)";
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.РеализацияТоваровУслуг Тогда
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ВыводИзОборотаИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И (НЕ %1 ИЛИ (%2 И %3) ИЛИ %6) И %4 И %5",
				КонтрагентФизЛицо(),
				КонтрагентФизЛицо(),
				"ТаблицаДокумента.Касса В(ВЫБРАТЬ Касса Из РегистрСведений.КассыНеПередающиеДанныеВИСМП)",
				ДокументПроведен(),
				"НЕ(1 В (ВЫБРАТЬ 1 Из РегистрСведений.ОбъектыУчетаДокументовЭДО КАК СостоянияЭД 
				|	ГДЕ СостоянияЭД.ОбъектУчета = ТаблицаДокумента.Ссылка 
				|	И СостоянияЭД.ЭлектронныйДокумент.СодержитМаркируемыеТовары))",
				"СправочникНоменклатура.ОсобенностьУчета В (
				|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС),
				|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС),
				|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода))");
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыДляВыводаИзОборота);
			
		ИначеЕсли МетаданныеДокументаИСМП = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1 И Не %2 И (%3 ИЛИ %4)И %5",
				"(СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха)
				|	ИЛИ ТаблицаДокумента.Контрагент.СтранаРегистрации.УчастникЕАЭС)",
				КонтрагентФизЛицо(),
				"НЕ(1 В (ВЫБРАТЬ 1 Из РегистрСведений.ОбъектыУчетаДокументовЭДО КАК СостоянияЭД 
				|	ГДЕ СостоянияЭД.ОбъектУчета = ТаблицаДокумента.Ссылка 
				|	И СостоянияЭД.ЭлектронныйДокумент.СодержитМаркируемыеТовары))",
				?(ПродукцияИзНатуральногоМехаИспользуетсяВОтгрузке,
					"СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха)",
					"ЛОЖЬ"),
				ДокументПроведен());
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыДляОтгрузки);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровПоставщику Тогда
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ВыводИзОборотаИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1",
				ДокументПроведен());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыДляВыводаИзОборота);
			
		ИначеЕсли МетаданныеДокументаИСМП = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1 И Не %2 И (%3 ИЛИ %4) И %5",
				"(СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха)
				|	ИЛИ ТаблицаДокумента.Контрагент.СтранаРегистрации.УчастникЕАЭС)",
				КонтрагентФизЛицо(),
				"НЕ(1 В (ВЫБРАТЬ 1 Из РегистрСведений.ОбъектыУчетаДокументовЭДО КАК СостоянияЭД 
				|	ГДЕ СостоянияЭД.ОбъектУчета = ТаблицаДокумента.Ссылка 
				|	И СостоянияЭД.ЭлектронныйДокумент.СодержитМаркируемыеТовары))",
				?(ПродукцияИзНатуральногоМехаИспользуетсяВОтгрузке,
					"СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха)",
					"ЛОЖЬ"),
				ДокументПроведен());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыДляОтгрузки);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.КорректировкаРеализации Тогда
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1", ДокументПроведен()) + "
				|И НЕ(1 В (ВЫБРАТЬ 1 Из РегистрСведений.ОбъектыУчетаДокументовЭДО КАК СостоянияЭД
				|	ГДЕ СостоянияЭД.ОбъектУчета = ТаблицаДокумента.Ссылка
				|	И СостоянияЭД.ЭлектронныйДокумент.СодержитМаркируемыеТовары))";
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыДляОтгрузки);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВнутреннееПотребление Тогда
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ВыводИзОборотаИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1", ДокументПроведен());
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СписаниеНедостачТоваров Тогда
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ВыводИзОборотаИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1", ДокументПроведен());
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОтчетОРозничныхВозвратах Тогда
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ПеремаркировкаТоваровИСМП Тогда

			ТоварыПриход.ИмяПоляНазначениеТЧТовары = "ТаблицаТовары.Помещение";
			ТоварыПриход.ИмяПоляНазначениеТЧСерии  = "Помещение";
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1 И Не %2",
				ДокументПроведен(),
				КассаБезИСМП());
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыДляПеремаркировки);
			
		ИначеЕсли МетаданныеДокументаИСМП = Метаданные.Документы.ВозвратВОборотИСМП Тогда
			
			ТоварыПриход.ИмяПоляНазначениеТЧТовары = "ТаблицаТовары.Помещение";
			ТоварыПриход.ИмяПоляНазначениеТЧСерии  = "Помещение";
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1 И %2",
				ДокументПроведен(),
				КассаБезИСМП());
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыВозвратаВОборот);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровОтКлиента Тогда
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ПеремаркировкаТоваровИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1",
				ДокументПроведен());
			
			ШтрихкодыУпаковок = ШаблонОписанияПриходнойТабличнойЧастиДокумента("ШтрихкодыУпаковок");
			ШтрихкодыУпаковок.Вставить("ИмяПоляНоменклатураТЧТовары",   "ТаблицаТовары.ШтрихкодУпаковки.Номенклатура");
			ШтрихкодыУпаковок.Вставить("ИмяПоляХарактеристикаТЧТовары", "ТаблицаТовары.ШтрихкодУпаковки.Характеристика");
			ШтрихкодыУпаковок.Вставить("ИмяПоляСерияТЧТовары",          "ТаблицаТовары.ШтрихкодУпаковки.Серия");
			ШтрихкодыУпаковок.Вставить("ИмяПоляКоличествоТЧТовары",     "-1");
			ШтрихкодыУпаковок.ДопОтборы_Общие = ТоварыПриход.ДопОтборы_Общие;
			ШтрихкодыУпаковок.ДопОтборы_ТаблицаТовары = "И ТаблицаТовары.ШтрихкодУпаковки.Количество < 2";
			
			ТабличныеЧастиДокумента.Добавить(ТоварыПриход);
			ТабличныеЧастиДокумента.Добавить(ШтрихкодыУпаковок);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатурыДляПеремаркировки);
		
		ИначеЕсли МетаданныеДокументаИСМП = Метаданные.Документы.ВозвратВОборотИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1",
				ДокументПроведен());
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыВозвратаВОборот);
			
		ИначеЕсли МетаданныеДокументаИСМП = Метаданные.Документы.ПриемкаТоваровИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И Не %1 И %2 И %3",
			КонтрагентФизЛицо(),
			"(ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА 
			|	ИЗ Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП ГДЕ ПриемкаТоваровИСМП.ДокументОснование = ТаблицаДокумента.Ссылка))",
			ДокументПроведен());
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1 И (%2 ИЛИ %3)",
				ДокументПроведен(),
				"НЕ(1 В (ВЫБРАТЬ 1 Из РегистрСведений.ОбъектыУчетаДокументовЭДО КАК СостоянияЭД 
				|	ГДЕ СостоянияЭД.ОбъектУчета = ТаблицаДокумента.Ссылка
				|	И СостоянияЭД.ЭлектронныйДокумент.СодержитМаркируемыеТовары))",
				?(ПродукцияИзНатуральногоМехаИспользуетсяВОтгрузке,
					"СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха)",
					"ЛОЖЬ"));
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыДляОтгрузки);
			
		ИначеЕсли МетаданныеДокументаИСМП = Метаданные.Документы.ПриемкаТоваровИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1", ДокументПроведен()) +"
			|И (ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА
			|	ИЗ Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП ГДЕ ПриемкаТоваровИСМП.ДокументОснование = ТаблицаДокумента.Ссылка))";
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыДляОтгрузки);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1 И (%2 ИЛИ %3)",
				ДокументПроведен(),
				"НЕ(1 В (ВЫБРАТЬ 1 Из РегистрСведений.ОбъектыУчетаДокументовЭДО КАК СостоянияЭД 
				|	ГДЕ СостоянияЭД.ОбъектУчета = ТаблицаДокумента.Ссылка
				|	И СостоянияЭД.ЭлектронныйДокумент.СодержитМаркируемыеТовары))",
				?(ПродукцияИзНатуральногоМехаИспользуетсяВОтгрузке,
					"СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха)",
					"ЛОЖЬ"));
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыДляОтгрузки);
			
		ИначеЕсли МетаданныеДокументаИСМП = Метаданные.Документы.ПриемкаТоваровИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1", ДокументПроведен()) + "
			|И (ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА
			|	ИЗ Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП ГДЕ ПриемкаТоваровИСМП.ДокументОснование = ТаблицаДокумента.Ссылка))";
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПеремещениеТоваров Тогда
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1 И (%2 ИЛИ %3) И %4",
				ДокументПроведен(),
				"НЕ(1 В (ВЫБРАТЬ 1 Из РегистрСведений.ОбъектыУчетаДокументовЭДО КАК СостоянияЭД 
				|	ГДЕ СостоянияЭД.ОбъектУчета = ТаблицаДокумента.Ссылка
				|	И СостоянияЭД.ЭлектронныйДокумент.СодержитМаркируемыеТовары))",
				?(ПродукцияИзНатуральногоМехаИспользуетсяВОтгрузке,
					"СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха)",
					"ЛОЖЬ"),
				"ТаблицаДокумента.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|	И ТаблицаДокумента.ОрганизацияПолучатель <> ТаблицаДокумента.Организация");
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыДляОтгрузки);
			
		ИначеЕсли МетаданныеДокументаИСМП = Метаданные.Документы.ПриемкаТоваровИСМП Тогда
			
			ТоварыПриход.ДопОтборы_Общие = СтрШаблон("И %1", ДокументПроведен()) + "
			|И ТаблицаДокумента.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|	И ТаблицаДокумента.ОрганизацияПолучатель <> ТаблицаДокумента.Организация
			|	И (ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА
			|	ИЗ Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП ГДЕ ПриемкаТоваровИСМП.ДокументОснование = ТаблицаДокумента.Ссылка))";
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЕГАИС

// Позволяет переопределить имена реквизитов документа-основания для документа ЕГАИС.
//   (см. РасчетСтатусовОформленияЕГАИСПереопределяемый.ПриОпределенииРеквизитовОснования).
//
Процедура ПриОпределенииРеквизитовОснованияДляЕГАИС(МетаданныеДокументаОснования, МетаданныеДокументаЕГАИС, Реквизиты) Экспорт
	
	// Определим имя реквизита "Ответственный".
	Если МетаданныеДокументаОснования.Реквизиты.Найти("Менеджер") <> Неопределено Тогда
		Реквизиты.Ответственный = "Менеджер";
	Иначе
		Реквизиты.Ответственный = "Ответственный";
	КонецЕсли;
	
	Если МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями
		Или МетаданныеДокументаОснования = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
			Реквизиты.Контрагент = "ОрганизацияПолучатель";
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПеремещениеТоваров Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
			Реквизиты.ТорговыйОбъект = "СкладПолучатель";
			Реквизиты.Контрагент = "ОрганизацияПолучатель";
		ИначеЕсли МетаданныеДокументаЕГАИС = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
			Реквизиты.ТорговыйОбъект = "СкладОтправитель";
		КонецЕсли;
		
		
		
	КонецЕсли;
	
КонецПроцедуры

//Позволяет переопределить текст запроса выборки данных из документов-оснований для расчета статуса оформления.
//   См. РасчетСтатусовОформленияЕГАИСПереопределяемый.ПриОпределенииЗапросаТоварыДокументаОснования
//
Процедура ПриОпределенииЗапросаДляЕГАИС(
	МетаданныеДокументаОснования, МетаданныеДокументаЕГАИС, ТекстЗапроса, ДополнительныеПараметрыЗапроса) Экспорт
	
	ТоварыПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
	ТоварыРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента();
	ТабличныеЧастиДокумента = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		ОтборНоменклатуры = "СправочникНоменклатура.ОсобенностьУчета В (
		|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция),
		|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво))
		|	И НЕ СправочникНоменклатура.АлкогольнаяПродукцияВоВскрытойТаре";
	Иначе
		ОтборНоменклатуры = "ЛОЖЬ";
	КонецЕсли;
	ОтборНоменклатурыТолькоМаркируемая = ОтборНоменклатуры + "
	|	И СправочникНоменклатура.ВидАлкогольнойПродукции.Маркируемый";
	ОтборНоменклатурыТолькоНемаркируемая = ОтборНоменклатуры + "
	|	И НЕ СправочникНоменклатура.ВидАлкогольнойПродукции.Маркируемый";
	ОтборНоменклатурыТолькоПиво = "СправочникНоменклатура.ОсобенностьУчета = 
		|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво)";
	
	Если МетаданныеДокументаОснования = Метаданные.Документы.ВнутреннееПотребление Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.ЧекЕГАИС Тогда
			
			ТоварыРасход.ДопОтборы_Общие = ТоварыРасход.ДопОтборы_Общие +"
				|И ТаблицаДокумента.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)";
			
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			ТабличныеЧастиДокумента.Добавить(ШаблонОписанияСвязанныеДокументы("АктСписанияЕГАИС"));
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатурыТолькоМаркируемая);
			ДополнительныеПараметрыЗапроса.Вставить("КонечныеСтатусыАктСписанияЕГАИС",Документы.АктСписанияЕГАИС.КонечныеСтатусы());
			
		ИначеЕсли МетаданныеДокументаЕГАИС = Метаданные.Документы.АктСписанияЕГАИС Тогда
			
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			ТабличныеЧастиДокумента.Добавить(ШаблонОписанияСвязанныеДокументы("ЧекЕГАИС"));
			ДополнительныеПараметрыЗапроса.Вставить("КонечныеСтатусыЧекЕГАИС",Документы.ЧекЕГАИС.КонечныеСтатусы());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОтчетОРозничныхПродажах Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.АктСписанияЕГАИС Тогда
			
			ТоварыРасход.ИмяПоляНазначениеТЧТовары = "ТаблицаТовары.Помещение";
			ТоварыРасход.ИмяПоляНазначениеТЧСерии  = "Помещение";
			Если Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности.Получить() >= ТекущаяДатаСеанса() Тогда
				ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			Иначе
				ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатурыТолькоНемаркируемая);
			КонецЕсли;
		
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
			// не формируем - будет получен через обмен
		ИначеЕсли МетаданныеДокументаЕГАИС = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровОтКлиента Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.ЧекЕГАИСВозврат Тогда
			
			ТоварыПриход.ИмяПоляНоменклатураТЧТовары   = "ВЫБОР КОГДА ТаблицаТовары.НоменклатураОприходование = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА ТаблицаТовары.Номенклатура ИНАЧЕ ТаблицаТовары.НоменклатураОприходование КОНЕЦ";
			ТоварыПриход.ИмяПоляХарактеристикаТЧТовары = "ВЫБОР КОГДА ТаблицаТовары.НоменклатураОприходование = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА ТаблицаТовары.Характеристика ИНАЧЕ ТаблицаТовары.ХарактеристикаОприходование КОНЕЦ";
			
			ТоварыПриход.ИмяПоляНоменклатураТЧСерии   = "ВЫБОР КОГДА ТаблицаСерии.НоменклатураОприходование = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА ТаблицаСерии.Номенклатура ИНАЧЕ ТаблицаСерии.НоменклатураОприходование КОНЕЦ";
			ТоварыПриход.ИмяПоляХарактеристикаТЧСерии = "ВЫБОР КОГДА ТаблицаСерии.НоменклатураОприходование = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА ТаблицаСерии.Характеристика ИНАЧЕ ТаблицаСерии.ХарактеристикаОприходование КОНЕЦ";;
			
			ТоварыПриход.ДопОтборы_Общие = ТоварыПриход.ДопОтборы_Общие + "
			|И ТаблицаДокумента.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)";
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатурыТолькоМаркируемая);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОтчетОРозничныхВозвратах Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.ЧекЕГАИСВозврат Тогда
			
			ТоварыРасход.ИмяПоляНазначениеТЧТовары = "ТаблицаТовары.Помещение";
			ТоварыРасход.ИмяПоляНазначениеТЧСерии  = "Помещение";
			Если Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности.Получить() >= ТекущаяДатаСеанса() Тогда
				ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			Иначе
				ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатурыТолькоНемаркируемая);
			КонецЕсли;
		
		КонецЕсли;
				
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровПоставщику Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОприходованиеИзлишковТоваров Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.АктПостановкиНаБалансЕГАИС Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
			// не формируем - будет получен через обмен
		ИначеЕсли МетаданныеДокументаЕГАИС = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПеремещениеТоваров Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
			// не формируем - будет получен через обмен
		ИначеЕсли МетаданныеДокументаЕГАИС = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПересортицаТоваров Тогда
		
		// Товары - приход и расход в одной ТЧ
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.АктПостановкиНаБалансЕГАИС Тогда
			
			ТоварыПриход.ИмяПоляНоменклатураТЧТовары   = "ТаблицаТовары.НоменклатураОприходование";
			ТоварыПриход.ИмяПоляХарактеристикаТЧТовары = "ТаблицаТовары.ХарактеристикаОприходование";
			ТоварыПриход.ИмяПоляСерияТЧТовары          = "ТаблицаТовары.СерияОприходование";
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		ИначеЕсли МетаданныеДокументаЕГАИС = Метаданные.Документы.АктСписанияЕГАИС Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПриобретениеТоваровУслуг Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.РеализацияТоваровУслуг Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
			
			ТоварыРасход.ДопОтборы_Общие = ТоварыРасход.ДопОтборы_Общие + "
			|И ТаблицаДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)";
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			ТабличныеЧастиДокумента.Добавить(ШаблонОписанияСвязанныеДокументы("ЧекЕГАИС"));
			ТабличныеЧастиДокумента.Добавить(ШаблонОписанияСвязанныеДокументы("АктСписанияЕГАИС"));
			ДополнительныеПараметрыЗапроса.Вставить("КонечныеСтатусыЧекЕГАИС",Документы.ЧекЕГАИС.КонечныеСтатусы());
			ДополнительныеПараметрыЗапроса.Вставить("КонечныеСтатусыАктСписанияЕГАИС",Документы.АктСписанияЕГАИС.КонечныеСтатусы());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			
		ИначеЕсли МетаданныеДокументаЕГАИС = Метаданные.Документы.ЧекЕГАИС Тогда
			
			ТоварыРасход.ДопОтборы_Общие = ТоварыРасход.ДопОтборы_Общие + "
			|И ТаблицаДокумента.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)";
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			ТабличныеЧастиДокумента.Добавить(ШаблонОписанияСвязанныеДокументы("ТТНИсходящаяЕГАИС"));
			ДополнительныеПараметрыЗапроса.Вставить("КонечныеСтатусыТТНИсходящаяЕГАИС",Документы.ТТНИсходящаяЕГАИС.КонечныеСтатусы());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатурыТолькоМаркируемая);
			
		ИначеЕсли МетаданныеДокументаЕГАИС = Метаданные.Документы.АктСписанияЕГАИС Тогда
			
			ТоварыРасход.ДопОтборы_Общие = ТоварыРасход.ДопОтборы_Общие + "
			|И ТаблицаДокумента.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)";
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			ТабличныеЧастиДокумента.Добавить(ШаблонОписанияСвязанныеДокументы("ТТНИсходящаяЕГАИС"));
			ДополнительныеПараметрыЗапроса.Вставить("КонечныеСтатусыТТНИсходящаяЕГАИС",Документы.ТТНИсходящаяЕГАИС.КонечныеСтатусы());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатурыТолькоНемаркируемая);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СборкаТоваров Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.АктСписанияЕГАИС Тогда
			
			// Номенклатура в шапке при разборке (расход)
			НоменклатураРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента("", "Серии");
			НоменклатураРасход.ДопОтборы_Общие = ТоварыРасход.ДопОтборы_Общие;
			НоменклатураРасход.ДопСоединения_Общие = ТоварыРасход.ДопСоединения_Общие;
			
			НоменклатураРасход.ДопОтборы_Общие = НоменклатураРасход.ДопОтборы_Общие + "
			|И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)";
				
			СвязанныеДокументыОтчетОПроизводствеСырье = ШаблонОписанияСвязанныеДокументы("ОтчетОПроизводствеЕГАИС",, "Сырье");
			СвязанныеДокументыОтчетОПроизводствеСырье.ДопОтборы_Общие = СвязанныеДокументыОтчетОПроизводствеСырье.ДопОтборы_Общие 
				+ "И ТаблицаТовары.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)";
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(НоменклатураРасход);
			ТабличныеЧастиДокумента.Добавить(ШаблонОписанияСвязанныеДокументы("ЧекЕГАИС"));
			ТабличныеЧастиДокумента.Добавить(СвязанныеДокументыОтчетОПроизводствеСырье);
			
			ДополнительныеПараметрыЗапроса.Вставить("КонечныеСтатусыЧекЕГАИС", Документы.ЧекЕГАИС.КонечныеСтатусы());
			ДополнительныеПараметрыЗапроса.Вставить("КонечныеСтатусыОтчетОПроизводствеЕГАИС", Документы.ОтчетОПроизводствеЕГАИС.КонечныеСтатусы());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			ДополнитьТекстЗапросаСвернутьДанныеТоваровДляОформления(ТекстЗапроса);
		
		ИначеЕсли МетаданныеДокументаЕГАИС = Метаданные.Документы.ЧекЕГАИС Тогда
			
			// Номенклатура в шапке при разборке (расход)
			НоменклатураРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента("", "Серии");
			НоменклатураРасход.ДопОтборы_Общие = ТоварыРасход.ДопОтборы_Общие;
			НоменклатураРасход.ДопСоединения_Общие = ТоварыРасход.ДопСоединения_Общие;
			
			НоменклатураРасход.ДопОтборы_Общие = НоменклатураРасход.ДопОтборы_Общие + "
			|И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
			|И ТаблицаДокумента.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)";
				
			СвязанныеДокументыОтчетОПроизводствеСырье = ШаблонОписанияСвязанныеДокументы("ОтчетОПроизводствеЕГАИС",, "Сырье");
			СвязанныеДокументыОтчетОПроизводствеСырье.ДопОтборы_Общие = СвязанныеДокументыОтчетОПроизводствеСырье.ДопОтборы_Общие 
				+ "И ТаблицаТовары.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров) 
				  |И ТаблицаДокумента.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)";
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(НоменклатураРасход);
			ТабличныеЧастиДокумента.Добавить(ШаблонОписанияСвязанныеДокументы("АктСписанияЕГАИС"));
			ТабличныеЧастиДокумента.Добавить(СвязанныеДокументыОтчетОПроизводствеСырье);
			
			ДополнительныеПараметрыЗапроса.Вставить("КонечныеСтатусыАктСписанияЕГАИС", Документы.АктСписанияЕГАИС.КонечныеСтатусы());
			ДополнительныеПараметрыЗапроса.Вставить("КонечныеСтатусыОтчетОПроизводствеЕГАИС", Документы.ОтчетОПроизводствеЕГАИС.КонечныеСтатусы());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатурыТолькоМаркируемая);
			ДополнитьТекстЗапросаСвернутьДанныеТоваровДляОформления(ТекстЗапроса);
			
		ИначеЕсли МетаданныеДокументаЕГАИС = Метаданные.Документы.ОтчетОПроизводствеЕГАИС Тогда
			
			// Номенклатура в шапке при сборке (приход)
			НоменклатураПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента("", "Серии");
			НоменклатураПриход.ПостфиксВременнойТаблицы = "Приход";
			НоменклатураПриход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)";
			
			// Номенклатура в шапке при разборке (расход)
			НоменклатураРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента("", "Серии");
			НоменклатураРасход.ПостфиксВременнойТаблицы = "Расход";
			НоменклатураРасход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)";
			
			// Товары при разборке (приход)
			ТоварыПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента("Товары", "Серии");
			ТоварыПриход.ПостфиксВременнойТаблицы = "Приход";
			ТоварыПриход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)";
		
			// Товары при сборке (расход)
			ТоварыРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента("Товары", "Серии");
			ТоварыРасход.ПостфиксВременнойТаблицы = "Расход";
			ТоварыРасход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)";
					
			СвязанныеДокументыСписатьТоварыПоЧекуЕГАИС = ШаблонОписанияСвязанныеДокументы("ЧекЕГАИС", Истина);
			СвязанныеДокументыСписатьТоварыПоЧекуЕГАИС.ИмяПоляНоменклатураТЧТовары   = "ТаблицаТовары.Номенклатура";
			СвязанныеДокументыСписатьТоварыПоЧекуЕГАИС.ИмяПоляХарактеристикаТЧТовары = "ТаблицаТовары.Характеристика";
			СвязанныеДокументыСписатьТоварыПоЧекуЕГАИС.ИмяПоляСерияТЧТовары          = "ТаблицаТовары.Серия";
			СвязанныеДокументыСписатьТоварыПоЧекуЕГАИС.ИмяПоляКоличествоТЧТовары     = "-ТаблицаТовары.Количество";
			СвязанныеДокументыСписатьТоварыПоЧекуЕГАИС.ИмяТабличнойЧастиТовары       = "Товары";
			
			СвязанныеДокументыСписатьТоварыПоЧекуЕГАИС.ДопСоединения_Общие = 
				СтрЗаменить(СвязанныеДокументыСписатьТоварыПоЧекуЕГАИС.ДопСоединения_Общие, "Документ.ЧекЕГАИС.Товары", "Документ.ЧекЕГАИС");
				
			СвязанныеДокументыСписатьТоварыПоЧекуЕГАИС.ДопОтборы_Общие = СвязанныеДокументыСписатьТоварыПоЧекуЕГАИС.ДопОтборы_Общие 
				+ "И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)";	
				
			СвязанныеДокументыСписатьТоварыПоАктуСписанияЕГАИС = ШаблонОписанияСвязанныеДокументы("АктСписанияЕГАИС", Истина);
			СвязанныеДокументыСписатьТоварыПоАктуСписанияЕГАИС.ИмяПоляНоменклатураТЧТовары   = "ТаблицаТовары.Номенклатура";
			СвязанныеДокументыСписатьТоварыПоАктуСписанияЕГАИС.ИмяПоляХарактеристикаТЧТовары = "ТаблицаТовары.Характеристика";
			СвязанныеДокументыСписатьТоварыПоАктуСписанияЕГАИС.ИмяПоляСерияТЧТовары          = "ТаблицаТовары.Серия";
			СвязанныеДокументыСписатьТоварыПоАктуСписанияЕГАИС.ИмяПоляКоличествоТЧТовары     = "-ТаблицаТовары.Количество";
			СвязанныеДокументыСписатьТоварыПоАктуСписанияЕГАИС.ИмяТабличнойЧастиТовары       = "Товары";
			
			СвязанныеДокументыСписатьТоварыПоАктуСписанияЕГАИС.ДопСоединения_Общие = 
				СтрЗаменить(СвязанныеДокументыСписатьТоварыПоАктуСписанияЕГАИС.ДопСоединения_Общие, "Документ.АктСписанияЕГАИС.Товары", "Документ.АктСписанияЕГАИС");	
				
			СвязанныеДокументыСписатьТоварыПоАктуСписанияЕГАИС.ДопОтборы_Общие = СвязанныеДокументыСписатьТоварыПоАктуСписанияЕГАИС.ДопОтборы_Общие 
				+ "И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)";			
					
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(НоменклатураПриход);
			ТабличныеЧастиДокумента.Добавить(НоменклатураРасход);
			ТабличныеЧастиДокумента.Добавить(ТоварыПриход);
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			
			ТабличныеЧастиДокумента.Добавить(ШаблонОписанияСвязанныеДокументы("ЧекЕГАИС"));
			ТабличныеЧастиДокумента.Добавить(ШаблонОписанияСвязанныеДокументы("АктСписанияЕГАИС"));
			ТабличныеЧастиДокумента.Добавить(СвязанныеДокументыСписатьТоварыПоЧекуЕГАИС);
			ТабличныеЧастиДокумента.Добавить(СвязанныеДокументыСписатьТоварыПоАктуСписанияЕГАИС);
		
			ДополнительныеПараметрыЗапроса.Вставить("КонечныеСтатусыЧекЕГАИС", Документы.ЧекЕГАИС.КонечныеСтатусы());
			ДополнительныеПараметрыЗапроса.Вставить("КонечныеСтатусыАктСписанияЕГАИС", Документы.АктСписанияЕГАИС.КонечныеСтатусы());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатурыТолькоПиво);	
			ДополнитьТекстЗапросаОтборПоНаличиюТоваровДляФормированияОтчетаПроизводства(ТекстЗапроса, МетаданныеДокументаОснования, "ВременнаяТаблицаПроверкиНеобходимостиСоздания");
			ДополнитьТекстЗапросаСвернутьДанныеТоваровДляОформления(ТекстЗапроса, "ВременнаяТаблицаПроверкиНеобходимостиСоздания");
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СписаниеНедостачТоваров Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.АктСписанияЕГАИС Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ЗаказПоставщику Тогда
		
		Если МетаданныеДокументаЕГАИС = Метаданные.Документы.УведомлениеОПланируемомИмпортеЕГАИС Тогда
			
			// Закупка по импорту
			ТоварыПоИмпорту = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
			ТоварыПоИмпорту.ИмяПоляСерияТЧТовары   = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
			ТоварыПоИмпорту.ДопОтборы_Общие        = "И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)";
			
			// Закупка в странах ЕАЭС
			ТоварыВСтранахЕАЭС = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
			ТоварыВСтранахЕАЭС.ИмяПоляСерияТЧТовары   = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
			ТоварыВСтранахЕАЭС.ДопОтборы_Общие        = "И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)";
			
			// Закупка по импорту Товары в пути
			ТоварыПоИмпортуТоварыВПути = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
			ТоварыПоИмпортуТоварыВПути.ИмяПоляСерияТЧТовары   = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
			ТоварыПоИмпортуТоварыВПути.ДопОтборы_Общие        = "И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути)";
			
			// Закупка в странах ЕАЭС Товары в пути
			ТоварыВСтранахЕАЭСТоварыВПути = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
			ТоварыВСтранахЕАЭСТоварыВПути.ИмяПоляСерияТЧТовары   = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
			ТоварыВСтранахЕАЭСТоварыВПути.ДопОтборы_Общие        = "И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути)";	 
			
			ТабличныеЧастиДокумента.Добавить(ТоварыПоИмпорту);
			ТабличныеЧастиДокумента.Добавить(ТоварыВСтранахЕАЭС);
			ТабличныеЧастиДокумента.Добавить(ТоварыПоИмпортуТоварыВПути);
			ТабличныеЧастиДокумента.Добавить(ТоварыВСтранахЕАЭСТоварыВПути);
				
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
		
		КонецЕсли;
		
		
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗЕРНО
// Позволяет переопределить имена реквизитов документа-основания для документа ЗЕРНО.
//   см. РасчетСтатусовОформленияЗЕРНОПереопределяемый.ПриОпределенииИменРеквизитовДляРасчетаСтатусаОформления.
//
Процедура ПриОпределенииРеквизитовОснованияДляЗЕРНО(МетаданныеДокументаОснования, МетаданныеДокументаЗЕРНО, Реквизиты) Экспорт
	
	// Зададим имена реквизитов по умолчанию.
	Если МетаданныеДокументаОснования.Реквизиты.Найти("Организация") <> Неопределено Тогда
		Реквизиты.Контрагент                        = "Организация";
	КонецЕсли;
	
	// Определим имя реквизита "Ответственный".
	Если МетаданныеДокументаОснования.Реквизиты.Найти("Менеджер") <> Неопределено Тогда
		Реквизиты.Ответственный = "Менеджер";
	ИначеЕсли МетаданныеДокументаОснования.Реквизиты.Найти("Ответственный") <> Неопределено Тогда
		Реквизиты.Ответственный = "Ответственный";
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить текст запроса выборки данных из документов-основания для расчета статуса оформления.
//   см. РасчетСтатусовОформленияЗЕРНОПереопределяемый.ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформления
//
Процедура ПриОпределенииЗапросаДляЗЕРНО(
			МетаданныеДокументаОснования, МетаданныеДокументаЗЕРНО, ТекстЗапроса, ДополнительныеПараметрыЗапроса) Экспорт
	
	ТоварыПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
	ТоварыРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента();
	ТабличныеЧастиДокумента = Новый Массив;
	ОтборНоменклатуры =
		"(СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Зерно)
		|		ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗерна))";
	Если МетаданныеДокументаОснования = Метаданные.Документы.ОприходованиеИзлишковТоваров Тогда
			
		ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПрочееОприходованиеТоваров Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ФормированиеПартийЗЕРНО Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
			
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ВнесениеСведенийОСобранномУрожаеЗЕРНО Тогда
			
			ОтборНоменклатуры = "СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Зерно)";
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
			
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПересортицаТоваров Тогда
			
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ФормированиеПартийЗЕРНО Тогда
			
			// Товары - приход и расход в одной ТЧ
			ТоварыПриход.ИмяПоляНоменклатураТЧТовары   = "ТаблицаТовары.НоменклатураОприходование";
			ТоварыПриход.ИмяПоляХарактеристикаТЧТовары = "ТаблицаТовары.ХарактеристикаОприходование";
			ТоварыПриход.ИмяПоляСерияТЧТовары          = "ТаблицаТовары.СерияОприходование";
				
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		ИначеЕсли МетаданныеДокументаЗЕРНО = Метаданные.Документы.СписаниеПартийЗЕРНО Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПересортицаТоваровУХранителя Тогда
			
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ФормированиеПартийЗЕРНО Тогда	
			
			// Товары - приход и расход в одной ТЧ
			ТоварыПриход.ИмяПоляНоменклатураТЧТовары   = "ТаблицаТовары.НоменклатураОприходование";
			ТоварыПриход.ИмяПоляХарактеристикаТЧТовары = "ТаблицаТовары.ХарактеристикаОприходование";
			ТоварыПриход.ИмяПоляСерияТЧТовары          = "ТаблицаТовары.СерияОприходование";
				
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		ИначеЕсли МетаданныеДокументаЗЕРНО = Метаданные.Документы.СписаниеПартийЗЕРНО Тогда

			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПорчаТоваров Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ФормированиеПартийЗЕРНО Тогда
			
			// Товары - приход и расход в одной ТЧ
			ТоварыПриход.ИмяПоляНоменклатураТЧТовары   = "ТаблицаТовары.НоменклатураОприходование";
			ТоварыПриход.ИмяПоляХарактеристикаТЧТовары = "ТаблицаТовары.ХарактеристикаОприходование";
			ТоварыПриход.ИмяПоляСерияТЧТовары          = "ТаблицаТовары.Серия";
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
		
		ИначеЕсли МетаданныеДокументаЗЕРНО = Метаданные.Документы.СписаниеПартийЗЕРНО Тогда
		
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПорчаТоваровУХранителя Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.СписаниеПартийЗЕРНО Тогда
		
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
		
		ИначеЕсли МетаданныеДокументаЗЕРНО = Метаданные.Документы.ФормированиеПартийЗЕРНО Тогда
		
			ТоварыПриход.ИмяПоляНоменклатураТЧТовары   = "ТаблицаТовары.НоменклатураОприходование";
			ТоварыПриход.ИмяПоляХарактеристикаТЧТовары = "ТаблицаТовары.ХарактеристикаОприходование";
			ТоварыПриход.ИмяПоляСерияТЧТовары          = "ТаблицаТовары.Серия";
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыПриход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СписаниеНедостачТоваров Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.СписаниеПартийЗЕРНО Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;	
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВнутреннееПотребление Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.СписаниеПартийЗЕРНО Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОтчетОСписанииТоваровУХранителя Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.СписаниеПартийЗЕРНО Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.РеализацияТоваровУслуг Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ОформлениеСДИЗЗЕРНО Тогда
			
			ТоварыРасход.ДопОтборы_Общие = СтрШаблон(
				"И ТаблицаДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
				|И Не %1", КонтрагентФизЛицо());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
		
		ИначеЕсли МетаданныеДокументаЗЕРНО = Метаданные.Документы.СписаниеПартийЗЕРНО Тогда
				
			ТоварыРасход.ДопОтборы_Общие = СтрШаблон("И %1", КонтрагентФизЛицо());
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровПоставщику Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ОформлениеСДИЗЗЕРНО Тогда
			
			ТоварыРасход.ДопОтборы_Общие = СтрШаблон("И Не %1 И %2",
				КонтрагентФизЛицо(),
				ДокументПроведен());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ОформлениеСДИЗЗЕРНО Тогда
			
			ТоварыРасход.ДопОтборы_Общие = СтрШаблон("И %1 И %2",
				"ТаблицаДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)",
				СтранаОрганизацииРоссия());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ОформлениеСДИЗЗЕРНО Тогда
			
			ТоварыРасход.ДопОтборы_Общие = СтрШаблон(
				"И ТаблицаДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
				|И %1", СтранаОрганизацииРоссия());
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПеремещениеТоваров Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ОформлениеСДИЗЗЕРНО Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОтгрузкаТоваровСХранения Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ОформлениеСДИЗЗЕРНО Тогда
			
			ДопСоединения = ДопСоединениеЭлеватор("Организации", "Организация");
			
			ТоварыРасход.ДопСоединения_Общие = ДопСоединения;
			ТоварыРасход.ДопОтборы_Общие = "И НЕ РеестрЭлеваторовЗЕРНООрганизации.Ссылка ЕСТЬ NULL";
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПередачаТоваровХранителю Тогда
		
		ТоварыРасход.ДопОтборы_Общие = "И ТаблицаДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)";
			
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ОформлениеСДИЗЗЕРНО Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПоступлениеТоваровОтХранителя Тогда
	
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ОформлениеСДИЗЗЕРНО Тогда
			
			ДопСоединения = ДопСоединениеЭлеватор("Контрагенты", "Контрагент");
			
			ТоварыРасход.ДопСоединения_Общие = ДопСоединения;
			ТоварыРасход.ДопОтборы_Общие = "И РеестрЭлеваторовЗЕРНОКонтрагенты.Ссылка ЕСТЬ NULL";
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
	
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВыкупТоваровХранителем Тогда
	
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ОформлениеСДИЗЗЕРНО Тогда
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТоварыРасход, ОтборНоменклатуры);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ЗаказПоставщику Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ФормированиеПартийЗЕРНО Тогда
			
			// Закупка по импорту
			ТоварыПоИмпорту = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
			ТоварыПоИмпорту.ИмяПоляСерияТЧТовары   = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
			ТоварыПоИмпорту.ДопОтборы_Общие        = "И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)";
			
			// Закупка в странах ЕАЭС
			ТоварыВСтранахЕАЭС = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
			ТоварыВСтранахЕАЭС.ИмяПоляСерияТЧТовары   = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
			ТоварыВСтранахЕАЭС.ДопОтборы_Общие        = "И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)";
			
			// Закупка по импорту Товары в пути
			ТоварыПоИмпортуТоварыВПути = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
			ТоварыПоИмпортуТоварыВПути.ИмяПоляСерияТЧТовары   = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
			ТоварыПоИмпортуТоварыВПути.ДопОтборы_Общие        = "И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути)";
			
			// Закупка в странах ЕАЭС Товары в пути
			ТоварыВСтранахЕАЭСТоварыВПути = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
			ТоварыВСтранахЕАЭСТоварыВПути.ИмяПоляСерияТЧТовары   = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
			ТоварыВСтранахЕАЭСТоварыВПути.ДопОтборы_Общие        = "И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути)";	 
			
			ТабличныеЧастиДокумента.Добавить(ТоварыПоИмпорту);
			ТабличныеЧастиДокумента.Добавить(ТоварыВСтранахЕАЭС);
			ТабличныеЧастиДокумента.Добавить(ТоварыПоИмпортуТоварыВПути);
			ТабличныеЧастиДокумента.Добавить(ТоварыВСтранахЕАЭСТоварыВПути);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);	
			
		КонецЕсли;
	
		
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СборкаТоваров Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ФормированиеПартийПриПроизводствеЗЕРНО Тогда
			
			// Номенклатура в шапке при сборке (приход)
			НоменклатураПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента("", "Серии");
			НоменклатураПриход.ПостфиксВременнойТаблицы = "Приход";
			НоменклатураПриход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)";
			
			ОтборНоменклатуры ="СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗерна)";
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(НоменклатураПриход);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
		
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОприходованиеИзлишковТоваровУХранителя Тогда
		
		Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ФормированиеПартийЗЕРНО Тогда
			
			// Номенклатура в шапке при сборке (приход)
			НоменклатураПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
			НоменклатураПриход.ПостфиксВременнойТаблицы = "Приход";
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(НоменклатураПриход);
			
			ТекстЗапроса = ТекстЗапросаТоварыДокументаОснования(МетаданныеДокументаОснования, ТабличныеЧастиДокумента, ОтборНоменклатуры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Шаблоны

Функция ШаблонОписанияПриходнойТабличнойЧастиДокумента(ИмяТабличнойЧастиТовары = "Товары", ИмяТабличнойЧастиСерии = NULL, ПостфиксВременнойТаблицы = "")
	
	Возврат ШаблонОписанияТабличнойЧастиДокумента(Истина, ИмяТабличнойЧастиТовары, ИмяТабличнойЧастиСерии, ПостфиксВременнойТаблицы);
	
КонецФункции

Функция ШаблонОписанияРасходнойТабличнойЧастиДокумента(ИмяТабличнойЧастиТовары = "Товары", ИмяТабличнойЧастиСерии = NULL, ПостфиксВременнойТаблицы = "")
	
	Возврат ШаблонОписанияТабличнойЧастиДокумента(Ложь, ИмяТабличнойЧастиТовары, ИмяТабличнойЧастиСерии, ПостфиксВременнойТаблицы);
	
КонецФункции

Функция ШаблонОписанияСвязанныеДокументы(ИмяСвязанногоДокумента, ЭтоПриход = Ложь, ИмяТабличнойЧасти = "Товары")

	Если ЭтоПриход Тогда
		Шаблон = ШаблонОписанияПриходнойТабличнойЧастиДокумента("", Неопределено);
	Иначе
		Шаблон = ШаблонОписанияРасходнойТабличнойЧастиДокумента("", Неопределено);
	КонецЕсли;
	Шаблон.ДопСоединения_Общие = СтрШаблон("
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%1.%2 КАК СвязанныеДокументы
		|		ПО СвязанныеДокументы.Ссылка.ДокументОснование = ТаблицаДокумента.Ссылка
		|		И СвязанныеДокументы.Ссылка.Проведен
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС%1
		|		ПО СтатусыДокументовЕГАИС%1.Документ = СвязанныеДокументы.Ссылка",
		ИмяСвязанногоДокумента, ИмяТабличнойЧасти);
	
	Шаблон.ДопОтборы_Общие = СтрШаблон("И СтатусыДокументовЕГАИС%1.Статус НЕ В(&КонечныеСтатусы%1)", ИмяСвязанногоДокумента);
	
	Шаблон.ИмяПоляНоменклатураТЧТовары   = "СвязанныеДокументы.Номенклатура";
	Шаблон.ИмяПоляХарактеристикаТЧТовары = "СвязанныеДокументы.Характеристика";
	Шаблон.ИмяПоляСерияТЧТовары          = "СвязанныеДокументы.Серия";
	Шаблон.ИмяПоляКоличествоТЧТовары     = "-СвязанныеДокументы.Количество";
	
	Возврат Шаблон;

КонецФункции

Функция ШаблонОписанияТабличнойЧастиДокумента(
	ВидДвиженияПриход, ИмяТабличнойЧастиТовары, ИмяТабличнойЧастиСерии, ПостфиксВременнойТаблицы)
	
	ОписаниеТЧ = Новый Структура;
	// Вид движения
	ОписаниеТЧ.Вставить("ВидДвиженияПриход",             ВидДвиженияПриход);
	// ТЧ Товары
	ОписаниеТЧ.Вставить("ИмяТабличнойЧастиТовары",       ИмяТабличнойЧастиТовары);
	// ТЧ Серии
	ОписаниеТЧ.Вставить("ИмяТабличнойЧастиСерии",        ИмяТабличнойЧастиСерии);
	ОписаниеТЧ.Вставить("АвтоПоискСерий",                (ИмяТабличнойЧастиСерии = NULL));
	// Имена полей ТЧ Товары
	ОписаниеТЧ.Вставить("ИмяПоляНоменклатураТЧТовары",   "ТаблицаТовары.Номенклатура");
	ОписаниеТЧ.Вставить("ИмяПоляХарактеристикаТЧТовары", "ТаблицаТовары.Характеристика");
	ОписаниеТЧ.Вставить("ИмяПоляНазначениеТЧТовары",     "ТаблицаТовары.Назначение");
	ОписаниеТЧ.Вставить("ИмяПоляСерияТЧТовары",          "ТаблицаТовары.Серия");
	ОписаниеТЧ.Вставить("ИмяПоляКоличествоТЧТовары",     "ТаблицаТовары.Количество");
	// Имена полей ТЧ Серии
	ОписаниеТЧ.Вставить("ИмяПоляНоменклатураТЧСерии",    "ТаблицаСерии.Номенклатура");
	ОписаниеТЧ.Вставить("ИмяПоляХарактеристикаТЧСерии",  "ТаблицаСерии.Характеристика");
	ОписаниеТЧ.Вставить("ИмяПоляНазначениеТЧСерии",      "Назначение");
	ОписаниеТЧ.Вставить("ИмяПоляСерияТЧСерии",           "ТаблицаСерии.Серия");
	// Модификаторы текста запроса.
	ОписаниеТЧ.Вставить("ДопСоединения_Общие",           "");
	ОписаниеТЧ.Вставить("ДопСоединения_ТаблицаТовары",   "");
	ОписаниеТЧ.Вставить("ДопСоединения_ТаблицаСерии",    "");
	ОписаниеТЧ.Вставить("ДопОтборы_Общие",               "");
	ОписаниеТЧ.Вставить("ДопОтборы_ТаблицаТовары",       "");
	ОписаниеТЧ.Вставить("ДопОтборы_ТаблицаСерии",        "");
	// Номер таблицы по порядку.
	ОписаниеТЧ.Вставить("ПостфиксВременнойТаблицы",      ПостфиксВременнойТаблицы);
	
	Возврат ОписаниеТЧ;
	
КонецФункции

Функция ТекстЗапросаТоварыДокументаОснования(
	МетаданныеДокументаОснования,
	ОписаниеТабличныхЧастей,
	ОтборНоменклатуры)
	
	Если ТипЗнч(ОписаниеТабличныхЧастей) <> Тип("Массив") Тогда
		// Передано описание единственной табличной части
		ТабличныеЧастиОснования = Новый Массив;
		ТабличныеЧастиОснования.Добавить(ОписаниеТабличныхЧастей);
	Иначе
		ТабличныеЧастиОснования = ОписаниеТабличныхЧастей;
	КонецЕсли;
	
	КоличествоТЧ = ТабличныеЧастиОснования.Количество();
	Если КоличествоТЧ = 0 Тогда
		УточнениеОшибки = НСтр("ru = 'Некорректный вызов ТекстЗапросаДляРасчетаСтатусаОформления'");
		ВызватьИсключение ИнтеграцияИСКлиентСервер.ТекстОшибки(ИнтеграцияИСКлиентСервер.ПредставлениеПодсистемы(),УточнениеОшибки); // Некорректный вызов ТекстЗапросаДляРасчетаСтатусаОформления
	КонецЕсли;
	
	Для Каждого ОписаниеТЧ Из ТабличныеЧастиОснования Цикл
		
		Если ОписаниеТЧ.АвтоПоискСерий Тогда
			
			Если КоличествоТЧ = 1 И МетаданныеДокументаОснования.ТабличныеЧасти.Найти("Серии") <> Неопределено Тогда
				ОписаниеТЧ.ИмяТабличнойЧастиСерии = "Серии";
			ИначеЕсли МетаданныеДокументаОснования.ТабличныеЧасти.Найти(ОписаниеТЧ.ИмяТабличнойЧастиТовары + "Серии") <> Неопределено Тогда
				ОписаниеТЧ.ИмяТабличнойЧастиСерии = ОписаниеТЧ.ИмяТабличнойЧастиТовары + "Серии";
			Иначе
				ОписаниеТЧ.ИмяТабличнойЧастиСерии = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблонВременнойТаблицыПодзапроса = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	%ИмяПоляНоменклатураТЧТовары% КАК Номенклатура,
	|	%ИмяПоляХарактеристикаТЧТовары% КАК Характеристика,
	|	%ИмяПоляНазначениеТЧТовары% КАК Назначение
	|ПОМЕСТИТЬ
	|	%ИмяВременнойТаблицы%
	|ИЗ
	|	Документ.%ИмяДокумента%%ИмяТабличнойЧастиТовары% КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (&МассивДокументов)
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение";
	
	ШаблонЗапросаССериями =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	%ВидДвиженияПриход% КАК ЭтоДвижениеПриход,
	|	%ИмяПоляНоменклатураТЧТовары% КАК Номенклатура,
	|	%ИмяПоляХарактеристикаТЧТовары% КАК Характеристика,
	|	%ИмяПоляСерияТЧТовары% КАК Серия,
	|	%ИмяПоляКоличествоТЧТовары% КАК Количество
	|%СозданиеВременнойТаблицы%
	|ИЗ
	|	Документ.%ИмяДокумента%%ИмяТабличнойЧастиТовары% КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%ИмяДокумента% КАК ТаблицаДокумента
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаТовары.Ссылка
	|%ДопСоединения_Общие%
	|%ДопСоединения_ТаблицаТовары%
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = %ИмяПоляНоменклатураТЧТовары%
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.%ИмяДокумента%%ИмяТабличнойЧастиСерии% КАК ТаблицаСерии
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|		И %ИмяПоляНоменклатураТЧСерии%   = %ИмяПоляНоменклатураТЧТовары%
	|		И %ИмяПоляХарактеристикаТЧСерии% = %ИмяПоляХарактеристикаТЧТовары%
	|		И ТаблицаСерии.%ИмяПоляНазначениеТЧСерии%     = %ИмяПоляНазначениеТЧТовары%
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И %ИмяПоляНоменклатураТЧСерии% ЕСТЬ NULL
	|	И %ОтборНоменклатуры%
	|%ДопОтборы_Общие%
	|%ДопОтборы_ТаблицаТовары%
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Ссылка КАК Ссылка,
	|	%ВидДвиженияПриход% КАК ЭтоДвижениеПриход,
	|	%ИмяПоляНоменклатураТЧСерии% КАК Номенклатура,
	|	%ИмяПоляХарактеристикаТЧСерии% КАК Характеристика,
	|	%ИмяПоляСерияТЧСерии% КАК Серия,
	|	ТаблицаСерии.Количество КАК Количество
	|ИЗ
	|	Документ.%ИмяДокумента%%ИмяТабличнойЧастиСерии% КАК ТаблицаСерии
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%ИмяДокумента% КАК ТаблицаДокумента
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаСерии.Ссылка
	|%ДопСоединения_Общие%
	|%ДопСоединения_ТаблицаСерии%
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = %ИмяПоляНоменклатураТЧСерии%
	|	ЛЕВОЕ СОЕДИНЕНИЕ %ИмяВременнойТаблицы% КАК ТаблицаТовары
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|		И %ИмяПоляНоменклатураТЧСерии%   = ТаблицаТовары.Номенклатура
	|		И %ИмяПоляХарактеристикаТЧСерии% = ТаблицаТовары.Характеристика
	|		И ТаблицаСерии.%ИмяПоляНазначениеТЧСерии%     = ТаблицаТовары.Назначение
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И ТаблицаТовары.Номенклатура ЕСТЬ НЕ NULL
	|	И %ОтборНоменклатуры%
	|%ДопОтборы_Общие%
	|%ДопОтборы_ТаблицаСерии%
	|";
	
	ШаблонЗапросаБезСерий =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	%ВидДвиженияПриход% КАК ЭтоДвижениеПриход,
	|	%ИмяПоляНоменклатураТЧТовары% КАК Номенклатура,
	|	%ИмяПоляХарактеристикаТЧТовары% КАК Характеристика,
	|	%ИмяПоляСерияТЧТовары% КАК Серия,
	|	%ИмяПоляКоличествоТЧТовары% КАК Количество
	|%СозданиеВременнойТаблицы%
	|ИЗ
	|	Документ.%ИмяДокумента%%ИмяТабличнойЧастиТовары% КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%ИмяДокумента% КАК ТаблицаДокумента
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаТовары.Ссылка
	|%ДопСоединения_Общие%
	|%ДопСоединения_ТаблицаТовары%
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = %ИмяПоляНоменклатураТЧТовары%
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И %ОтборНоменклатуры%
	|%ДопОтборы_Общие%
	|%ДопОтборы_ТаблицаТовары%
	|";
	
	МассивТекстовСуммированияЗапросов = Новый Массив;
	МассивТекстовОсновногоЗапроса = Новый Массив;
	
	Для НомерТаблицы = 0 По КоличествоТЧ - 1 Цикл
		
		ОписаниеТЧ = ТабличныеЧастиОснования[НомерТаблицы];
		
		ИмяТабличнойЧастиТовары = ?(ОписаниеТЧ.ИмяТабличнойЧастиТовары = "", "", "." + ОписаниеТЧ.ИмяТабличнойЧастиТовары);
		
		Если ОписаниеТЧ.ИмяТабличнойЧастиСерии = Неопределено Тогда
			ТекстЗапросаПоТабличнойЧасти = ШаблонЗапросаБезСерий;
		Иначе
			ТекстЗапросаПоТабличнойЧасти = ШаблонЗапросаССериями;
		КонецЕсли;
		
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяДокумента%", МетаданныеДокументаОснования.Имя);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%СозданиеВременнойТаблицы%",
			?(НомерТаблицы = 0, "ПОМЕСТИТЬ " + РасчетСтатусовОформленияИС.ИмяВременнойТаблицыДляВыборкиДанныхДокумента(), ""));
		
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ВидДвиженияПриход%",
			Формат(ОписаниеТЧ.ВидДвиженияПриход, "БЛ=Ложь; БИ=Истина"));
		
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяТабличнойЧастиТовары%",       ИмяТабличнойЧастиТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляНоменклатураТЧТовары%",   ОписаниеТЧ.ИмяПоляНоменклатураТЧТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляХарактеристикаТЧТовары%", ОписаниеТЧ.ИмяПоляХарактеристикаТЧТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляНазначениеТЧТовары%",     ОписаниеТЧ.ИмяПоляНазначениеТЧТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляСерияТЧТовары%",          ОписаниеТЧ.ИмяПоляСерияТЧТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляКоличествоТЧТовары%",     ОписаниеТЧ.ИмяПоляКоличествоТЧТовары);
		
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопСоединения_Общие%",           ОписаниеТЧ.ДопСоединения_Общие);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопСоединения_ТаблицаТовары%",   ОписаниеТЧ.ДопСоединения_ТаблицаТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопОтборы_Общие%",               ОписаниеТЧ.ДопОтборы_Общие);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопОтборы_ТаблицаТовары%",       ОписаниеТЧ.ДопОтборы_ТаблицаТовары);
		
		Если ОписаниеТЧ.ИмяТабличнойЧастиСерии <> Неопределено Тогда
			
			ИмяВременнойТаблицы = МетаданныеДокументаОснования.Имя + ОписаниеТЧ.ИмяТабличнойЧастиТовары + ОписаниеТЧ.ПостфиксВременнойТаблицы;
			//Временная таблица - получение запроса из шаблона
			ТекстЗапросаВременнойТаблицы = ШаблонВременнойТаблицыПодзапроса;
			ТекстЗапросаВременнойТаблицы = СтрЗаменить(ТекстЗапросаВременнойТаблицы, "%ИмяДокумента%",                  МетаданныеДокументаОснования.Имя);
			ТекстЗапросаВременнойТаблицы = СтрЗаменить(ТекстЗапросаВременнойТаблицы, "%ИмяВременнойТаблицы%",           ИмяВременнойТаблицы);
			ТекстЗапросаВременнойТаблицы = СтрЗаменить(ТекстЗапросаВременнойТаблицы, "%ИмяПоляНоменклатураТЧТовары%",   ОписаниеТЧ.ИмяПоляНоменклатураТЧТовары);
			ТекстЗапросаВременнойТаблицы = СтрЗаменить(ТекстЗапросаВременнойТаблицы, "%ИмяПоляХарактеристикаТЧТовары%", ОписаниеТЧ.ИмяПоляХарактеристикаТЧТовары);
			ТекстЗапросаВременнойТаблицы = СтрЗаменить(ТекстЗапросаВременнойТаблицы, "%ИмяПоляНазначениеТЧТовары%",     ОписаниеТЧ.ИмяПоляНазначениеТЧТовары);
			ТекстЗапросаВременнойТаблицы = СтрЗаменить(ТекстЗапросаВременнойТаблицы, "%ИмяПоляСерияТЧТовары%",          ОписаниеТЧ.ИмяПоляСерияТЧТовары);
			ТекстЗапросаВременнойТаблицы = СтрЗаменить(ТекстЗапросаВременнойТаблицы, "%ИмяТабличнойЧастиТовары%",       ИмяТабличнойЧастиТовары);
			МассивТекстовСуммированияЗапросов.Добавить(ТекстЗапросаВременнойТаблицы);
			
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяВременнойТаблицы%",           ИмяВременнойТаблицы);
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяТабличнойЧастиСерии%",
				?(ОписаниеТЧ.ИмяТабличнойЧастиСерии = "", "", "." + ОписаниеТЧ.ИмяТабличнойЧастиСерии));
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляНоменклатураТЧСерии%",   ОписаниеТЧ.ИмяПоляНоменклатураТЧСерии);
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляХарактеристикаТЧСерии%", ОписаниеТЧ.ИмяПоляХарактеристикаТЧСерии);
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляНазначениеТЧСерии%",     ОписаниеТЧ.ИмяПоляНазначениеТЧСерии);
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляСерияТЧСерии%",          ОписаниеТЧ.ИмяПоляСерияТЧСерии);
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопСоединения_ТаблицаСерии%",   ОписаниеТЧ.ДопСоединения_ТаблицаСерии);
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопОтборы_ТаблицаСерии%",       ОписаниеТЧ.ДопОтборы_ТаблицаСерии);
			
		КонецЕсли;
		
		МассивТекстовОсновногоЗапроса.Добавить(ТекстЗапросаПоТабличнойЧасти);
		
	КонецЦикла;
	
	ШаблонОбъединение = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	МассивТекстовСуммированияЗапросов.Добавить(СтрСоединить(МассивТекстовОсновногоЗапроса, ШаблонОбъединение));
	
	ОбщийЗапрос = СтрСоединить(МассивТекстовСуммированияЗапросов, ИнтеграцияИС.РазделительЗапросовВПакете());
	ОбщийЗапрос = СтрЗаменить(ОбщийЗапрос, "%ОтборНоменклатуры%", ОтборНоменклатуры);
	Возврат ОбщийЗапрос;
	
КонецФункции

Процедура ЗаменитьФасованнуюПродукциюКоличествомКодов(ТекстЗапроса)
	
	ИмяВТ = РасчетСтатусовОформленияИС.ИмяВременнойТаблицыДляВыборкиДанныхДокумента();
	ИмяЗамены = ИмяВТ + "Предварительно";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяВТ, ИмяЗамены);
	ТекстЗапроса = ТекстЗапроса
	+ ИнтеграцияИС.РазделительЗапросовВПакете()
	+ СтрШаблон("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке, 1) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КоэффициентыПересчетаИзЕдиницУчетаККоличествуКодов
	|ИЗ %1 КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО &ПроизвольнаяЕдиницаУчета
	|ГДЕ
	|	Не (&ТребуетВзвешивания)
	|", ИмяЗамены)
	+ ИнтеграцияИС.РазделительЗапросовВПакете()
	+ СтрШаблон("
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.ЭтоДвижениеПриход КАК ЭтоДвижениеПриход,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.Количество / КоэффициентыПересчета.КоэффициентПересчета КАК Количество
	|ПОМЕСТИТЬ %1
	|ИЗ %2 КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоэффициентыПересчетаИзЕдиницУчетаККоличествуКодов КАК КоэффициентыПересчета
	|		ПО ТаблицаТовары.Номенклатура = КоэффициентыПересчета.Номенклатура
	|", ИмяВТ, ИмяЗамены);
	ИнтеграцияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеНоменклатурыИС", "Товары.Номенклатура");
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ХозяйственнаяОперацияИмпорт() Экспорт
	
	Возврат
	"ТаблицаДокумента.ХозяйственнаяОперация В (
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути),
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути),
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути),
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути),
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки),
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка))";
	
КонецФункции

Функция КонтрагентФизЛицо()
	
	Возврат
	"ТаблицаДокумента.Контрагент.ЮрФизлицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)";
	
КонецФункции

Функция ДокументПроведен()
	
	Возврат "ТаблицаДокумента.Проведен";
	
КонецФункции

Функция КассаБезИСМП()
	
	Возврат
	"ТаблицаДокумента.КассаККМ В(ВЫБРАТЬ Касса Из РегистрСведений.КассыНеПередающиеДанныеВИСМП)";
	
КонецФункции

Функция СтранаОрганизацииРоссия()
	
	Возврат
	"ТаблицаДокумента.Организация.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)";
	
КонецФункции

Процедура ДополнитьТекстЗапросаСвернутьДанныеТоваровДляОформления(ТекстЗапроса, ИмяТаблицыВыборки = "")
	
	ШаблонТекстаЗапроса = ОбщегоНазначения.РазделительПакетаЗапросов() + 
		"ВЫБРАТЬ 
		|	%1.Ссылка,
		|	%1.ЭтоДвижениеПриход,
		|	%1.Номенклатура,
		|	%1.Характеристика,
		|	%1.Серия,
		|	СУММА(%1.Количество)
		|ПОМЕСТИТЬ ВременнаяТаблицаДляСхлопывания
		|ИЗ 
		|	%1 КАК %1
		|СГРУППИРОВАТЬ ПО
		|	%1.Ссылка,
		|	%1.ЭтоДвижениеПриход,
		|	%1.Номенклатура,
		|	%1.Характеристика,
		|	%1.Серия
		|ИМЕЮЩИЕ 
		|	СУММА(%1.Количество) <> 0
		|;
		|
		|УНИЧТОЖИТЬ 
		|	%2
		|;
		|
		|ВЫБРАТЬ 
		|	ВременнаяТаблицаДляСхлопывания.*
		|ПОМЕСТИТЬ %2 
		|ИЗ
		|	ВременнаяТаблицаДляСхлопывания КАК ВременнаяТаблицаДляСхлопывания";

	ИмяКонечнойТаблицы = РасчетСтатусовОформленияИС.ИмяВременнойТаблицыДляВыборкиДанныхДокумента();
	ТекстЗапроса = ТекстЗапроса 
		+ СтрШаблон(ШаблонТекстаЗапроса, ?(ЗначениеЗаполнено(ИмяТаблицыВыборки), ИмяТаблицыВыборки, ИмяКонечнойТаблицы), ИмяКонечнойТаблицы);	
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаОтборПоНаличиюТоваровДляФормированияОтчетаПроизводства(ТекстЗапроса, МетаданныеДокументаОснования, ИмяТаблицыДляВыборкиРезультатов)

	ИмяТаблицыДанныхВыборки = РасчетСтатусовОформленияИС.ИмяВременнойТаблицыДляВыборкиДанныхДокумента();
	Если НЕ МетаданныеДокументаОснования = Метаданные.Документы.СборкаТоваров Тогда
		
		ШаблонТекстаЗапроса = ОбщегоНазначения.РазделительПакетаЗапросов() +
			"ВЫБРАТЬ
			|	%1.* 
			|ПОМЕСТИТЬ
			|	%2
			|ИЗ 
			|	%1 КАК %1";
			
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(ШаблонТекстаЗапроса, ИмяТаблицыДанныхВыборки, ИмяТаблицыДляВыборкиРезультатов);

	Иначе
		
		ШаблонТекстаЗапроса = ОбщегоНазначения.РазделительПакетаЗапросов() +
			"ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ ВТ_НоменклатураКомплекта
			|ИЗ 
			|	Документ.%1 КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
			|	И ТаблицаТоваров.Ссылка В (&МассивДокументов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаТоваров.Номенклатура
			|ИЗ 
			|	Документ.%1.Товары КАК ТаблицаТоваров
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.%1 КАК ТаблицаДокумента
			|		ПО ТаблицаТоваров.Ссылка = ТаблицаДокумента.Ссылка
			|ГДЕ
			|	ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
			|	И ТаблицаДокумента.Ссылка В (&МассивДокументов)
			|;
			|
			|ВЫБРАТЬ 
			|	%2.Ссылка,
			|	%2.ЭтоДвижениеПриход,
			|	%2.Номенклатура,
			|	%2.Характеристика,
			|	%2.Серия,
			|	%2.Количество
			|ПОМЕСТИТЬ 
			|	%3
			|
			|ИЗ %2 КАК %2
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураКомплекта КАК ВТ_НоменклатураКомплекта
			|		ПО %2.Номенклатура = ВТ_НоменклатураКомплекта.Номенклатура
			|
			|СГРУППИРОВАТЬ ПО
			|	%2.Ссылка,
			|	%2.ЭтоДвижениеПриход,
			|	%2.Номенклатура,
			|	%2.Характеристика,
			|	%2.Серия,
			|	%2.Количество
			|ИМЕЮЩИЕ
			|	МАКСИМУМ(НЕ ВТ_НоменклатураКомплекта.Номенклатура ЕСТЬ NULL) = ИСТИНА";
					
		ТекстЗапроса = ТекстЗапроса + 
			СтрШаблон(ШаблонТекстаЗапроса, 
			МетаданныеДокументаОснования.Имя, 
			ИмяТаблицыДанныхВыборки, 
			ИмяТаблицыДляВыборкиРезультатов);	

	КонецЕсли;
	
КонецПроцедуры

Функция ДопСоединениеДокументЭтоАгрегацияНаборов(ИмяТЧ)
	
	Шаблон = "
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Ссылка КАК Ссылка,
	|			МАКСИМУМ(ВЫБОР
	|	КОГДА ОписаниеGTINИС.ВидУпаковки = ЗНАЧЕНИЕ(Перечисление.ВидыУпаковокИС.Набор)
	|			И ОписаниеGTINИС.КоличествоПотребительскихУпаковок < 2
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ЭтоНабор
	|	Из %1 КАК ТаблицаДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Штрихкоды.Номенклатура = ТаблицаДокумента.Номенклатура
	|		И Штрихкоды.Характеристика = ТаблицаДокумента.Характеристика
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеGTINИС КАК ОписаниеGTINИС
	|		ПО  ОписаниеGTINИС.GTIN = Штрихкоды.Штрихкод
	|		Или ОписаниеGTINИС.GTIN = ""0""+Штрихкоды.Штрихкод
	|		Или ОписаниеGTINИС.GTIN = ""00""+Штрихкоды.Штрихкод
	|		Или ОписаниеGTINИС.GTIN = ""000000""+Штрихкоды.Штрихкод
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаДокумента.Ссылка) КАК ОписаниеСборки
	|	ПО ОписаниеСборки.Ссылка = ТаблицаДокумента.Ссылка";
	Возврат СтрШаблон(Шаблон, ИмяТЧ);
	
КонецФункции

Функция Набор()
	
	Возврат "ОписаниеСборки.ЭтоНабор";
	
КонецФункции

Функция ДопСоединениеЭлеватор(ТипЗапроса, ИмяПоляДокумента)
	
	МассивТипов = СтрРазделить(ТипЗапроса, ",");
	ТекстЗапроса = "";
	
	Для Каждого СтрТипЗапроса ИЗ МассивТипов Цикл
		Шаблон = ШаблонСоединияЭлеватор();
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(Шаблон, СтрТипЗапроса, ИмяПоляДокумента);
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ШаблонСоединияЭлеватор()
	
	Возврат "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.%1 КАК ТаблицаЭлеватор%1
		|		ПО ТаблицаЭлеватор%1.Ссылка = ТаблицаДокумента.%2
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрЭлеваторовЗЕРНО КАК РеестрЭлеваторовЗЕРНО%1
		|		ПО РеестрЭлеваторовЗЕРНО%1.ИНН = ТаблицаЭлеватор%1.ИНН
		|		И РеестрЭлеваторовЗЕРНО%1.КПП = ТаблицаЭлеватор%1.КПП";

КонецФункции


Процедура ДоработатьУсловиеБезПеремещенияВЕТИС (Шаблон, МетаданныеОснования)
	
		УсловиеОрганизацияСовпадает = "
		|	ТаблицаДокумента.Организация = ТаблицаДокумента.ОрганизацияПолучатель
		|		ИЛИ ТаблицаДокумента.ОрганизацияПолучатель = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
		УсловиеОдноПредприятие = "
		|	1 В
		|		(ВЫБРАТЬ 1
		|		ИЗ
		|			Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК Предприятия
		|		ГДЕ
		|			Предприятия.Ссылка.Контрагент = ТаблицаДокумента.Организация
		|			И Предприятия.ТорговыйОбъект = ТаблицаДокумента.СкладОтправитель)
		|	И 1 В
		|		(ВЫБРАТЬ 1
		|		ИЗ
		|			Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК Предприятия
		|		ГДЕ
		|			Предприятия.Ссылка.Контрагент = ТаблицаДокумента.Организация
		|			И Предприятия.ТорговыйОбъект = ТаблицаДокумента.СкладПолучатель)
		|	И 1 В
		|		(ВЫБРАТЬ Количество(Различные Предприятия.Предприятие)
		|		ИЗ
		|			Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК Предприятия
		|		ГДЕ
		|			Предприятия.Ссылка.Контрагент = ТаблицаДокумента.Организация
		|			И (Предприятия.ТорговыйОбъект = ТаблицаДокумента.СкладПолучатель
		|				ИЛИ Предприятия.ТорговыйОбъект = ТаблицаДокумента.СкладОтправитель))";
	Шаблон.ДопОтборы_Общие = СтрШаблон("И Не (%1 И %2)", УсловиеОрганизацияСовпадает, УсловиеОдноПредприятие);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
