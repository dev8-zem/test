#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция формирует сведения по данным регистрации в налоговом органе.
//
// Параметры:
//	РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - регистрация в налоговом органе.
//
// Возвращаемое значение:
//	Структура - Организация, Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, ЮридическийАдрес, ФактическийАдрес, НомерСчета, Банк, БИК, КоррСчет.
//
Функция СведенияОПодразделении(РегистрацияВНалоговомОргане, Дата = Неопределено) Экспорт
	
	Сведения = Новый Структура("Организация, Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, ОГРН, ЮридическийАдрес, ФактическийАдрес, НомерСчета, Банк, БИК, КоррСчет");
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		
		ИменаРеквизитов = Новый Структура;
		ИменаРеквизитов.Вставить("Организация",        "Владелец");
		ИменаРеквизитов.Вставить("Представление",      "НаименованиеОбособленногоПодразделения");
		ИменаРеквизитов.Вставить("ПолноеНаименование", "НаименованиеОбособленногоПодразделения");
		ИменаРеквизитов.Вставить("КодПоОКПО",          "Владелец.КодПоОКПО");
		ИменаРеквизитов.Вставить("ИНН",                "Владелец.ИНН");
		ИменаРеквизитов.Вставить("КПП",                "КПП");
		ИменаРеквизитов.Вставить("ОГРН",               "Владелец.ОГРН");
		
		ЗаполнитьЗначенияСвойств(
			Сведения,
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, ИменаРеквизитов));
		
		Сведения.Вставить("ЮридическийАдрес", 	ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Сведения.Организация,        "Юридический", Дата));
		Сведения.Вставить("ФактическийАдрес", 	ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(РегистрацияВНалоговомОргане, "Фактический", Дата));
		
		РеквизитыСчета =
			Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(
				Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Сведения.Организация));
		
		ЗаполнитьЗначенияСвойств(
			Сведения,
			РеквизитыСчета,
			"НомерСчета, Банк, БИК, КоррСчет");
		
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

// Функция возвращает значение типа Булево, которое определяет
// возможность ввода сведений о регистрации в налоговом органе
// для обособленных подразделений, выделенных на отдельный баланс.
//
// Возвращаемое значение:
//  Булево - признак возможности ввода сведений о регистрации в налоговом органе.
//
Функция ВозможнаРегистрацияДляОбособленныхПодразделений() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает ссылку на "Регистрацию в налоговом органе" по состоянию на некоторую ДатаАктуальности
// Параметры:
//	СтруктурнаяЕдиница - СправочникСсылка.Организации, СправочникСсылка.ПодразделенияОрганизаций - структурная единица.
//	ДатаАктуальности - Дата - дата, на которую требуется получить сведения.
//
// Возвращаемое значение:
//	СправочникСсылка.РегистрацииВНалоговомОргане - регистрация в налоговом органе.
//
Функция РегистрацияВНалоговомОргане(СтруктурнаяЕдиница, Знач ДатаАктуальности = Неопределено, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	Если РегистрацияВНалоговомОргане <> Неопределено Тогда
		Возврат РегистрацияВНалоговомОргане;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистрации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК Регистрации
	|ГДЕ
	|	Регистрации.Организация = &СтруктурнаяЕдиница
	|	И Регистрации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.РегистрацияВНалоговомОргане
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &СтруктурнаяЕдиница";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.РегистрацияВНалоговомОргане;
		
	КонецЕсли;
	
	
	Возврат Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	
КонецФункции


// Определяет код территории по классификатору ОКТМО или ОКАТО,
// на котором организация или обособленное подразделение зарегистрирована по месту нахождения.
//
// Параметры:
//  РегистрацияВНалоговомОргане	 - СправочникСсылка.РегистрацииВНалоговомОргане
//  ТипКода	- Строка - "ОКТМО" или "ОКАТО"
//          - Дата - с даты применения ОКТМО будет возвращен код по ОКТМО, в остальных случаях - код по ОКАТО
// 
// Возвращаемое значение:
//  Строка - код территории
//
Функция КодТерритории(РегистрацияВНалоговомОргане, Знач ТипКода = "ОКТМО") Экспорт
	
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(ТипКода) = Тип("Дата") И Год(ТипКода) < 2014 Тогда
		ТипКода = "ОКАТО";
	ИначеЕсли ТипКода <> "ОКАТО" Тогда
		ТипКода = "ОКТМО";
	КонецЕсли;
	
	Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КодПо" + ТипКода));
	
КонецФункции

// Генерация служебного наименования исходя из регистрации налога на прибыль
// 
// Параметры:
// 	РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - 
//
// Возвращаемое значение:
// 	Строка - значение служебного наименования
//
Функция НаименованиеСлужебное(РегистрацияВНалоговомОргане) Экспорт

	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Возврат "";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
	// НаименованиеСлужебное определяется из наименования организации или ее обособленных подразделений в строгом порядке
	// Порядок (порядок - источник наименования):
	//	1 - НаименованиеПолное организации
	//	2 - НаименованиеПолное обособленного подразделения на отдельном балансе
	//	3 - НаименованиеПолное обособленного подразделения на общем балансе
	//	4 - Наименование организации
	//	5 - Наименование обособленного подразделения на отдельном балансе
	//	6 - Наименование обособленного подразделения на общем балансе
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное = """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	ВЫБОР
	|		КОГДА НЕ Организации.ОбособленноеПодразделение
	|				И Организации.НаименованиеПолное <> """"
	|			ТОГДА 1
	|		КОГДА Организации.ОбособленноеПодразделение
	|				И Организации.НаименованиеПолное <> """"
	|			ТОГДА 2
	|		КОГДА НЕ Организации.ОбособленноеПодразделение
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
	|	И НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Наименование УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;	
	
	// берем первое значение из выборки, т.к. она уже отсортирована по порядку
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Наименование;
	
КонецФункции

// Возвращается код региона (в соответствии с адресным классификатором) по коду налоговой инспекции.
//
// Параметры:
//	КодНалоговогоОргана - Строка - код налогового органа.
//
// Возвращаемое значение:
//	Строка - код региона по адресному классификатору -  см. РегистрыСведений.АдресныеОбъекты.КлассификаторСубъектовРФ
//
Функция КодРегионаПоКодуНалоговогоОргана(Знач КодНалоговогоОргана) Экспорт
	
	КодРегиона = "";
	
	Если СтрДлина(КодНалоговогоОргана) < 2 Тогда
		Возврат КодРегиона;
	КонецЕсли;
	
	КодРегиона = Лев(КодНалоговогоОргана, 2);
	
	// 99 - код г.Байконур и одновременно код инспекций по крупнейшим налогоплательщикам.
	// 9901 - код местной инспекции, все остальные - инспекции по крупнейшим налогоплательщикам - находятся в Москве
	Если КодРегиона = "99" И КодНалоговогоОргана <> "9901" Тогда
		КодРегиона = "77";
	КонецЕсли;
		
	Возврат КодРегиона;
	
КонецФункции

// Заполняет переданный список регионов значениями из адресного классификатора
// Параметры:
//  СписокРегионов     - СписокЗначений 
//  ТолькоИспользуемые - Булево - Истина - в списке будут только те регионы,
//  									которые выбраны в регистрациях в налоговых органах
//									Ложь - все регионы из адресного классификатора.
//	КодРегиона         - Строка - код текущего выбранного региона.
//							Если указан, то в список добавляется только этот 1 регион.
//
Процедура ЗаполнитьСписокВыбораРегиона(СписокРегионов, ТолькоИспользуемые = Ложь, КодРегиона = Неопределено) Экспорт 
	
	СписокРегионов.Очистить();
	
	Если ЗначениеЗаполнено(КодРегиона) И КодРегиона <> "00" Тогда
		
		ШаблонПредставления = НСтр("ru='%1'");  //например: "Москва г"
		
		НаименованиеРегиона = АдресныйКлассификатор.НаименованиеРегионаПоКоду(КодРегиона);
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, НаименованиеРегиона);
			
		СписокРегионов.Добавить(КодРегиона, Представление);
		Возврат;
		
	КонецЕсли;	
	
	КлассификаторСубъектовРФ = АдресныйКлассификатор.СубъектыРФ();
	
	Если НЕ ТолькоИспользуемые Тогда
		
		ТаблицаРегионов = КлассификаторСубъектовРФ;
		
	Иначе
		
		// Запрос выбирает все коды регионов, которые выбраны в справочнике регистраций в налоговом органе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрацииВНалоговомОргане.КодРегиона КАК КодРегиона
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|";

		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;	
		
		ВыборкаРегионов = РезультатЗапроса.Выбрать();
		
		ТаблицаРегионов = КлассификаторСубъектовРФ.СкопироватьКолонки();
		Пока ВыборкаРегионов.Следующий() Цикл
			
			СтрокаРегиона = ТаблицаРегионов.Добавить();
			СтрокаРегиона.КодСубъектаРФ = ВыборкаРегионов.КодРегиона;
			
			СтрокаКлассификатора = КлассификаторСубъектовРФ.Найти(СтрокаРегиона.КодСубъектаРФ, "КодСубъектаРФ");
			Если СтрокаКлассификатора <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРегиона, СтрокаКлассификатора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 

	ШаблонПредставления = НСтр("ru='%1 %2'");  //например: "Москва г"
	Для Каждого Регион Из ТаблицаРегионов Цикл
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			Регион.Наименование,
			Регион.Сокращение);
		СписокРегионов.Добавить(Формат(Регион.КодСубъектаРФ, "ЧЦ=2; ЧН=; ЧВН="), Представление);
	КонецЦикла;
	
	// Сортируем по наименованию региона
	СписокРегионов.СортироватьПоПредставлению();
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Владельцы 
	|	ПО Владельцы.Ссылка = ЭтотСписок.Владелец
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения 
	|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = Владельцы.Ссылка
	|;
	|РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Владелец)
	| ИЛИ ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.РегистрацииВНалоговомОргане.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.9.75";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1c55d4f6-9b80-4547-8093-6622a61f4c60");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.РегистрацииВНалоговомОргане.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновление справочника Регистрации в налоговом органе.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.РегистрацииВНалоговомОргане.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.РегистрацииВНалоговомОргане.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.РегистрацииВНалоговомОргане.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.КодРегиона = 0
	|		ИЛИ РегистрацииВНалоговомОргане.НаименованиеСлужебное = """"
	|		ИЛИ РегистрацииВНалоговомОргане.ДатаПостановкиНаУчет = ДАТАВРЕМЯ(1,1,1)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Процедура заполняет новые реквизиты справочника РегистрацииВНалоговомОргане:
// - КодРегиона (по коду налогового органа)
// - НаименованиеСлужебное (по наименованию подразделения, аналогично процедуре НаименованиеСлужебное())
// - ДатаПостановкиНаУчет (по регистру ИсторияРегистрацийВНалоговомОргане)
// 
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	// НаименованиеСлужебное определяется из наименования организации или ее обособленных подразделений в строгом порядке
	// Порядок (порядок - источник наименования):
	//	1 - НаименованиеПолное организации
	//	2 - НаименованиеПолное обособленного подразделения на отдельном балансе
	//	4 - Наименование организации
	//	5 - Наименование обособленного подразделения на отдельном балансе
	//	6 - Наименование обособленного подразделения на общем балансе
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка,
	|	РегистрацииВНалоговомОргане.Владелец КАК Организация,
	|	РегистрацииВНалоговомОргане.НаименованиеОбособленногоПодразделения КАК НаименованиеОбособленногоПодразделения,
	|	РегистрацииВНалоговомОргане.НаименованиеОбособленногоПодразделения <> """" КАК ЗаполненоНаименованиеПодразделения
	|ПОМЕСТИТЬ РегистрацииВНалоговомОргане
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Ссылка В (&ОбновляемыеДанные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное = """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	ВЫБОР
	|		КОГДА НЕ Организации.ОбособленноеПодразделение
	|				И Организации.НаименованиеПолное <> """"
	|			ТОГДА 1
	|		КОГДА Организации.ОбособленноеПодразделение
	|				И Организации.НаименованиеПолное <> """"
	|			ТОГДА 2
	|		КОГДА НЕ Организации.ОбособленноеПодразделение
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК Порядок
	|ПОМЕСТИТЬ ИсточникиНаименованияНалоговыхОрганов
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО Организации.РегистрацияВНалоговомОргане = РегистрацииВНалоговомОргане.Ссылка
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И (НЕ РегистрацииВНалоговомОргане.ЗаполненоНаименованиеПодразделения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ИсточникиНаименованияНалоговыхОрганов.Наименование, РегистрацииВНалоговомОргане.НаименованиеОбособленногоПодразделения) КАК НаименованиеСлужебное,
	|	ЕСТЬNULL(ИсточникиНаименованияНалоговыхОрганов.Порядок, 0) КАК Порядок
	|ИЗ
	|	РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсточникиНаименованияНалоговыхОрганов КАК ИсточникиНаименованияНалоговыхОрганов
	|		ПО РегистрацииВНалоговомОргане.Ссылка = ИсточникиНаименованияНалоговыхОрганов.РегистрацияВНалоговомОргане
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НаименованиеСлужебное УБЫВ
	|ИТОГИ ПО
	|	Ссылка
	|";
	
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаРегистраций   = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРегистраций.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаРегистраций.Ссылка);
			Блокировка.Заблокировать();
			
			СправочникОбъект = ВыборкаРегистраций.Ссылка.ПолучитьОбъект();
			
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если СправочникОбъект = Неопределено
			 ИЛИ (СправочникОбъект.КодРегиона <> 0 И НЕ ПустаяСтрока(СправочникОбъект.НаименованиеСлужебное)) Тогда
				ОтменитьТранзакцию();
				Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + 1;
				Продолжить;
			КонецЕсли;
			
			СправочникОбъект.ЗаполнитьКодРегиона();
			
			Если ПустаяСтрока(СправочникОбъект.НаименованиеСлужебное) Тогда
				// берем НаименованиеСлужебное из первого элемента детальной выборки, т.к. она уже отсортирована по порядку
				ВыборкаНаименований = ВыборкаРегистраций.Выбрать();
				ВыборкаНаименований.Следующий();
				СправочникОбъект.НаименованиеСлужебное = ВыборкаНаименований.НаименованиеСлужебное;
			КонецЕсли;
			

			Если НЕ ЗначениеЗаполнено(СправочникОбъект.ДатаПостановкиНаУчет) Тогда
				СправочникОбъект.ДатаПостановкиНаУчет = ТекущаяДатаСеанса();
			КонецЕсли;
			
			Если СправочникОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаРегистраций.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ВыборкаРегистраций.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
