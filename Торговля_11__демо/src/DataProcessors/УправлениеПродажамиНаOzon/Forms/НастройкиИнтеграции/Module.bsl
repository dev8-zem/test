 
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗапущеноЗаданиеОбновленияСкладов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЕстьВиртуальныеСкладыПриИзмененииНаСервере();

	Параметры.Свойство("УчетнаяЗапись", УчетнаяЗапись);
	ОбновитьСписокУчетныхЗаписей(УчетнаяЗапись);

	УстановитьУсловноеОформление();

	ПроверитьДанныеПомещеныВХранилище();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если Элементы.УчетнаяЗапись.СписокВыбора.Количество() = 0 Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуПодключенияКСервису", 0.1, Истина);
	КонецЕсли;

	СтраницыПриСменеСтраницы(Элементы.Страницы,  Элементы.СтраницаСопоставлениеДанных);

	ЗапущеноЗаданиеОбновленияСкладов = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	ЭтоЗакрытиеФормы = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьСписокПодключений" Тогда
		ОбновитьСписокУчетныхЗаписей();
	ИначеЕсли ИмяСобытия = "ИзмененоОграничениеВыгрузкиОстатковМаркетплейсов" Тогда
		ОбновитьЗаголовокОграниченияВыгрузкиОстатков();
	ИначеЕсли ИмяСобытия = "ОбновитьАвторизациюПриложения" Тогда
		ДанныеПриложенияВХранилище = Параметр;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСопоставлениеДанных Тогда
		Элементы.ФормаДалее.Доступность = Истина;
		Элементы.ФормаНазад.Доступность = Ложь;
		Элементы.ФормаДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройкиОбменаОстатками Тогда
		Элементы.ФормаДалее.Доступность = Ложь;
		Элементы.ФормаНазад.Доступность = Истина;
		Элементы.ФормаНазад.КнопкаПоУмолчанию = Истина;

		ОбновитьСписокСкладов();
	Иначе
		Элементы.ФормаДалее.Доступность = Истина;
		Элементы.ФормаНазад.Доступность = Истина;
		Элементы.ФормаДалее.КнопкаПоУмолчанию = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)

	ЗаполнитьДанныеПоУчетнойЗаписи();
	
	ЕстьВиртуальныеСклады = Ложь;
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройкиОбменаОстатками Тогда
		ОбновитьСписокСкладов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЕстьВиртуальныеСкладыПриИзменении(Элемент)
	ЕстьВиртуальныеСкладыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникКатегорииПриИзменении(Элемент)

	СохранитьНастройкиНаСервере();

	ПараметрыФормыСопоставленияКатегорий = Новый Структура; 
	ПараметрыФормыСопоставленияКатегорий.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыФормыСопоставленияКатегорий.Вставить("ИсточникКатегории", ИсточникКатегории);
	Оповестить("ИсточникКатегорииИзменен", ПараметрыФормыСопоставленияКатегорий);

КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныДоСкидокПриИзменении(Элемент)
	СохранитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныСУчетомСкидокПриИзменении(Элемент)
	СохранитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныМинимальныхЦенПриИзменении(Элемент)
	СохранитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВалютаУчетаПриИзменении(Элемент)
	СохранитьНастройкиНаСервере();
	Оповестить("ИзмененаВалютаУчетнойЗаписиМаркетплейса", Новый Структура("УчетнаяЗапись, ВалютаУчета", УчетнаяЗапись, ВалютаУчета));
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеКСервисуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Элементы.УчетнаяЗапись.СписокВыбора.Количество() = 0 Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУстановитьПараметрыПодключенияКСервисуНажатие(Элемент)

	ПараметрыФормы = Новый Структура("ПараметрыПриложенияЯндекс, УчетнаяЗаписьМаркетплейса",
		ПараметрыПриложенияЯндексДиск(), УчетнаяЗапись);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.АвторизацияПриложенияЯндекс", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РегистрОграничениеОстаткаПослеУдаления(Элемент)

	ПодключитьОбработчикОжидания("ОбновитьЗаголовокОграниченияВыгрузкиОстатков_Подключаемый", 0.1, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСкладов

&НаКлиенте
Процедура ТаблицаСкладовСкладПриИзменении(Элемент)

	ОчиститьСообщения();

	ТекущиеДанные = Элементы.ТаблицаСкладов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеЗаписи = Новый Структура; 
	ДанныеЗаписи.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
	ДанныеЗаписи.Вставить("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Склад"));
	ДанныеЗаписи.Вставить("ИдентификаторОбъектаМаркетплейса", ТекущиеДанные.ИдентификаторСкладаМаркетплейса);
	ДанныеЗаписи.Вставить("НаименованиеОбъектаМаркетплейса", ТекущиеДанные.НаименованиеСкладаМаркетплейса);
	ДанныеЗаписи.Вставить("Объект1С", ТекущиеДанные.Склад1С);

	ПроверкаПройдена = ПроверитьИЗаписатьСоответствие(ДанныеЗаписи);

	Если Не ПроверкаПройдена Тогда 
		ТекущиеДанные.Склад1С = Неопределено;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)

	СменитьСтраницу("_Далее");

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	СменитьСтраницу("_Назад");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеКатегорий(Команда)

	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.УправлениеПродажамиНаOzon.Форма.СопоставлениеКатегорий.ОткрытиеФормыСопоставленияКатегорий");

	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана учетная запись для заполнения настроек.'");
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.СопоставлениеКатегорий", ПараметрыФормы);
	Оповестить("ОткрытиеФормыСопоставленияКатегорий", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеТиповСертификатов(Команда)

	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗапись);
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.СопоставлениеТиповСертификатов", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеВыгрузкиТоварногоКаталога(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(Префиксы.ОбновлениеТоварногоКаталога);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыФормы.Вставить("Наименование", Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных", "ОбновлениеТоварногоКаталогаOzon");
	ПараметрыФормы.Вставить("Префикс", Префиксы.ОбновлениеТоварногоКаталога);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеВыгрузкиЦен(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(Префиксы.ВыгрузкаЦен);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыФормы.Вставить("Наименование", Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных", "ВыгрузкаЦенНаМаркетплейсOzon");
	ПараметрыФормы.Вставить("Префикс", Префиксы.ВыгрузкаЦен);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеОбновленияЦен(Команда)

	ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаНастройкиРасписанияАвтообновленияЦен",, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеВыгрузкиОстатковТоваров(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(Префиксы.ВыгрузкаОстатков);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыФормы.Вставить("Наименование", Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных", "ВыгрузкаОстатковНаМаркетплейсOzon");
	ПараметрыФормы.Вставить("Префикс", Префиксы.ВыгрузкаОстатков);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеЗагрузкиОстатков(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(Префиксы.ЗагрузкаОстатков);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыФормы.Вставить("Наименование", Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных", "ЗагрузкаОстатковСМаркетплейсаOzon");
	ПараметрыФормы.Вставить("Префикс", Префиксы.ЗагрузкаОстатков);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСведения(Команда)

	ОбновитьСписокСкладов();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВидовЦен(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСписокВидовЦенЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаСписка",,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСкладовСклад1С.Имя);

	ЭлементУсловия = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСкладов.Склад1С");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Выбрать склад / группу складов 1С>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы() 

	ДоступностьЭлементовФормыПоУчетнойЗаписи = ЗначениеЗаполнено(УчетнаяЗапись);

	Элементы.ИсточникКатегории.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьСопоставлениеКатегорий.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьСопоставлениеТиповДокументовСертификатов.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи
			И ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
	Элементы.ДекорацияАвторизоватьПриложение.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеВыгрузкиТоварногоКаталога.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ВалютаУчета.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи
			И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	Элементы.ВидЦеныДоСкидок.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ВидЦеныСУчетомСкидок.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ВидЦеныМинимальныхЦен.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеВыгрузкиЦен.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьСписокВидовЦен.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеОбновленияЦен.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ДекорацияТолькоFBS.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ДекорацияFBOиFBS.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОбновитьСведения.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ТаблицаСкладов.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.РегистрОграничениеОстатка.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеВыгрузкиОстатковТоваров.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеЗагрузкиОстатков.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенияКСервису()

	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеКСервисуЗавершение", ЭтаФорма);

	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.ПодключениеКСервису",,
		ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Функция СоответствиеПереключенияСтраниц()

	СоответствиеПереключенияСтраниц = Новый Соответствие;
	СоответствиеПереключенияСтраниц.Вставить("СтраницаСопоставлениеДанных_Далее", "СтраницаНастройкиОбновленияЦен");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаНастройкиОбновленияЦен_Далее", "СтраницаНастройкиОбменаОстатками");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаНастройкиОбновленияЦен_Назад", "СтраницаСопоставлениеДанных");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаНастройкиОбменаОстатками_Назад", "СтраницаНастройкиОбновленияЦен");

	Возврат СоответствиеПереключенияСтраниц;

КонецФункции

&НаКлиенте
Процедура СменитьСтраницу(Постфикс)

	СоответствиеПереключенияСтраниц = СоответствиеПереключенияСтраниц(); 
	ИмяСтраницы = СоответствиеПереключенияСтраниц[Элементы.Страницы.ТекущаяСтраница.Имя + Постфикс];
	Если ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[СоответствиеПереключенияСтраниц[Элементы.Страницы.ТекущаяСтраница.Имя + Постфикс]];
		СтраницыПриСменеСтраницы(Элементы.Страницы, Элементы.Страницы.ТекущаяСтраница);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСкладов()

	ОчиститьСообщения();

	ТаблицаСкладов.Очистить();

	Если УчетнаяЗапись.Пустая() Тогда
		ЗапущеноЗаданиеОбновленияСкладов = Ложь;
		Элементы.ДекорацияДлительноеОжидание.Видимость = Ложь;

		ЕстьВиртуальныеСклады = Ложь;
		ЕстьВиртуальныеСкладыПриИзмененииНаСервере();
		Возврат;
	КонецЕсли;

	Если Не ЗапущеноЗаданиеОбновленияСкладов Тогда
		Элементы.ДекорацияДлительноеОжидание.Видимость = Истина;

		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеСпискаСкладовЗавершение", ЭтотОбъект);
		ДлительнаяОперация = ЗапуститьПолучениеСпискаСкладов(УчетнаяЗапись, УникальныйИдентификатор);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокОграниченияВыгрузкиОстатков_Подключаемый()

	ОбновитьЗаголовокОграниченияВыгрузкиОстатков();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьПолучениеСпискаСкладов(УчетнаяЗапись, УникальныйИдентификатор)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Получение списка складов.'");

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьСкладыСервиса";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, УчетнаяЗапись);

КонецФункции

&НаСервере
Процедура ОбновитьСписокУчетныхЗаписей(УчетнаяЗаписьПоУмолчанию = Неопределено)

	Элементы.УчетнаяЗапись.СписокВыбора.Очистить();

	СписокНастроекПодключенияКСервису = ИнтеграцияСМаркетплейсомOzonСервер.СписокНастроекПодключенияКСервису();
	Если СписокНастроекПодключенияКСервису.Количество() > 0 Тогда

		Для Каждого НастройкаПодключения Из СписокНастроекПодключенияКСервису Цикл
			Элементы.УчетнаяЗапись.СписокВыбора.Добавить(НастройкаПодключения.Значение,
			НастройкаПодключения.Представление);
		КонецЦикла;

		Если Не ЗначениеЗаполнено(УчетнаяЗаписьПоУмолчанию)
			Или СписокНастроекПодключенияКСервису.НайтиПоЗначению(УчетнаяЗаписьПоУмолчанию) = Неопределено Тогда
			УчетнаяЗапись = СписокНастроекПодключенияКСервису[0].Значение;
		КонецЕсли;

	КонецЕсли;

	ЗаполнитьДанныеПоУчетнойЗаписи();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоУчетнойЗаписи()

	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗапись);

	НастройкиУчетнойЗаписи.Свойство("ИсточникКатегории", ИсточникКатегории);
	НастройкиУчетнойЗаписи.Свойство("ВалютаУчета", ВалютаУчета);

	Если Не ЗначениеЗаполнено(ВалютаУчета) Тогда
		ВалютаУчета = ЗначениеНастроекКлиентСерверПовтИсп.ВалютаРегламентированногоУчетаОрганизации(НастройкиУчетнойЗаписи.Организация);
		СохранитьНастройкиНаСервере();
	КонецЕсли;

	НастройкиУчетнойЗаписи.ВидыЦен.Свойство("ВидЦеныДоСкидок", ВидЦеныДоСкидок);
	НастройкиУчетнойЗаписи.ВидыЦен.Свойство("ВидЦеныСУчетомСкидок", ВидЦеныСУчетомСкидок);
	НастройкиУчетнойЗаписи.ВидыЦен.Свойство("ВидЦеныМинимальныхЦен", ВидЦеныМинимальныхЦен);

	ЗаполнитьИнформациюОЗагружаемыхВидахЦен();

	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеНоменклатура", НСтр("ru = 'Номенклатура'"));
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеГруппаНоменклатуры", НСтр("ru = 'Группа номенклатуры'"));
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеТоварнаяКатегория", НСтр("ru = 'Товарная категория'"));
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеВидНоменклатуры", НСтр("ru = 'Вид номенклатуры'"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РегистрОграничениеОстатка, "УчетнаяЗаписьМаркетплейса",
			УчетнаяЗапись, ВидСравненияКомпоновкиДанных.Равно);

	УстановитьВидимостьДоступностьЭлементовФормы();

КонецПроцедуры

&НаСервере
Процедура ЕстьВиртуальныеСкладыПриИзмененииНаСервере()

	Элементы.ДекорацияТолькоFBS.Видимость = Не ЕстьВиртуальныеСклады;
	Элементы.ДекорацияFBOиFBS.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ГруппаСклады.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ГруппаОстатки.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ГруппаОграничениеОстатков.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ДекорацияНастройкиСкладовШаг4.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ДекорацияНастройкиСкладовШаг4_1.Видимость = Не ЕстьВиртуальныеСклады;
	Элементы.ОткрытьРасписаниеВыгрузкиОстатковТоваров.Видимость = ЕстьВиртуальныеСклады;
	ШаблонЗаголовкаСпискаСкладов = НСтр("ru = 'Настройки соответствия складов'");
	Элементы.ГруппаНастройкиСоответствияСкладов.Заголовок = ШаблонЗаголовкаСпискаСкладов
			+ ?(ТаблицаСкладов.Количество(), " (" + ТаблицаСкладов.Количество() + ")", "");

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере()

	ХешНастроек = Справочники.УчетныеЗаписиМаркетплейсов.ПолучитьХешНастроекПоСсылке(УчетнаяЗапись);

	Если ХешНастроек <> Неопределено И ХешНастроек <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ХешНастроек") Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЗаблокироватьДанныеДляРедактирования(УчетнаяЗапись);
			ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.УчетныеЗаписиМаркетплейсов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", УчетнаяЗапись);
			БлокировкаДанных.Заблокировать();

			УчетнаяЗаписьОбъект = УчетнаяЗапись.ПолучитьОбъект();

			УчетнаяЗаписьОбъект.ИсточникКатегории = ИсточникКатегории;
			УчетнаяЗаписьОбъект.ВалютаУчета = ВалютаУчета;

			УчетнаяЗаписьОбъект.ВидыЦен.Очистить();

			НоваяСтрока = УчетнаяЗаписьОбъект.ВидыЦен.Добавить();
			НоваяСтрока.ИмяНастройки = "ВидЦеныДоСкидок";
			НоваяСтрока.ВидЦены = ВидЦеныДоСкидок;

			НоваяСтрока = УчетнаяЗаписьОбъект.ВидыЦен.Добавить();
			НоваяСтрока.ИмяНастройки = "ВидЦеныСУчетомСкидок";
			НоваяСтрока.ВидЦены = ВидЦеныСУчетомСкидок;

			НоваяСтрока = УчетнаяЗаписьОбъект.ВидыЦен.Добавить();
			НоваяСтрока.ИмяНастройки = "ВидЦеныМинимальныхЦен";
			НоваяСтрока.ВидЦены = ВидЦеныМинимальныхЦен;

			УчетнаяЗаписьОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьИЗаписатьСоответствие(ДанныеЗаписи)

	ПроверкаПройдена = Истина;

	Если ЗначениеЗаполнено(ДанныеЗаписи.Объект1С) Тогда

		СообщенияПроверки = Новый Массив;

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеЗаписи.УчетнаяЗаписьМаркетплейса);
		Запрос.УстановитьПараметр("ИдентификаторСклада", ДанныеЗаписи.ИдентификаторОбъектаМаркетплейса);
		Запрос.УстановитьПараметр("УстанавливаемыйСклад", ДанныеЗаписи.Объект1С);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(Склады.Ссылка) КАК ПредставлениеСклада,
			|	Склады.ЭтоГруппа КАК ЭтоГруппа
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.Ссылка = &УстанавливаемыйСклад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК СкладМаркетплейса,
			|	ПРЕДСТАВЛЕНИЕ(Склады.Наименование) КАК ПредставлениеСклада1С,
			|	Склады.ЭтоГруппа КАК ЭтоГруппа,
			|	СоответствияОбъектовМаркетплейсов.Объект1С = &УстанавливаемыйСклад КАК ЭтоВыбранныйСклад
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО СоответствияОбъектовМаркетплейсов.Объект1С = Склады.Ссылка
			|ГДЕ
			|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
			|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса <> &ИдентификаторСклада
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса = """"
			|	И СоответствияОбъектовМаркетплейсов.Объект1С В ИЕРАРХИИ(&УстанавливаемыйСклад)
			|	И ВЫБОР
			|			КОГДА Склады.ЭтоГруппа
			|				ТОГДА СоответствияОбъектовМаркетплейсов.Объект1С <> &УстанавливаемыйСклад
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК СкладМаркетплейса,
			|	Склады.Наименование КАК НаименованиеСклада1С,
			|	ПРЕДСТАВЛЕНИЕ(Склады.Наименование) КАК ПредставлениеСклада1С,
			|	Склады.ЭтоГруппа КАК ЭтоГруппа,
			|	СоответствияОбъектовМаркетплейсов.Объект1С = &УстанавливаемыйСклад КАК ЭтоВыбранныйСклад
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО СоответствияОбъектовМаркетплейсов.Объект1С = Склады.Ссылка
			|			И (Склады.ЭтоГруппа)
			|ГДЕ
			|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
			|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса <> &ИдентификаторСклада";
		
		ПакетЗапроса = Запрос.ВыполнитьПакет();

		// Проверка на вхождение записанных складов в иерархию выбранного склада.

		МассивПересечений = Новый Массив;

		ПолноеНаименованиеУстанавливаемогоСклада = "";
		ПредставлениеСклада = "";
		ЭтоГруппаСкладов = Ложь;

		ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница() - 2].Выбрать();
		Если ВыборкаСкладов.Следующий() Тогда 
			ПолноеНаименованиеУстанавливаемогоСклада = "/" + ДанныеЗаписи.Объект1С.ПолноеНаименование() + "/";
			ПредставлениеСклада = ВыборкаСкладов.ПредставлениеСклада;
			ЭтоГруппаСкладов = ВыборкаСкладов.ЭтоГруппа;
		КонецЕсли;

		Если ЭтоГруппаСкладов Тогда
			ШаблонСовпаденияСклада = НСтр("ru = 'Устанавливаемая группа складов <%1> совпадает со значением для склада маркетплейса <%2>.'");
		Иначе
			ШаблонСовпаденияСклада = НСтр("ru = 'Устанавливаемый склад <%1> совпадает со значением для склада маркетплейса <%2>.'");
		КонецЕсли;

		ШаблонПересеченияСклада = " - " + НСтр("ru = 'склад 1С <%1>, установленный для склада маркетплейса <%2>'");
		ШаблонПересеченияГруппыСклада = " - " + НСтр("ru = 'группа складов 1С <%1>, установленная для склада маркетплейса <%2>'");

		ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница() - 1].Выбрать();
		Пока ВыборкаСкладов.Следующий() Цикл
			Если ВыборкаСкладов.ЭтоВыбранныйСклад Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСовпаденияСклада,
						ПредставлениеСклада, 
						ВыборкаСкладов.СкладМаркетплейса);

				СообщенияПроверки.Добавить(ТекстСообщения);

				ПроверкаПройдена = Ложь;
				Продолжить;
			КонецЕсли;

			Шаблон = ?(ВыборкаСкладов.ЭтоГруппа, ШаблонПересеченияГруппыСклада, ШаблонПересеченияСклада);

			ОписаниеПересечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
					ВыборкаСкладов.ПредставлениеСклада1С,
					ВыборкаСкладов.СкладМаркетплейса);

			МассивПересечений.Добавить(ОписаниеПересечения);
		КонецЦикла;

		Если МассивПересечений.Количество() > 0 Тогда
			ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены склады, входящие в состав выбранной группы складов <%1>: %2.'");

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияПроверки,
					ПредставлениеСклада,
					Символы.ПС + СтрСоединить(МассивПересечений, ";" + Символы.ПС));

			СообщенияПроверки.Добавить(ТекстСообщения);

			ПроверкаПройдена = Ложь;
		КонецЕсли;

		// Проверка на вхождение выбранного склада в иерархию записанных складов.

		Если ЗначениеЗаполнено(ПолноеНаименованиеУстанавливаемогоСклада) Тогда
			МассивПересечений = Новый Массив;

			ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница()].Выбрать();
			Пока ВыборкаСкладов.Следующий() Цикл
				Если ВыборкаСкладов.ЭтоВыбранныйСклад Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСовпаденияСклада,
							ПредставлениеСклада, 
							ВыборкаСкладов.СкладМаркетплейса);

					СообщенияПроверки.Добавить(ТекстСообщения);

					ПроверкаПройдена = Ложь;
					Продолжить;
				КонецЕсли;

				НаименованиеСкладаВыборки = "/" + ВыборкаСкладов.НаименованиеСклада1С + "/";
				Если СтрНайти(ПолноеНаименованиеУстанавливаемогоСклада, НаименованиеСкладаВыборки) Тогда
					ОписаниеПересечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПересеченияГруппыСклада,
							ВыборкаСкладов.ПредставлениеСклада1С,
							ВыборкаСкладов.СкладМаркетплейса);

					МассивПересечений.Добавить(ОписаниеПересечения);

					ПроверкаПройдена = Ложь;
				КонецЕсли;
			КонецЦикла;

			Если МассивПересечений.Количество() > 0 Тогда
				Если ЭтоГруппаСкладов Тогда
					ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены группы складов, в состав которых входит выбранная группа складов <%1>: %2.'");
				Иначе
					ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены группы складов, в состав которых входит выбранный склад <%1>: %2.'");
				КонецЕсли;

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( ШаблонСообщенияПроверки,
						ПредставлениеСклада,
						Символы.ПС + СтрСоединить(МассивПересечений, ";" + Символы.ПС));

				СообщенияПроверки.Добавить(ТекстСообщения);

				ПроверкаПройдена = Ложь;
			КонецЕсли;
		КонецЕсли;

		УстановитьПривилегированныйРежим(Ложь);

		Если СообщенияПроверки.Количество() > 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрСоединить(СообщенияПроверки, Символы.ПС));
		КонецЕсли;
	КонецЕсли;

	Если ПроверкаПройдена Тогда
		ДобавитьЗаписьВРегистрСоответствияОбъектов(ДанныеЗаписи);
	КонецЕсли;

	Возврат ПроверкаПройдена;

КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьЗаписьВРегистрСоответствияОбъектов(ДанныеЗаписи)

	НаборЗаписей = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(ДанныеЗаписи.УчетнаяЗаписьМаркетплейса);
	НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ДанныеЗаписи.ВидОбъектаМаркетплейса);
	НаборЗаписей.Отбор.ИдентификаторОбъектаМаркетплейса.Установить(ДанныеЗаписи.ИдентификаторОбъектаМаркетплейса);

	Если ЗначениеЗаполнено(ДанныеЗаписи.Объект1С) Тогда
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаписи);
		Запись.ДатаАктуальности = ТекущаяДатаСеанса();
	КонецЕсли;

	НаборЗаписей.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВидовЦенЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьИнформациюОЗагружаемыхВидахЦен();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОЗагружаемыхВидахЦен()

	ШаблонПустогоВидаЦен = Символы.Таб + НСтр("ru = 'Для загружаемого типа цен ""%1"" вид цены <b>не задан</b>.'");
	ШаблонЗаполненногоВидаЦен = Символы.Таб + НСтр("ru = 'Для загружаемого типа цен ""%1"" задан вид цены <a href=""%2"">%3</a>.'");

	МассивФормированияЗаголовка = Новый Массив;
	МассивФормированияЗаголовка.Добавить(НСтр("ru = 'Информация о загружаемых видах цен:'"));
	МассивФормированияЗаголовка.Добавить(Символы.ПС);

	ВидыЦенУчетнойЗаписи = ИнтеграцияСМаркетплейсомOzonСервер.ВидыЦенУчетнойЗаписи(УчетнаяЗапись, Ложь);

	Для Каждого ВидЦеныУчетнойЗаписи Из ВидыЦенУчетнойЗаписи Цикл
		Если ВидЦеныУчетнойЗаписи.Значение.Пустая() Тогда
			СтрокаЗаголовка = СтроковыеФункции.ФорматированнаяСтрока( ШаблонПустогоВидаЦен, ВидЦеныУчетнойЗаписи.Наименование);
		Иначе
			СтрокаЗаголовка = СтроковыеФункции.ФорматированнаяСтрока(ШаблонЗаполненногоВидаЦен, ВидЦеныУчетнойЗаписи.Наименование,
					ВидЦеныУчетнойЗаписи.Идентификатор, ВидЦеныУчетнойЗаписи.Значение);
		КонецЕсли;
		МассивФормированияЗаголовка.Добавить(СтрокаЗаголовка);
		МассивФормированияЗаголовка.Добавить(Символы.ПС);
	КонецЦикла;

	МассивФормированияЗаголовка.Удалить(МассивФормированияЗаголовка.ВГраница());

	Элементы.ДекорацияИнформацияОЗагружаемыхВидахЦен.Заголовок = Новый ФорматированнаяСтрока(МассивФормированияЗаголовка);

КонецПроцедуры

&НаКлиенте
Процедура ПолучениеСпискаСкладовЗавершение(РезультатЗадания, ДополнительныеПараметры) Экспорт

	ОчиститьСообщения();

	Если РезультатЗадания <> Неопределено И РезультатЗадания.Статус = "Выполнено" Тогда
		ПолучениеСпискаСкладовЗавершениеНаСервере(РезультатЗадания.АдресРезультата);
	ИначеЕсли Не ЭтоЗакрытиеФормы Тогда  
		ШаблонОшибки = НСтр("ru = 'Не удалось получить склады учетной записи ""%1"" по причине: %2'");
		ПредставлениеНеизвестнойОшибки = НСтр("ru = 'Неизвестная ошибка выполнения операции'");
		ПодробноеПредставлениеОшибки = ?(РезультатЗадания = Неопределено, ПредставлениеНеизвестнойОшибки, РезультатЗадания.ПодробноеПредставлениеОшибки);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				УчетнаяЗапись,
				ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);

		ОбновитьЗаголовокОграниченияВыгрузкиОстатков();
	КонецЕсли;

	ЗапущеноЗаданиеОбновленияСкладов = Ложь;
	Элементы.ДекорацияДлительноеОжидание.Видимость = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПолучениеСпискаСкладовЗавершениеНаСервере(АдресРезультата)

	ОбновитьЗаголовокОграниченияВыгрузкиОстатков();

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);

	ОшибкаПолученияСкладовИзСервиса = Результат.ОшибкаПолученияСкладовИзСервиса;
	Если ОшибкаПолученияСкладовИзСервиса Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось получить список складов маркетплейса. Подробнее см. журнал регистрации.
				|Заполнение списка складов выполнено из сохраненных настроек.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	ТаблицаСкладовПолученная = Результат.ТаблицаСкладов;
	ЗначениеВРеквизитФормы(ТаблицаСкладовПолученная, "ТаблицаСкладов");

	ЕстьВиртуальныеСклады = (ТаблицаСкладовПолученная.Количество() > 0);

	ЕстьВиртуальныеСкладыПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокОграниченияВыгрузкиОстатков()

	ШаблонЗаголовка = НСтр("ru = 'Настройки ограничения выгрузки остатков'");
	Количество = КоличествоЗаписейОграниченияВыгрузкиОстатков(УчетнаяЗапись); 
	ЗаголовокЭлемента = ШаблонЗаголовка + ?(Количество = 0, "", " (" + Количество + ")");
	Элементы.ГруппаНастройкиОграниченияОстатков.Заголовок = ЗаголовокЭлемента;

КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоЗаписейОграниченияВыгрузкиОстатков(УчетнаяЗапись)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК СчетчикЗаписи
		|ИЗ
		|	РегистрСведений.ОграниченияВыгрузкиОстатковМаркетплейсов КАК Источник
		|ГДЕ
		|	Источник.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";
	КоличествоЗаписей = Запрос.Выполнить().Выбрать().Количество();

	Возврат КоличествоЗаписей;

КонецФункции

&НаСервереБезКонтекста
Процедура РегистрОграничениеОстаткаПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	Для Каждого СтрокаСписка Из Строки Цикл
		СтрокаСписка.Значение.Данные.ПредставлениеОбластиДействия =
				Строка(СтрокаСписка.Значение.Данные.ОбластьДействия) + " (" + Строка(СтрокаСписка.Значение.Данные.ТипОбластиДействия) + ")";
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыПриложенияЯндексДиск()

	Возврат ИнтеграцияСМаркетплейсамиСервер.ПараметрыПриложенияЯндексДиск();

КонецФункции

&НаСервере
Процедура ПроверитьДанныеПомещеныВХранилище()

	
	ПараметрыПриложенияЯндексДиск = ПараметрыПриложенияЯндексДиск();
	АдресВХранилище = Строка(УчетнаяЗапись.УникальныйИдентификатор()) + "/" + ПараметрыПриложенияЯндексДиск.ИдентификаторПриложения;

	УстановитьПривилегированныйРежим(Истина);
	ЗначениеКлюча = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(АдресВХранилище, "expires_in");
	УстановитьПривилегированныйРежим(Ложь);

	ДанныеПриложенияВХранилище = ЗначениеКлюча <> Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияОЗагружаемыхВидахЦенОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВидЦен = ЗначениеЦеныПоИдентификатору(УчетнаяЗапись, НавигационнаяСсылкаФорматированнойСтроки);
	Если Не ВидЦен.Пустая() Тогда
		ОповещениеПослеИзменения = Новый ОписаниеОповещения("ПослеИзмененияВидаЦен", ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки);
		ОткрытьФорму("Справочник.ВидыЦен.ФормаОбъекта", Новый Структура("Ключ", ВидЦен), ЭтаФорма,,,, ОповещениеПослеИзменения);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеЦеныПоИдентификатору(УчетнаяЗапись, Идентификатор)

	ВидыЦенУчетнойЗаписи = ИнтеграцияСМаркетплейсомOzonСервер.ВидыЦенУчетнойЗаписи(УчетнаяЗапись, Ложь);
	Результат = ВидыЦенУчетнойЗаписи.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
	Если Результат.Количество() = 1 Тогда
		Возврат Результат[0].Значение;
	КонецЕсли;

	Возврат Справочники.ВидыЦен.ПустаяСсылка();

КонецФункции

&НаКлиенте
Процедура ПослеИзмененияВидаЦен(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	ЗаполнитьИнформациюОЗагружаемыхВидахЦен();

КонецПроцедуры

#КонецОбласти
